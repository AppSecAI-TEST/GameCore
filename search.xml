<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[spring boot做前后分离时间格式化]]></title>
      <url>http://blog.xiaomo.info/2016/11/02/java_spring_boot_data_format/</url>
      <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口时难免遇到时间这类的问题，接口原则：能服务端处理的别留给客户端。客户端的职责就是把服务端的数据完美的展现出来就好了。所以在返回时间的时候最好先进行一下格式化处理，不要返回时间戳格式。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h2 id="一、写一个Serializer"><a href="#一、写一个Serializer" class="headerlink" title="一、写一个Serializer"></a>一、写一个<code>Serializer</code></h2><p>然后做一个时间格式化的处理</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonGenerator</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">JsonSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">SerializerProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer&lt;Date&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void serialize(<span class="type">Date</span> value, <span class="type">JsonGenerator</span> jsonGenerator, <span class="type">SerializerProvider</span> provider) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        jsonGenerator.writeString(sdf.format(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、-使用"><a href="#二、-使用" class="headerlink" title="二、 使用"></a>二、 使用</h2><p>在需要转换的时间的Model中加上这个类,仔细观察下面代码中类型为<code>Date</code>的属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.model.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> info.xiaomo.core.filter.CustomDateSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 把今天最好的表现当作明天最新的起点．．～</span><br><span class="line"> * いま 最高の表現 として 明日最新の始発．．～</span><br><span class="line"> * Today the best performance  as tomorrow newest starter!</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span>: xiaomo</span><br><span class="line"> * <span class="doctag">@github</span>: https://github.com/qq83387856</span><br><span class="line"> * <span class="doctag">@email</span>: hupengbest@163.com</span><br><span class="line"> * <span class="doctag">@QQ</span>_NO: 83387856</span><br><span class="line"> * <span class="doctag">@Date</span>: 2016/4/1 20:37</span><br><span class="line"> * <span class="doctag">@Description</span>: model基类</span><br><span class="line"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</span><br><span class="line"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"Id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"Version"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer.class)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"CreateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = CustomDateSerializer.class)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"UpdateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(<span class="keyword">long</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring boot做前后分离的跨域问题]]></title>
      <url>http://blog.xiaomo.info/2016/11/01/java_spring_boot_cors/</url>
      <content type="html"><![CDATA[<p>最近在用spring boot 做数据接口供客户端调用时发现存在跨域问题，虽然解决问题有很多。比如用nginx处理等等。但是更方便的是服务端设置一下跨域名。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><h3 id="1-使用spring-boot-maven-构建的项目"><a href="#1-使用spring-boot-maven-构建的项目" class="headerlink" title="1. 使用spring boot + maven 构建的项目"></a>1. 使用spring boot + maven 构建的项目</h3><h2 id="二、设置"><a href="#二、设置" class="headerlink" title="二、设置"></a>二、设置</h2><h3 id="1-写一个过滤器-filter"><a href="#1-写一个过滤器-filter" class="headerlink" title="1. 写一个过滤器(filter)"></a>1. 写一个过滤器(filter)</h3><p>实现Filter接口，然后设置一下响应头。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> info.xiaomo.core.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 把今天最好的表现当作明天最新的起点．．～</span><br><span class="line"> * いま 最高の表現 として 明日最新の始発．．～</span><br><span class="line"> * Today the best performance  as tomorrow newest starter!</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span>: xiaomo</span><br><span class="line"> * <span class="doctag">@github</span>: https://github.com/qq83387856</span><br><span class="line"> * <span class="doctag">@email</span>: hupengbest@163.com</span><br><span class="line"> * <span class="doctag">@QQ</span>_NO: 83387856</span><br><span class="line"> * <span class="doctag">@Date</span>: 2016/4/1516:25</span><br><span class="line"> * <span class="doctag">@Description</span>:</span><br><span class="line"> * <span class="doctag">@Copyright</span>(©) 2015 by xiaomo.</span><br><span class="line"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 初始化</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> filterConfig filterConfig</span><br><span class="line">     * <span class="doctag">@throws</span> ServletException ServletException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * CORS 过滤器</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> req   rq</span><br><span class="line">     * <span class="doctag">@param</span> res   res</span><br><span class="line">     * <span class="doctag">@param</span> chain chin</span><br><span class="line">     * <span class="doctag">@throws</span> IOException      IOException</span><br><span class="line">     * <span class="doctag">@throws</span> ServletException ServletException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, If-Modified-Since"</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 销毁对象</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-在启动器中加入过滤器"><a href="#2-在启动器中加入过滤器" class="headerlink" title="2. 在启动器中加入过滤器"></a>2. 在启动器中加入过滤器</h3><p>实质就是加了一个<code>@bean</code>，然后在启动的时候通过过滤器把所有的响应头设置一下。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package info<span class="selector-class">.xiaomo</span><span class="selector-class">.website</span>;</span><br><span class="line"></span><br><span class="line">import info<span class="selector-class">.xiaomo</span><span class="selector-class">.core</span><span class="selector-class">.filter</span><span class="selector-class">.CORSFilter</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.EnableAutoConfiguration</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.domain</span><span class="selector-class">.EntityScan</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.ComponentScan</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.data</span><span class="selector-class">.jpa</span><span class="selector-class">.repository</span><span class="selector-class">.config</span><span class="selector-class">.EnableJpaRepositories</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.transaction</span><span class="selector-class">.annotation</span><span class="selector-class">.EnableTransactionManagement</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line">import org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RestController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 把今天最好的表现当作明天最新的起点．．～</span><br><span class="line"> * いま 最高の表現 として 明日最新の始発．．～</span><br><span class="line"> * Today the best performance  as tomorrow newest starter!</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * @author: xiaomo</span><br><span class="line"> * @github: https://github.com/qq83387856</span><br><span class="line"> * @email: hupengbest@163.com</span><br><span class="line"> * @QQ_NO: 83387856</span><br><span class="line"> * @Date: 2016/4/1 15:38</span><br><span class="line"> * @Description: 后台管理启动器</span><br><span class="line"> * @Copyright(©) 2015 by xiaomo.</span><br><span class="line"> **/</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableAutoConfiguration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(<span class="string">"info.xiaomo"</span>)</span><br><span class="line"><span class="variable">@EntityScan</span>(<span class="string">"info.xiaomo.*.model"</span>)</span><br><span class="line"><span class="variable">@EnableTransactionManagement</span></span><br><span class="line"><span class="variable">@EnableJpaRepositories</span>(<span class="string">"info.xiaomo.*.dao"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class XiaomoMain &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) <span class="selector-tag">throws</span> <span class="selector-tag">Exception</span> &#123;</span><br><span class="line">        SpringApplication<span class="selector-class">.run</span>(XiaomoMain.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public CORSFilter corsFilter() &#123;</span><br><span class="line">        return new CORSFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    String index() &#123;</span><br><span class="line">        return "Hello World! this is website index";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来，客户端就不会存在跨域问题了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring boot相关资料]]></title>
      <url>http://blog.xiaomo.info/2016/10/29/java_spring_ziliao/</url>
      <content type="html"><![CDATA[<p>spring真是让人又爱又恨呢，好用但是难学。spring铺的又太大，不知道从哪入手。整理点资料，免得头晕。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h2 id="一、spring-boot-配置相关"><a href="#一、spring-boot-配置相关" class="headerlink" title="一、spring boot 配置相关"></a>一、spring boot 配置相关</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">properties</a></p>
<h3 id="2-spring-boot-cli-安装和使用"><a href="#2-spring-boot-cli-安装和使用" class="headerlink" title="2. spring boot cli 安装和使用"></a>2. spring boot cli 安装和使用</h3><ol>
<li>下载zip压缩包并解压  </li>
<li>配置环境变量 <code>SPRING_HONE</code> , path里加 <code>%SPRING_HOME%/bin</code></li>
<li><code>spring --version</code> 测试是否成功</li>
<li>帮助 spring –help</li>
<li>生成项目 spring init project_name</li>
</ol>
<h3 id="3-spring-boot首页"><a href="#3-spring-boot首页" class="headerlink" title="3. spring boot首页"></a>3. <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">spring boot首页</a></h3><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><h2 id="二、spring-boot-常见错误"><a href="#二、spring-boot-常见错误" class="headerlink" title="二、spring boot 常见错误"></a>二、spring boot 常见错误</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven 与 IntelliJ IDEA 的完美结合]]></title>
      <url>http://blog.xiaomo.info/2016/10/28/java_idea_maven/</url>
      <content type="html"><![CDATA[<p>你是否正在学习Maven？是否因为Maven难用而又不得不用而苦恼？是否对Eclipse于Maven的冲突而困惑？ 那么我告诉你一个更直接更简单的解决方案: IntelliJ IDEA！<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h1 id="1-什么是-Maven，为什么要使用-Maven-而不是-Ant"><a href="#1-什么是-Maven，为什么要使用-Maven-而不是-Ant" class="headerlink" title="1. 什么是 Maven，为什么要使用 Maven 而不是 Ant"></a>1. 什么是 Maven，为什么要使用 Maven 而不是 Ant</h1><p>Maven简单来说是一个项目管理工具，被认为是Ant的替代品或者继任者。事实上Maven的功能要远远超出Ant，它不仅仅提供编译的脚本，更是在整 个项目周期中提供测试，发布，文档生成等功能，并且有着独特的依赖性管理方法。但是强大的功能的代价就是复杂的使用方法，第一次使用Maven往往需要将 近半个小时的时间（国内网速）来下载一个本地的依赖库，这无疑会使很多开发人员“知难而退”。虽然广受诟病，一个不争的事实就是Maven逐渐代替了 Ant，使用Maven也成了Java开发人员的一个必要技能。</p>
<h1 id="2-IntelliJ-IDEA-与-Eclipse"><a href="#2-IntelliJ-IDEA-与-Eclipse" class="headerlink" title="2. IntelliJ IDEA 与 Eclipse"></a>2. IntelliJ IDEA 与 Eclipse</h1><p>在Java的世界里，Eclipse毋庸置疑是IDE中的王者，IntelliJ IDEA和NetBeans都只能生活在Eclipse的光环下。Eclipse的强大已经不用我多说了，但其实IntelliJ IDEA也是一个相当优秀的IDE，尤其体现在它的智能上。它的一个针对.Net的Clone产品ReSharper已经被越来越多的C#开发者所接受。 IntelliJ IDEA提供了大量的智能规则来协助开发者，类似代码补全，用法的转换，格式的提示等等，当你习惯以后，你就会对那个小灯泡爱不释手。</p>
<h1 id="3-选择-Maven-IntelliJ-IDEA-的理由"><a href="#3-选择-Maven-IntelliJ-IDEA-的理由" class="headerlink" title="3. 选择 Maven + IntelliJ IDEA 的理由"></a>3. 选择 Maven + IntelliJ IDEA 的理由</h1><p>之所以要选择IntelliJ IDEA，是因为Maven+Eclipse实在太难用了。Eclipse有两个Maven插件 m2eclipse 和 Eclipse IAM。但是由于Eclipse和Maven设计上的矛盾，这两个插件可能都达不到你想要的效果。m2eclipse 会把你所有类型的项目都视为Maven类型项目，这对于一个单纯的Java项目或许可以，对于一个JEE或者WEB项目都是一场灾难。Eclipse IAM 并不会改变你的项目类型，但是他提供的功能也就仅仅限于编辑和运行POM文件了，甚至连依赖性都管理不了。相比之下，如果你非要用Eclipse的话我还 是推荐你使用Eclipse IAM。Eclipse想要完美的支持Maven恐怕需要在底层设计上做一些改变，无论是代码规范，项目结构规范和依赖性管理上，都有着不可调和的矛盾。 显然，在这方面IntelliJ IDEA做的要好的多，以至于你很难说出对它的不满。</p>
<h1 id="4-Maven-IntelliJ-IDEA-的优势"><a href="#4-Maven-IntelliJ-IDEA-的优势" class="headerlink" title="4. Maven + IntelliJ IDEA 的优势"></a>4. Maven + IntelliJ IDEA 的优势</h1><h2 id="一切都是Module："><a href="#一切都是Module：" class="headerlink" title="一切都是Module："></a>一切都是Module：</h2><pre><code>IntelliJ IDEA借鉴的Maven的概念，不在采取Eclipse里Project的概念，一切都是Module。无论是否使用Maven，你的项目都是一个独立 的Module。并且你可以混搭使用Maven Module和普通的Java Module，两者可以和谐共存。
</code></pre><h2 id="支持Multi-module："><a href="#支持Multi-module：" class="headerlink" title="支持Multi-module："></a>支持Multi-module：</h2><pre><code>可以说Maven的项目结构设计是非常严格的，现实应用中你必须用到Parent-Child的模式。Eclipse由于不支持在一个Project上建 立Sub-Project，因此无论如何目前都不能实现。IntelliJ IDEA可以完美的实现这个设计，并且无论是Module属性里，还是彼此的依赖性上都不会出现问题。
</code></pre><h2 id="更方便的生命周期操作："><a href="#更方便的生命周期操作：" class="headerlink" title="更方便的生命周期操作："></a>更方便的生命周期操作：</h2><pre><code>比起Eclipse通通放进右键菜单的行为，IntelliJ IDEA有着单独的窗口可以完成Maven的操作。你可以针对不同Module进行 Clean Compile Package Install等操作，各个Plug-in的操作也一清二楚。
</code></pre><h2 id="完美的依赖性管理："><a href="#完美的依赖性管理：" class="headerlink" title="完美的依赖性管理："></a>完美的依赖性管理：</h2><pre><code>由于Maven会把所有依赖的包放在本机的一个目录下，所以实际上是脱离Project本身存在的。IntelliJ IDEA引入了一个External Library的概念，所有的Maven依赖性都会放在这里，和项目自带的库区分开。并且Module之间会智能的判断，你不需要Maven Install来进行引用代码的更新。
</code></pre><h2 id="动态更新："><a href="#动态更新：" class="headerlink" title="动态更新："></a>动态更新：</h2><pre><code>每当Maven相关的设置更改时，例如修改了pom的依赖性，添加删除Module，IntelliJ IDEA会提示你进行更新。这种更新实际上就是运行了Maven，所以你不许要手动运行Maven Compile来进行更新，也不会像Eclipse里遇到莫名其妙的问题。
</code></pre><h1 id="5-Maven-安装"><a href="#5-Maven-安装" class="headerlink" title="5. Maven 安装"></a>5. Maven 安装</h1><p>到<a href="http://maven.apache.org/download.html" target="_blank" rel="external">http://maven.apache.org/download.html</a> 下载最新的Maven版本，我下载的版本为最新的apache-maven-3.0.4。推荐使用最新的Maven 3，因为比以前的Maven 2性能更好，而且完全兼容Maven 2。</p>
<p>下载好以后，解压到一个目录，我的目录为 D:\apache-maven-3.0.4，接着配置Maven环境变量M2_HOME为你解压的目录，如下图新建M2_HOME变量并追加到Path后面：</p>
<p>如果要在CMD控制台运行Maven命令的话，还需要配置Jdk环境变量，因为我接下来的操作都是基于IntelliJ IDEA，所以就不用配置JDK环境变量。</p>
<h1 id="6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）"><a href="#6-Maven-与IntelliJ-IDEA完美使用（基于IntelliJ-IDEA-12）" class="headerlink" title="6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）"></a>6. Maven 与IntelliJ IDEA完美使用（基于IntelliJ IDEA 12）</h1><p>打开IntelliJ IDEA，新建一个Maven项目，如下图，项目名称为mymaven</p>
<p>选择Maven模版</p>
<p>创建过程中，配置Maven主目录</p>
<p>创建好后的目录结构如下图，IDEA创建了src/main/resources（自动创建）、src/main/java（手动创建）、src/main/test（手动创建）、以及pom.xml文件（自动创建）</p>
<p>按照Maven约定，项目的主目录位于src/main/resources、src/main/java中，测试目录位于src/main/test 中，所以我们在最终打包项目的时候，只包含主目录代码，不会包含测试目录里的代码，而测试目录里的代码只会在测试时候用到。</p>
<p>最后pom.xml这个文件是我们Maven项目的核心文件，POM(Project Object Model，项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目依赖。</p>
<p>project：是xml文件的根元素，我们主要关心根元素下的子元素<br>modelVersion：定义了当前POM模型的版本，Maven 2 或Maven 3 只能是4.0.0<br>groupId：定义了项目属于哪个组，一般来说这个网网和公司或组织关联，比如说，你所在的公司为mycom.那就应该定义为com.mycom.mymaven，mymaven为项目名称<br>artifactId：定 义了当前Maven项目在组中的唯一id，例如HelloMaven这个项目，我则把他定义为hello-maven，还例如spring项目，他的 groupId为org.springframework，对于content项目来说artifactId则为spring-content，web项 目则为spring-web</p>
<p>最后我们使用IntelliJ IDEA来用Maven编译我们的代码，打开Maven Projects菜单，如图，选中clean、compile并右键点击Run ‘hello-maven[clean,compile]’按钮即可。</p>
<p>根据输出结果我们看到，clean命令让Maven先清理target目录，Maven一般认为项目的输出目录为target，然后执行resource任务，现在为定义项目资源，所以暂时略过，最后执行编译任务！ </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Servlet做简单的上传功能]]></title>
      <url>http://blog.xiaomo.info/2016/10/24/java_servlet_upload/</url>
      <content type="html"><![CDATA[<p>这篇文章主要为大家详细介绍了java基于servlet实现上传功能，后台使用java实现，前端主要是jsp，感兴趣的小伙伴们可以参考一下<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/java_banner.png" alt="1"></p>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-1-jar包"><a href="#1-1-jar包" class="headerlink" title="1.1 jar包"></a>1.1 jar包</h3><p><code>servlet-api</code> 是servlet的核心api包<br><code>commons-fileupload</code> 上传功能的通用工具包<br><code>fastjson</code> 阿里的json工具包</p>
<h3 id="1-2-pom文件"><a href="#1-2-pom文件" class="headerlink" title="1.2 pom文件"></a>1.2 pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、项目介绍"><a href="#二、项目介绍" class="headerlink" title="二、项目介绍"></a>二、项目介绍</h2><h3 id="1-1-web-xml配置"><a href="#1-1-web-xml配置" class="headerlink" title="1.1 web.xml配置"></a>1.1 web.xml配置</h3><p>此项目是采用maven构建的java web项目，传统的jsp作为页面交互。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.apache.commons.fileupload.servlet.FileCleanerCleanup</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ghj.servlet.FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/FileUploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置的servlet的位置，那么我们就要去写代码了。</p>
<h3 id="1-2-上传功能"><a href="#1-2-上传功能" class="headerlink" title="1.2 上传功能"></a>1.2 上传功能</h3><p>新建一个class文件<code>com.ghj.servlet.FileUploadServlet</code>，继承自<code>HttpServlet</code>。重写它的<code>init()</code>和<code>doPost()</code>方法。</p>
<p>代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ghj.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.FileCleanerCleanup;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileCleaningTracker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 把今天最好的表现当作明天最新的起点．．～</span><br><span class="line"> * いま 最高の表現 として 明日最新の始発．．～</span><br><span class="line"> * Today the best performance  as tomorrow newest starter!</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> *</span><br><span class="line"> * @author: xiaomo</span><br><span class="line"> * @github: https://github.com/qq83387856</span><br><span class="line"> * @email: hupengbest@163.com</span><br><span class="line"> * @QQ_NO: 83387856</span><br><span class="line"> * @Date: 2016/10/24 9:15.</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Copyright(©) 2016 by xiaomo.</span><br><span class="line"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FileUploadServlet <span class="keyword">extends</span> HttpServlet &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">File</span> fileUploadPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileDirectory = <span class="string">"/data"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置文件存储位置</span><br><span class="line">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init() &#123;</span><br><span class="line">        String realPath = <span class="keyword">this</span>.getServletConfig().getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">        fileUploadPath = <span class="keyword">new</span> <span class="keyword">File</span>(realPath + fileDirectory);</span><br><span class="line">        <span class="keyword">if</span> (!fileUploadPath.exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isCreate = fileUploadPath.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (isCreate) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"文件夹己被创建"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求(文件上传的操作)</span><br><span class="line">     * 说明：该方法支持同时上传多个文件（在index.jsp中添加文件上传的控件）</span><br><span class="line">     * 注意：文件名只能为英文</span><br><span class="line">     *</span><br><span class="line">     * @param request  request</span><br><span class="line">     * @param response response</span><br><span class="line">     * @throws ServletException ServletException</span><br><span class="line">     * @throws IOException      IOException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doPost(HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</span><br><span class="line">        <span class="keyword">if</span> (isMultipart) &#123;</span><br><span class="line">            ServletContext servletContext = <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">            <span class="keyword">File</span> repository = (<span class="keyword">File</span>) servletContext.getAttribute(<span class="string">"javax.servlet.context.tempdir"</span>);</span><br><span class="line">            DiskFileItemFactory factory = newDiskFileItemFactory(servletContext, repository);</span><br><span class="line"></span><br><span class="line">            ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">            upload.setHeaderEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            PrintWriter printWriter = response.getWriter();</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            JSONArray files = <span class="keyword">new</span> JSONArray();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">                <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.isFormField()) &#123; <span class="comment">//表单输入域</span></span><br><span class="line">                        System.out.<span class="keyword">println</span>(item.getFieldName());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文件上传域</span></span><br><span class="line">                        String name = item.getName();</span><br><span class="line">                        <span class="keyword">if</span> (!name.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                            <span class="keyword">int</span> index = name.indexOf(<span class="string">"\\"</span>);</span><br><span class="line">                            <span class="keyword">File</span> uploadedFile;</span><br><span class="line">                            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath,</span><br><span class="line">                                        <span class="keyword">File</span>.separator + name);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                uploadedFile = <span class="keyword">new</span> <span class="keyword">File</span>(fileUploadPath, <span class="keyword">File</span>.separator + name.substring(name.lastIndexOf(<span class="keyword">File</span>.separator) + <span class="number">1</span>));</span><br><span class="line">                            &#125;</span><br><span class="line">                            item.<span class="keyword">write</span>(uploadedFile);</span><br><span class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"name"</span>, name);</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"size"</span>, item.getSize());</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"url"</span>, fileUploadPath + <span class="string">"/"</span> + name);</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"deleteType"</span>, <span class="string">"post"</span>);</span><br><span class="line">                            files.add(<span class="keyword">file</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            JSONObject <span class="keyword">file</span> = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                            <span class="keyword">file</span>.put(<span class="string">"result"</span>, <span class="string">"please choose a file"</span>);</span><br><span class="line">                            files.add(<span class="keyword">file</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                result.put(<span class="string">"files"</span>, files);</span><br><span class="line">                printWriter.<span class="keyword">write</span>(result.toString());</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 将请求的每个项目封装成单独的文件项目</span><br><span class="line">     *</span><br><span class="line">     * @param context    context</span><br><span class="line">     * @param repository repository</span><br><span class="line">     * @return DiskFileItemFactory</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> DiskFileItemFactory newDiskFileItemFactory(ServletContext context, <span class="keyword">File</span> repository) &#123;</span><br><span class="line">        FileCleaningTracker fileCleaningTracker = FileCleanerCleanup.getFileCleaningTracker(context);</span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, repository);</span><br><span class="line">        factory.setFileCleaningTracker(fileCleaningTracker);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-页面"><a href="#2-3-页面" class="headerlink" title="2.3 页面"></a>2.3 页面</h3><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@page pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> </span><span class="xml"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"FileUploadServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file1"</span>"&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>看起来清新简单，就不加那么style的修饰了。</p>
<h2 id="三、效果图"><a href="#三、效果图" class="headerlink" title="三、效果图"></a>三、效果图</h2><p><img src="http://static.xiaomo.info/images/java_upload.gif" alt="效果图"></p>
<h2 id="四、源代码"><a href="#四、源代码" class="headerlink" title="四、源代码"></a>四、源代码</h2><p><a href="https://github.com/java-user/ServletFileUploadDemo" target="_blank" rel="external">https://github.com/java-user/ServletFileUploadDemo</a>  需要的朋友自取，随意使用不用客气</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[喜欢的动漫]]></title>
      <url>http://blog.xiaomo.info/2016/10/08/nihon_anime/</url>
      <content type="html"><![CDATA[<p>二次元为我们描绘了一个不一样的世界，一群有着精彩故事的人，还有视觉听觉上的双重享受。不是很美妙吗？我们还能从二次元里获得力量、勇气、热情、梦想，懂得坚持、友爱、乐观、努力。二次元正是人类的伟大创造。<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/dongli3.jpg" alt="1"></p>
<h2 id="一、アニメ"><a href="#一、アニメ" class="headerlink" title="一、アニメ"></a>一、<a href="https://zh.moegirl.org" target="_blank" rel="external">アニメ</a></h2><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">东离剑游记</td>
<td style="text-align:center">東离剣の遊記</td>
</tr>
<tr>
<td style="text-align:center">NEW GAME！</td>
<td style="text-align:center">NEW GAME！</td>
</tr>
<tr>
<td style="text-align:center">刀剑神域</td>
<td style="text-align:center">ソードアート・オンライン</td>
</tr>
<tr>
<td style="text-align:center">全职猎人</td>
<td style="text-align:center">ハンター×ハンター</td>
</tr>
<tr>
<td style="text-align:center">寄生兽</td>
<td style="text-align:center">寄生獣</td>
</tr>
<tr>
<td style="text-align:center">星之梦</td>
<td style="text-align:center">星の夢</td>
</tr>
<tr>
<td style="text-align:center">Fate/Zero</td>
<td style="text-align:center">フェイト/ゼロ</td>
</tr>
<tr>
<td style="text-align:center">妖精的尾巴</td>
<td style="text-align:center">フェアリーテイル</td>
</tr>
<tr>
<td style="text-align:center">命运石之门</td>
<td style="text-align:center">シュタインズゲート</td>
</tr>
<tr>
<td style="text-align:center">線上遊戲的老婆不可能是女生？</td>
<td style="text-align:center">ネトゲの嫁は女の子じゃないと思った？</td>
</tr>
<tr>
<td style="text-align:center">Re:从零开始的异世界生活</td>
<td style="text-align:center">Re:ゼロから始める異世界生活</td>
</tr>
<tr>
<td style="text-align:center">干物妹小埋</td>
<td style="text-align:center">干物妹！うまるちゃん</td>
</tr>
<tr>
<td style="text-align:center">遊戲人生</td>
<td style="text-align:center">ノーゲーム・ノーライフ</td>
</tr>
<tr>
<td style="text-align:center">夏目友人帐</td>
<td style="text-align:center">なつめ　ゆうじんちょう</td>
</tr>
<tr>
<td style="text-align:center">寒蝉鸣泣之时</td>
<td style="text-align:center">ひぐらしのなく頃に</td>
</tr>
<tr>
<td style="text-align:center">未来日记</td>
<td style="text-align:center">未来日记</td>
</tr>
<tr>
<td style="text-align:center">加速世界</td>
<td style="text-align:center">アクセル・ワールド</td>
</tr>
<tr>
<td style="text-align:center">Charlotte</td>
<td style="text-align:center">Charlotte</td>
</tr>
<tr>
<td style="text-align:center">笨蛋测验召唤兽</td>
<td style="text-align:center">バカとテストと召喚獣</td>
</tr>
<tr>
<td style="text-align:center">心理测量者</td>
<td style="text-align:center">サイコパス</td>
</tr>
<tr>
<td style="text-align:center">CLANNAD</td>
<td style="text-align:center">CLANNAD</td>
</tr>
<tr>
<td style="text-align:center">AIR</td>
<td style="text-align:center">AIR</td>
</tr>
<tr>
<td style="text-align:center">KANON</td>
<td style="text-align:center">KANON</td>
</tr>
</tbody>
</table>
<h2 id="二、ドラマ"><a href="#二、ドラマ" class="headerlink" title="二、ドラマ"></a>二、ドラマ</h2><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">孝忠八犬</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">成濑巳喜男</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">小栗康平的泥之河</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">小津安二郎</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">娄烨是才子</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">彗星来的那一夜</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">堂吉诃德</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">对不起青春</td>
<td style="text-align:center">なし</td>
</tr>
<tr>
<td style="text-align:center">nana</td>
<td style="text-align:center">なし</td>
</tr>
</tbody>
</table>
<h2 id="三、映画"><a href="#三、映画" class="headerlink" title="三、映画"></a>三、映画</h2><table>
<thead>
<tr>
<th style="text-align:center">名前</th>
<th style="text-align:center">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">千与千寻</td>
<td style="text-align:center">千と千尋の神隠し</td>
</tr>
<tr>
<td style="text-align:center">となりのトトロ</td>
<td style="text-align:center">となりのトトロ</td>
</tr>
<tr>
<td style="text-align:center">你的名字</td>
<td style="text-align:center">君のなまえは？</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生活习惯的不同，造就了丰富多彩的世界]]></title>
      <url>http://blog.xiaomo.info/2016/08/28/nihon_sekaku/</url>
      <content type="html"><![CDATA[<p>にほんのライフスタイルに<br><a id="more"></a><br><img src="http://static.xiaomo.info/images/fujisann.png" alt="1"></p>
<ul>
<li>不喜欢用蓝色圆珠笔。蓝色圆珠笔只在作标记的场合使用。</li>
<li>香烟吸一半就扔掉。有的人烟瘾大，吸两个半支烟，而不是吸一个整支。</li>
<li>日本人不太在意姓的意思。在中国人看来日本人的姓稀奇古怪。一次我去开会签到，抬头一看接待小姐的姓是“我孙子”。还有人姓厕所（御手洗）。很多姓是地名，“大阪”“名古屋”“涩谷”都见过。还有四个字的姓，如最近的丑闻作曲家姓“佐村河内”。</li>
<li>日本人不忌讳鬼、地狱、幽灵。含“鬼”字的地名有很多，叫“地狱”的拉面店也见到过。</li>
<li>不把跪着视为低人一等。因为跪着比蹲着省力，经常看到日本人跪着工作。例如，在没有椅子的时候，跪着操作电脑，高度正好。</li>
<li>如果第二天下午开会，日本人前一天晚上就不吃韭菜了。</li>
<li>如果感冒了，一定带口罩，即使不是流行性感冒也怕别人忌讳。</li>
<li>不使用非常浓的香水。无香料的化妆品很受欢迎。</li>
<li>不会打听别人的衣服、物品多少钱买的。</li>
<li>不会和别人勾肩搭背，即使是好朋友。</li>
<li>女士吃面包点心时，用手掰下一块放到嘴里，不会直接咬。（可能认为这样吃比较体面。）</li>
<li>吸烟时不劝烟，聚餐时不劝酒，更不会把人灌醉。<br>*不轻易把谁称为自己的朋友，交往了几十年还把对方称为“知人”。对自来熟，刚见面就称朋友的人不喜欢。</li>
<li>不会轻易触摸别人的肌肤，即使是同性。对拉拉手的亲热和拍拍肩的关心不接受。</li>
<li>不打听别人的家事，更不要说隐私。在一起工作十几年，不知道对方有几个兄弟姐妹。福原爱在接受日本媒体的采访时说，中国记者什么都问，问得直想哭。</li>
<li>不轻易交换电话号码。我们公司的部长课长之间，甚至也有不知道对方电话号码的人。</li>
<li>日本人的胃口很小，初到日本的中国留学生（男生）在学校食堂一份定食大部分吃不饱。</li>
<li>在工作场合绝不穿张扬的服装。一般60岁以上的人开始穿红色的花的衣服。</li>
<li>工作场合不可吃东西，但可以吃水果糖。</li>
<li>工作时间不可接私人电话。个人不能使用公家电话打出去，也不能打进来。</li>
<li>私人的信件和物品不能寄到公司。</li>
<li>在家里高声说话，邻居会到家中提出警告。</li>
<li>泡温泉以前要先洗净身子。</li>
<li>如果你送给日本人点心，对方说真好吃。千万不要信以为真。是真是假得在其他的场合验证。</li>
<li>日本的绿茶泡一分钟就可以喝。</li>
<li>把手插到衣服裤子口袋里，被认为是对对方不尊敬。张艺谋拍的《千里走单骑》电影里的女日语翻译，很多场面把手放在口袋里，感觉不舒服。</li>
<li>日本人没有抱肘的习惯，认为这个姿势显示傲慢。</li>
<li>行人过马路遇到红灯必停，即使绿灯侧没有车。本人这种情况走过，被旁边的车“嘀”过。日本人说，这样做的目的是，告诉孩子，有法必依。</li>
<li>开车时，后灯双闪，是表示对后车的感谢。常在别人给让路后使用。</li>
<li>对面的车前灯瞬闪，表示给你让路。</li>
<li>公司业务关系新年拜年，带的礼品基本就是两条毛巾。</li>
<li>公司来两伙客人，一方是得到工作的上家，一方是外协的下家，在一个接待室谈话。只给上家上茶，下家没有。</li>
<li>公司来客，不管是什么工作关系，到吃饭时间基本都不提供午饭。</li>
<li>工作中出现差错，再好的朋友都不会说一句同情的话。有再多的客观原因也没人体谅。如果争辩解释，被认为错上加错。</li>
<li>企业一般都有自己的日历，根据客户的日历制定，国家法定假日常常有不休息的时候。</li>
<li>企业的年假，日本人一般不休，很少利用年假去旅游。</li>
<li>日本人工作比较配合，部门之间扯皮的事很少。</li>
<li>日本人的习惯是报忧不报喜，看电视听领导讲话，没有大好形势。</li>
<li>日本的电视广告很好看，没有太长时间的广告，幽默让人不厌倦。例，一个美女到动物店说想买一条狗，两只老虎，三头狮子。旁边的顾客惊得把手包都掉到了地上。店主问为什么，她说，单身女子在家害怕，每个房间都要有猛兽守卫。这时画外音，有比这还安全的，“家用电子警备系统”。</li>
<li>日本不光小孩看漫画，动画片，大人也很爱看。</li>
<li>店铺开业，门前摆放的祝贺物品，简直就可以说是中国追悼会上的花圈。</li>
<li>传统文化节，很多人穿的衣服上印着“祭”字。在日本，“祭”字的意思是文化节。</li>
<li>日本的医院对消炎药的使用严格控制，但相对而言，对激素的使用比较放松。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《东离剑游记》]]></title>
      <url>http://blog.xiaomo.info/2016/08/24/bangumi_dongli/</url>
      <content type="html"><![CDATA[<p>这两天看了一部神奇的动漫，具有强烈的武侠风。现在循环听练听力。然而你一定想不到这部动漫是多么的让人惊喜。<br><a id="more"></a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>这是一次打破当前布袋戏模式的局限的冒险和挑战。关键的变化主要在三点：</p>
<h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p>剧本作者由日本的虚渊玄担任，虚的创作水平有目共睹，保守的说，当不在目前布袋戏圈内最出色的编剧三弦之下，甚至只会更高，这实际上有效的补完了霹雳近年来剧本疲弱的短板，把最弱点变成了最强点。<br>但水平是一方面，文化属性则是另一方面，从东离的第一集看，比如一些人物特质，就明显少了几分霹雳和金光的中国侠客味道，而多了几分日本武士的感觉，这种改变实际上让东离剑在文化意识领域有些脱离了承载着传统文化的布袋戏，而接近了日本动画的范畴。</p>
<h3 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h3><p>是配音从单人中文口白变成了日语声优配音，但霹雳似乎也同时提供了台语配音版？这就如同当年的可口可乐的营销手法一样，新老同出，这在创新的同时很大程度上减少了风险，应是一个很明智的选择。</p>
<h3 id="第三"><a href="#第三" class="headerlink" title="第三"></a>第三</h3><p>是东离的单集时长从过往的六十分钟以上变成了日本动画的二十三分钟，它在能让编剧和制作人员更有效的凝练和提升质量的同时，却也可能带来一些节奏的变化，让旧观众产生一定的不适应感，比如我至今仍对东离的木偶与台词的配合，木偶动作和战斗画面的结合有点不适。<br>总而言之，东离比较像一个嫁接品，有点像是在布袋戏的树干里插入了一个日本动画的灵魂，同时在枝叶上嫁接了日本动画的设计和手法，所以霹雳的“偶动漫”这个说法，正如苹果梨一样，我以为是很贴切的，其味道好不好吃，是不是能在保留苹果的精髓的同时加入梨子的优点，是不是能在让吃苹果的人满意的同时吸引一群喜欢吃梨子的人，还是搞砸了，弄得似是而非，两头都不满意，这个目前下结论为时尚早，但无论如何，仅凭这个剧作本身，它已毫无疑问是布袋戏圈的一大突破性创举，对于勇于探索向前的人和行为，无论其最终成败如何，我以为作为观众，我们都是该有一种开阔的心态，而抱持一份最起码的支持和敬意的。</p>
<h2 id="二、-插画"><a href="#二、-插画" class="headerlink" title="二、 插画"></a>二、 插画</h2><p><img src="http://static.xiaomo.info/images/dongli1.jpg" alt="1"><br><img src="http://static.xiaomo.info/images/dongli2.jpg" alt="1"><br><img src="http://static.xiaomo.info/images/dongli3.jpg" alt="1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yargs插件的使用，node.js 命令行框架 yargs 和你的程序实现交互]]></title>
      <url>http://blog.xiaomo.info/2016/08/22/npm_yargs/</url>
      <content type="html"><![CDATA[<p>如何让你的node.js 应用程序像shell 脚本一样和你交互?没错，就是yargs。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h2><p>大概有一种情况你需要让你的程序接收一个参数,通过这个参数我们做一系列的定制化功能.</p>
<p>常见的做法是 把一些不同环境不同配置的变量写到 config 配置文件中.</p>
<p>当你的环境变化的时候,你手动去修改你的config 中的变量来达到不同环境显示定制化的东西.<br>更具象的一个例子:</p>
<p>config文件中有一个配置项 langue</p>
<p>当你发布国内站点的时候,你需要配置成 langue=”zh-cn”</p>
<p>当你发布国外站点的时候,你需要配置成 langue=”en”</p>
<p>现在, yargs 的功能就是帮你实现类似上面这种定制化的参数功能.</p>
<p>从此一些简单定制参数可以彻底摆脱 config 配置了.</p>
<p>比如:</p>
<p>你的node.js 启动文件是 app.js</p>
<p>当你部署中文环境站点的时候,就可以这样  node app.js –l zh-cn</p>
<p>英文网站部署时  node app.js –l en</p>
<p>当然上面输入给启动文件的 -l 参数,你是可以在 app.js 文件中获取,然后对应加载你需要定制化的东东即可.</p>
<p>上面我们只是介绍它的作用,以及一个具体的例子让大家明白什么时候使用.下面开始介绍如何使用:</p>
<h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><code>npm install --save yargs</code></p>
<h3 id="2-定义命令交互参数"><a href="#2-定义命令交互参数" class="headerlink" title="2. 定义命令交互参数:"></a>2. 定义命令交互参数:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"><span class="keyword">if</span> (argv.l == <span class="string">'zh-cn'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Chinese site!'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l == <span class="string">'en'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'English website!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./app<span class="selector-class">.js</span> --l=zh-cn</span><br><span class="line">Chinese site!</span><br><span class="line"></span><br><span class="line">$ ./app<span class="selector-class">.js</span> --l=en</span><br><span class="line">English website!</span><br></pre></td></tr></table></figure>
<h3 id="4-接收参数"><a href="#4-接收参数" class="headerlink" title="4. 接收参数"></a>4. 接收参数</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> argv = <span class="keyword">require</span>(<span class="string">'yargs'</span>).argv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argv.l==<span class="string">'zh-cn'</span>) &#123;</span><br><span class="line">    <span class="comment">//获取参数 l 的值</span></span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'Chinese website!'</span>);</span><br><span class="line">    <span class="built_in">global</span>.langue=<span class="string">'zh-cn'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(argv.l==<span class="string">'en'</span>)&#123;</span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'English website!'</span>);</span><br><span class="line">    <span class="built_in">global</span>.langue=<span class="string">'en'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们通过 argv 获取 –l 参数来判断当前要运行哪个环境.</p>
<p>然后使用全局变量 global.langue 来标识当前运行环境.</p>
<p>在后面的所有个性化定制处我们都可以直接使用全局变量 global.langue 来做判断.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2 api整理之路由模块]]></title>
      <url>http://blog.xiaomo.info/2016/07/28/angular2_api_roter/</url>
      <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h2><h3 id="1-PRIMARY-OUTLET"><a href="#1-PRIMARY-OUTLET" class="headerlink" title="1. PRIMARY_OUTLET"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html" target="_blank" rel="external">PRIMARY_OUTLET</a></h3><h3 id="2-ROUTER-DIRECTIVES"><a href="#2-ROUTER-DIRECTIVES" class="headerlink" title="2. ROUTER_DIRECTIVES"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html" target="_blank" rel="external">ROUTER_DIRECTIVES</a></h3><p>路由指令集合常量</p>
<h2 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h2><h3 id="1-活跃路由ActivatedRoute"><a href="#1-活跃路由ActivatedRoute" class="headerlink" title="1. 活跃路由ActivatedRoute"></a>1. 活跃路由<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html" target="_blank" rel="external">ActivatedRoute</a></h3><p>可以获取当前路由的参数和数据</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyComponent &#123;</span><br><span class="line">  constructor(route: ActivatedRoute) &#123;</span><br><span class="line">    <span class="keyword">const</span> id: Observable&lt;<span class="built_in">string</span>&gt; = route.params.<span class="built_in">map</span>(p =&gt; p.id);</span><br><span class="line">    <span class="keyword">const</span> data = route.data.<span class="built_in">map</span>(d =&gt; d.user); <span class="comment">//includes `data` and `resolve`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-活跃路由快照ActivatedRouteSnapshot"><a href="#2-活跃路由快照ActivatedRouteSnapshot" class="headerlink" title="2. 活跃路由快照ActivatedRouteSnapshot"></a>2. 活跃路由快照<a href="https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html" target="_blank" rel="external">ActivatedRouteSnapshot</a></h3><p>具体功能不明</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyComponent</span> &#123;</span><br><span class="line">  constructor(route: ActivatedRoute) &#123;</span><br><span class="line">    <span class="keyword">const</span> id: <span class="keyword">string</span> = route.snapshot.<span class="keyword">params</span>.id;</span><br><span class="line">    <span class="keyword">const</span> data = route.snapshot.data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-可激活CanActivate"><a href="#3-可激活CanActivate" class="headerlink" title="3. 可激活CanActivate"></a>3. 可激活<a href="https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html" target="_blank" rel="external">CanActivate</a></h3><p>实现此接口并重写<code>canActivate</code>方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanActivateTeam</span> <span class="keyword">implements</span> <span class="title">CanActivate</span> &#123;</span></span><br><span class="line">  constructor(<span class="keyword">private</span> <span class="string">permissions:</span> Permissions, <span class="keyword">private</span> <span class="string">currentUser:</span> UserToken) &#123;&#125;</span><br><span class="line">  canActivate(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;<span class="keyword">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.permissions.canActivate(<span class="keyword">this</span>.currentUser, <span class="keyword">this</span>.route.params.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  CanActivateTeam,</span><br><span class="line">  provideRouter([&#123;</span><br><span class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</span><br><span class="line"><span class="symbol">    component:</span> Team,</span><br><span class="line"><span class="symbol">    canActivate:</span> [CanActivateTeam]</span><br><span class="line">  &#125;])</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="4-CanDeactivate"><a href="#4-CanDeactivate" class="headerlink" title="4. CanDeactivate"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html" target="_blank" rel="external">CanDeactivate</a></h3><h3 id="5-其他选项ExtraOptions"><a href="#5-其他选项ExtraOptions" class="headerlink" title="5. 其他选项ExtraOptions"></a>5. 其他选项<a href="https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html" target="_blank" rel="external">ExtraOptions</a></h3><h3 id="6-解决-Resolve"><a href="#6-解决-Resolve" class="headerlink" title="6. 解决 Resolve"></a>6. 解决 <a href="https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html" target="_blank" rel="external">Resolve</a></h3><p>实现此接口并重写<code>Resolve</code>方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeamResolver</span> <span class="keyword">implements</span> <span class="title">Resolve</span> &#123;</span></span><br><span class="line">  constructor(<span class="keyword">private</span> <span class="string">backend:</span> Backend) &#123;&#125;</span><br><span class="line">  resolve(<span class="string">route:</span> ActivatedRouteSnapshot, <span class="string">state:</span> RouterStateSnapshot):Observable&lt;any&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.backend.fetchTeam(<span class="keyword">this</span>.route.params.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bootstrap(AppComponent, [</span><br><span class="line">  TeamResolver,</span><br><span class="line">  provideRouter([&#123;</span><br><span class="line"><span class="symbol">    path:</span> <span class="string">'team/:id'</span>,</span><br><span class="line"><span class="symbol">    component:</span> TeamCmp,</span><br><span class="line"><span class="symbol">    resolve:</span> &#123;</span><br><span class="line"><span class="symbol">      team:</span> TeamResolver</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;])</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="7-路由-Route"><a href="#7-路由-Route" class="headerlink" title="7. 路由 Route"></a>7. 路由 <a href="https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html" target="_blank" rel="external">Route</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> &#123;</span></span><br><span class="line"><span class="string">path :</span> string</span><br><span class="line"><span class="string">terminal :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">pathMatch :</span> <span class="string">'full'</span>|<span class="string">'prefix'</span></span><br><span class="line"><span class="string">component :</span> Type|string</span><br><span class="line"><span class="string">redirectTo :</span> string</span><br><span class="line"><span class="string">outlet :</span> string</span><br><span class="line"><span class="string">canActivate :</span> any[]</span><br><span class="line"><span class="string">canDeactivate :</span> any[]</span><br><span class="line"><span class="string">data :</span> Data</span><br><span class="line"><span class="string">resolve :</span> ResolveData</span><br><span class="line"><span class="string">children :</span> Route[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-路由状态-RouterState"><a href="#8-路由状态-RouterState" class="headerlink" title="8. 路由状态 RouterState"></a>8. 路由状态 <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html" target="_blank" rel="external">RouterState</a></h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent &#123;</span><br><span class="line">  constructor(router: Router) &#123;</span><br><span class="line">    const <span class="keyword">state</span> = router.routerState;</span><br><span class="line">    const id: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.firstChild(<span class="keyword">state</span>.root).params.map(p =&gt; p.id);</span><br><span class="line">    const isDebug: Observable<span class="variable">&lt;string&gt;</span> = <span class="keyword">state</span>.queryParams.map(q =&gt; q.<span class="keyword">debug</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-路由状态快照RouterStateSnapshot"><a href="#9-路由状态快照RouterStateSnapshot" class="headerlink" title="9. 路由状态快照RouterStateSnapshot"></a>9. 路由状态快照<a href="https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html" target="_blank" rel="external">RouterStateSnapshot</a></h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(router: Router)</span> <span class="comment">&#123;</span><br><span class="line">  const snapshot = router.routerState.snapshot;</span><br><span class="line">&#125;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="10-路径树-UrlTree"><a href="#10-路径树-UrlTree" class="headerlink" title="10. 路径树 UrlTree"></a>10. 路径树 <a href="https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html" target="_blank" rel="external">UrlTree</a></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">UrlTree</span> &#123;</span><br><span class="line">root : UrlSegment</span><br><span class="line">queryParams : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</span><br><span class="line">fragment : <span class="function"><span class="keyword">string</span></span><br><span class="line"><span class="title">toString</span>(<span class="params"></span>) : <span class="keyword">string</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h2><h3 id="1-默认路径初始化-DefaultUrlSerializer"><a href="#1-默认路径初始化-DefaultUrlSerializer" class="headerlink" title="1. 默认路径初始化 DefaultUrlSerializer"></a>1. 默认路径初始化 <a href="https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html" target="_blank" rel="external">DefaultUrlSerializer</a></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class DefaultUrlSerializer &#123;</span><br><span class="line"><span class="function"><span class="title">parse</span><span class="params">(url: string)</span></span> : UrlTree</span><br><span class="line"><span class="function"><span class="title">serialize</span><span class="params">(tree: UrlTree)</span></span> : string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-取消导航NavigationCancel"><a href="#2-取消导航NavigationCancel" class="headerlink" title="2. 取消导航NavigationCancel"></a>2. 取消导航<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html" target="_blank" rel="external">NavigationCancel</a></h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(id: number, url: <span class="keyword">string</span>)</span></span><br><span class="line"><span class="title">id</span> :</span> number</span><br><span class="line">url : <span class="keyword">string</span></span><br><span class="line">toString() : <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-结束导航-NavigationEnd"><a href="#3-结束导航-NavigationEnd" class="headerlink" title="3. 结束导航 NavigationEnd"></a>3. 结束导航 <a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html" target="_blank" rel="external">NavigationEnd</a></h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">class</span> NavigationEnd &#123;</span><br><span class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, urlAfterRedirects: <span class="built_in">string</span>)</span><br><span class="line"><span class="built_in">id</span> : <span class="built_in">number</span></span><br><span class="line">url : <span class="built_in">string</span></span><br><span class="line">urlAfterRedirects : <span class="built_in">string</span></span><br><span class="line">toString() : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-导航错误NavigationError"><a href="#4-导航错误NavigationError" class="headerlink" title="4. 导航错误NavigationError"></a>4. 导航错误<a href="https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html" target="_blank" rel="external">NavigationError</a></h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">class</span> NavigationError &#123;</span><br><span class="line">constructor(<span class="built_in">id</span>: <span class="built_in">number</span>, url: <span class="built_in">string</span>, <span class="keyword">error</span>: any)</span><br><span class="line"><span class="built_in">id</span> : <span class="built_in">number</span></span><br><span class="line">url : <span class="built_in">string</span></span><br><span class="line"><span class="keyword">error</span> : any</span><br><span class="line">toString() : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-根路由-RootRouter"><a href="#5-根路由-RootRouter" class="headerlink" title="5. 根路由 RootRouter"></a>5. 根路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html" target="_blank" rel="external">RootRouter</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootRouter</span> &#123;</span></span><br><span class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">location:</span> Location, <span class="string">primaryComponent:</span> Type)</span><br><span class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">dispose() : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-路由数据-RouteData"><a href="#6-路由数据-RouteData" class="headerlink" title="6. 路由数据 RouteData"></a>6. 路由数据 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html" target="_blank" rel="external">RouteData</a></h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RouteData &#123;</span><br><span class="line">constructor(data?: &#123;[<span class="built_in">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;)</span><br><span class="line">data : &#123;[<span class="built_in">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span><br><span class="line"><span class="built_in">get</span>(<span class="built_in">key</span>: <span class="built_in">string</span>) : <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-路由参数-RouteParams"><a href="#7-路由参数-RouteParams" class="headerlink" title="7. 路由参数 RouteParams"></a>7. 路由参数 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html" target="_blank" rel="external">RouteParams</a></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">RouteParams</span> &#123;</span><br><span class="line">constructor(<span class="keyword">params</span>: &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;)</span><br><span class="line"><span class="keyword">params</span> : &#123;[key: <span class="keyword">string</span>]: <span class="keyword">string</span>&#125;</span><br><span class="line"><span class="keyword">get</span>(param: <span class="keyword">string</span>) : <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-注册路由-RouteRegistry"><a href="#8-注册路由-RouteRegistry" class="headerlink" title="8. 注册路由 RouteRegistry"></a>8. 注册路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html" target="_blank" rel="external">RouteRegistry</a></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class RouteRegistry &#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span><span class="params">(_rootComponent: Type)</span></span></span><br><span class="line"><span class="function"><span class="title">config</span><span class="params">(parentComponent: any, config: RouteDefinition)</span></span> : void</span><br><span class="line"><span class="function"><span class="title">configFromComponent</span><span class="params">(component: any)</span></span> : void</span><br><span class="line"><span class="function"><span class="title">recognize</span><span class="params">(url: string, ancestorInstructions: Instruction[])</span></span> : Promise&lt;Instruction&gt;</span><br><span class="line"><span class="function"><span class="title">generate</span><span class="params">(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any)</span></span> : Instruction</span><br><span class="line"><span class="function"><span class="title">hasRoute</span><span class="params">(name: string, parentComponent: any)</span></span> : boolean</span><br><span class="line"><span class="function"><span class="title">generateDefault</span><span class="params">(componentCursor: Type)</span></span> : Instruction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-路由-Router"><a href="#9-路由-Router" class="headerlink" title="9. 路由 Router"></a>9. 路由 <a href="https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html" target="_blank" rel="external">Router</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> &#123;</span></span><br><span class="line">constructor(<span class="string">registry:</span> RouteRegistry, <span class="string">parent:</span> Router, <span class="string">hostComponent:</span> any, root?: Router)</span><br><span class="line"><span class="string">navigating :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">lastNavigationAttempt :</span> string</span><br><span class="line"><span class="string">currentInstruction :</span> Instruction</span><br><span class="line"><span class="string">registry :</span> RouteRegistry</span><br><span class="line"><span class="string">parent :</span> Router</span><br><span class="line"><span class="string">hostComponent :</span> any</span><br><span class="line"><span class="string">root :</span> Router</span><br><span class="line">childRouter(<span class="string">hostComponent:</span> any) : Router</span><br><span class="line">auxRouter(<span class="string">hostComponent:</span> any) : Router</span><br><span class="line">registerPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class="line">unregisterPrimaryOutlet(<span class="string">outlet:</span> RouterOutlet) : <span class="keyword">void</span></span><br><span class="line">registerAuxOutlet(<span class="string">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class="line">isRouteActive(<span class="string">instruction:</span> Instruction) : <span class="keyword">boolean</span></span><br><span class="line">config(<span class="string">definitions:</span> RouteDefinition[]) : Promise&lt;any&gt;</span><br><span class="line">navigate(<span class="string">linkParams:</span> any[]) : Promise&lt;any&gt;</span><br><span class="line">navigateByUrl(<span class="string">url:</span> string, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">navigateByInstruction(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">commit(<span class="string">instruction:</span> Instruction, _skipLocationChange?: <span class="keyword">boolean</span>) : Promise&lt;any&gt;</span><br><span class="line">subscribe(<span class="string">onNext:</span> (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>, onError?: (<span class="string">value:</span> any) =&gt; <span class="keyword">void</span>) : Object</span><br><span class="line">deactivate(<span class="string">instruction:</span> Instruction) : Promise&lt;any&gt;</span><br><span class="line">recognize(<span class="string">url:</span> string) : Promise&lt;Instruction&gt;</span><br><span class="line">renavigate() : Promise&lt;any&gt;</span><br><span class="line">generate(<span class="string">linkParams:</span> any[]) : Instruction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、-指令"><a href="#四、-指令" class="headerlink" title="四、 指令"></a>四、 指令</h2><h3 id="1-RouterLink"><a href="#1-RouterLink" class="headerlink" title="1. RouterLink"></a>1. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html" target="_blank" rel="external">RouterLink</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLink</span> &#123;</span></span><br><span class="line"><span class="string">commands :</span> any[]</span><br><span class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</span><br><span class="line"><span class="string">fragment :</span> string</span><br><span class="line"><span class="string">urlTree :</span> UrlTree</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">route :</span> ActivatedRoute</span><br><span class="line"><span class="string">locationStrategy :</span> LocationStrategy</span><br><span class="line">routerLink</span><br><span class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-RouterLinkActive"><a href="#2-RouterLinkActive" class="headerlink" title="2. RouterLinkActive"></a>2. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html" target="_blank" rel="external">RouterLinkActive</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkActive</span> &#123;</span></span><br><span class="line"><span class="string">links :</span> QueryList&lt;RouterLink&gt;</span><br><span class="line"><span class="string">linksWithHrefs :</span> QueryList&lt;RouterLinkWithHref&gt;</span><br><span class="line"><span class="string">classes :</span> string[]</span><br><span class="line"><span class="string">subscription :</span> Subscription</span><br><span class="line"><span class="string">routerLinkActiveOptions :</span> &#123;<span class="string">exact:</span> <span class="keyword">boolean</span>&#125;</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">element :</span> ElementRef</span><br><span class="line"><span class="string">renderer :</span> Renderer</span><br><span class="line">ngAfterContentInit() : <span class="keyword">void</span></span><br><span class="line">routerLinkActive</span><br><span class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</span><br><span class="line">ngOnDestroy() : any</span><br><span class="line">update() : <span class="keyword">void</span></span><br><span class="line">reduceList(<span class="string">currentUrlTree:</span> UrlTree, <span class="string">q:</span> QueryList&lt;any&gt;) : <span class="keyword">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-RouterLinkWithHref"><a href="#3-RouterLinkWithHref" class="headerlink" title="3. RouterLinkWithHref"></a>3. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html" target="_blank" rel="external">RouterLinkWithHref</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLinkWithHref</span> &#123;</span></span><br><span class="line"><span class="string">target :</span> string</span><br><span class="line"><span class="string">commands :</span> any[]</span><br><span class="line"><span class="string">queryParams :</span> &#123;[<span class="string">k:</span> string]: any&#125;</span><br><span class="line"><span class="string">fragment :</span> string</span><br><span class="line"><span class="string">href :</span> string</span><br><span class="line"><span class="string">urlTree :</span> UrlTree</span><br><span class="line"><span class="string">router :</span> Router</span><br><span class="line"><span class="string">route :</span> ActivatedRoute</span><br><span class="line"><span class="string">locationStrategy :</span> LocationStrategy</span><br><span class="line">routerLink</span><br><span class="line">ngOnChanges(<span class="string">changes:</span> &#123;&#125;) : any</span><br><span class="line">onClick(<span class="string">button:</span> number, <span class="string">ctrlKey:</span> <span class="keyword">boolean</span>, <span class="string">metaKey:</span> <span class="keyword">boolean</span>) : <span class="keyword">boolean</span></span><br><span class="line">updateTargetUrlAndHref() : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-RouterOutlet"><a href="#4-RouterOutlet" class="headerlink" title="4. RouterOutlet"></a>4. <a href="https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html" target="_blank" rel="external">RouterOutlet</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterOutlet</span> &#123;</span></span><br><span class="line"><span class="string">activated :</span> ComponentRef&lt;any&gt;</span><br><span class="line"><span class="string">outletMap :</span> RouterOutletMap</span><br><span class="line"><span class="string">location :</span> ViewContainerRef</span><br><span class="line"><span class="string">componentFactoryResolver :</span> ComponentFactoryResolver</span><br><span class="line"><span class="string">isActivated :</span> <span class="keyword">boolean</span></span><br><span class="line"><span class="string">component :</span> Object</span><br><span class="line"><span class="string">activatedRoute :</span> ActivatedRoute</span><br><span class="line">deactivate() : <span class="keyword">void</span></span><br><span class="line">activate(<span class="string">activatedRoute:</span> ActivatedRoute, <span class="string">providers:</span> ResolvedReflectiveProvider[], <span class="string">outletMap:</span> RouterOutletMap) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ionic2环境搭建]]></title>
      <url>http://blog.xiaomo.info/2016/07/28/ionic2_environment/</url>
      <content type="html"><![CDATA[<p>angular2的开发，少了移动端一定是不完整的。ionic2,用angular2开发移动平台。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/ionic2.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-环境搭建"><a href="#一、-环境搭建" class="headerlink" title="一、 环境搭建"></a>一、 环境搭建</h2><h3 id="1-全局安装ionic"><a href="#1-全局安装ionic" class="headerlink" title="1. 全局安装ionic"></a>1. 全局安装ionic</h3><p><code>npm install -g ionic@beta</code></p>
<h3 id="2-创建一个项目"><a href="#2-创建一个项目" class="headerlink" title="2. 创建一个项目"></a>2. 创建一个项目</h3><p><code>ionic start app --v2</code></p>
<h3 id="3-输出环境"><a href="#3-输出环境" class="headerlink" title="3. 输出环境"></a>3. 输出环境</h3><p><code>npm install -g cordova</code></p>
<h3 id="4-IOS构建"><a href="#4-IOS构建" class="headerlink" title="4. IOS构建"></a>4. IOS构建</h3><p><code>ionic platform add ios</code><br><code>ionic emulate ios</code></p>
<h3 id="5-android构建"><a href="#5-android构建" class="headerlink" title="5. android构建"></a>5. android构建</h3><p>接下来，你需要安装Android的SDK。而Android SDK允许您构建编译运行Android的目标设备。尽管Android SDK自带的模拟器，Genymotion建议，因为它的速度更快。一旦安装完毕，开始一个Android的形象和运行：<br><code>ionic platform add android</code><br><code>ionic run android</code></p>
<h3 id="6-本地调试"><a href="#6-本地调试" class="headerlink" title="6. 本地调试"></a>6. 本地调试</h3><p><code>ionic serve</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2 api整理之通用模块]]></title>
      <url>http://blog.xiaomo.info/2016/07/21/angular2_api_common/</url>
      <content type="html"><![CDATA[<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h1 id="一、通用包"><a href="#一、通用包" class="headerlink" title="一、通用包"></a>一、通用包</h1><h2 id="1-常量类"><a href="#1-常量类" class="headerlink" title="1. 常量类"></a>1. 常量类</h2><h3 id="1-1-根路径-APP-BASE-HREF"><a href="#1-1-根路径-APP-BASE-HREF" class="headerlink" title="1.1 根路径 APP_BASE_HREF"></a>1.1 根路径 <a href="https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html" target="_blank" rel="external">APP_BASE_HREF</a></h3><p>主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppCmp, [</span><br><span class="line">  ROUTER_PROVIDERS,</span><br><span class="line">  &#123;<span class="string">provide:</span> APP_BASE_HREF, <span class="string">useValue:</span> <span class="string">'/my/app'</span>&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h3 id="1-2-指令常量-COMMON-DIRECTIVES"><a href="#1-2-指令常量-COMMON-DIRECTIVES" class="headerlink" title="1.2 指令常量 COMMON_DIRECTIVES"></a>1.2 指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html" target="_blank" rel="external">COMMON_DIRECTIVES</a></h3><p>主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。<br>CORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。<br>单个引入</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm&#125; from</span><br><span class="line"><span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="meta">@Component(&#123;</span><br><span class="line">  selector: <span class="meta-string">'my-component'</span>,</span><br><span class="line">  templateUrl: <span class="meta-string">'myComponent.html'</span>,</span><br><span class="line">  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,</span><br><span class="line">OtherDirective]</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>使用常量引入</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;COMMON_DIRECTIVES&#125; from <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="meta">@Component(&#123;</span><br><span class="line">  selector: <span class="meta-string">'my-component'</span>,</span><br><span class="line">  templateUrl: <span class="meta-string">'myComponent.html'</span>,</span><br><span class="line">  directives: [COMMON_DIRECTIVES, OtherDirective]</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-管道常量-COMMON-PIPES"><a href="#1-3-管道常量-COMMON-PIPES" class="headerlink" title="1.3 管道常量 COMMON_PIPES"></a>1.3 管道常量 <a href="https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html" target="_blank" rel="external">COMMON_PIPES</a></h3><p>目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等</p>
<h3 id="1-4-表单指令常量-FORM-DIRECTIVES"><a href="#1-4-表单指令常量-FORM-DIRECTIVES" class="headerlink" title="1.4 表单指令常量 FORM_DIRECTIVES"></a>1.4 表单指令常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html" target="_blank" rel="external">FORM_DIRECTIVES</a></h3><p>试验阶段。所有有关表常的指令礼盒</p>
<h3 id="1-5-表单提供者常量-FORM-PROVIDERS"><a href="#1-5-表单提供者常量-FORM-PROVIDERS" class="headerlink" title="1.5 表单提供者常量 FORM_PROVIDERS"></a>1.5 表单提供者常量 <a href="https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html" target="_blank" rel="external">FORM_PROVIDERS</a></h3><p>在bootsrap的时候注入进去</p>
<h3 id="1-6-异步验证常量-NG-ASYNC-VALIDATORS"><a href="#1-6-异步验证常量-NG-ASYNC-VALIDATORS" class="headerlink" title="1.6 异步验证常量 NG_ASYNC_VALIDATORS"></a>1.6 异步验证常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html" target="_blank" rel="external">NG_ASYNC_VALIDATORS</a></h3><p>为了控制一个表单的异步验证，要在验证中添加  <code>multi: true</code>,当然也少不了<code>NG_VALIDATORS</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(MyApp, [&#123;<span class="string">provide:</span> NG_VALIDATORS, <span class="string">useValue:</span> myValidator, <span class="string">multi:</span> <span class="literal">true</span>&#125;]);</span><br></pre></td></tr></table></figure>
<h3 id="1-7-值存储器常量-NG-VALUE-ACCESSOR"><a href="#1-7-值存储器常量-NG-VALUE-ACCESSOR" class="headerlink" title="1.7 值存储器常量 NG_VALUE_ACCESSOR"></a>1.7 值存储器常量 <a href="https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html" target="_blank" rel="external">NG_VALUE_ACCESSOR</a></h3><p>具体作用和使用方法不明确</p>
<h2 id="2、-接口"><a href="#2、-接口" class="headerlink" title="2、 接口"></a>2、 接口</h2><h3 id="2-1-控制值存储器ControlValueAccessor"><a href="#2-1-控制值存储器ControlValueAccessor" class="headerlink" title="2.1 控制值存储器ControlValueAccessor"></a>2.1 控制值存储器<a href="https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html" target="_blank" rel="external">ControlValueAccessor</a></h3><p>具体作用和使用方法不明确</p>
<h3 id="2-2-表单-Form"><a href="#2-2-表单-Form" class="headerlink" title="2.2 表单 Form"></a>2.2 表单 <a href="https://angular.cn/docs/js/latest/api/common/index/Form-interface.html" target="_blank" rel="external">Form</a></h3><p> NgFormModel 和 NgForm实现在这个接口，只在form模块使用</p>
<h3 id="2-3-路径变化事件-UrlChangeEvent"><a href="#2-3-路径变化事件-UrlChangeEvent" class="headerlink" title="2.3 路径变化事件 UrlChangeEvent"></a>2.3 路径变化事件 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html" target="_blank" rel="external">UrlChangeEvent</a></h3><p>当监听到URL变化的时候触发此事件</p>
<h3 id="2-4-路径变化监听器-UrlChangeListener"><a href="#2-4-路径变化监听器-UrlChangeListener" class="headerlink" title="2.4 路径变化监听器 UrlChangeListener"></a>2.4 路径变化监听器 <a href="https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html" target="_blank" rel="external">UrlChangeListener</a></h3><p>监听URL的变化</p>
<h3 id="2-5-验证Validator"><a href="#2-5-验证Validator" class="headerlink" title="2.5 验证Validator"></a>2.5 验证<a href="https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html" target="_blank" rel="external">Validator</a></h3><p>在写验证指令的时候实现这个接口</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Directive</span>(&#123;</span><br><span class="line">  <span class="attribute">selector</span>: <span class="string">'[custom-validator]'</span>,</span><br><span class="line">  <span class="attribute">providers</span>: [&#123;<span class="attribute">provide</span>: NG_VALIDATORS, <span class="attribute">useExisting</span>: CustomValidatorDirective, <span class="attribute">multi</span>: true&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">class CustomValidatorDirective implements Validator &#123;</span><br><span class="line">  <span class="selector-tag">validate</span>(<span class="attribute">c</span>: Control): &#123;<span class="selector-attr">[key: string]</span>: <span class="selector-tag">any</span>&#125; &#123;</span><br><span class="line">    <span class="selector-tag">return</span> &#123;"custom": <span class="selector-tag">true</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h2><h3 id="3-1-抽象控制-AbstractControl"><a href="#3-1-抽象控制-AbstractControl" class="headerlink" title="3.1 抽象控制 AbstractControl"></a>3.1 抽象控制 <a href="https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html" target="_blank" rel="external">AbstractControl</a></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rxjs全接触]]></title>
      <url>http://blog.xiaomo.info/2016/07/12/javascript_rxjs_study_1/</url>
      <content type="html"><![CDATA[<p>RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——<a href="http://reactivex.io/rxjs/manual/overview.html#observable" target="_blank" rel="external">Observable</a>（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、rxjs内容"><a href="#一、rxjs内容" class="headerlink" title="一、rxjs内容"></a>一、rxjs内容</h2><p>ReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。</p>
<p>在RxJS其中解决异步事件管理的基本概念是：</p>
<h3 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1. Observable"></a>1. Observable</h3><p>可观察对象，代表未来值或事件的可调用集合的想法.<br>observer是一个由回调函数组成的对象，键名分别为<code>next</code>、<code>error</code> 和 <code>complete</code>，以此接受Observable推送的不同类型的通知。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var observer = &#123;</span><br><span class="line">  next: x =&gt; <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">  error: err =&gt; <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：<code>observable.subscribe(observer);</code></p>
<h3 id="2-Observer"><a href="#2-Observer" class="headerlink" title="2. Observer"></a>2. Observer</h3><p>观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值</p>
<h3 id="3-Subscription"><a href="#3-Subscription" class="headerlink" title="3. Subscription"></a>3. Subscription</h3><p>Subscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。</p>
<h3 id="4-Operators"><a href="#4-Operators" class="headerlink" title="4. Operators"></a>4. Operators</h3><p>操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等</p>
<h3 id="5-Subject"><a href="#5-Subject" class="headerlink" title="5. Subject"></a>5. Subject</h3><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。<br>每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。<br>每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>
<h3 id="6-Schedulers"><a href="#6-Schedulers" class="headerlink" title="6. Schedulers"></a>6. Schedulers</h3><p>调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。</p>
<h3 id="7、推和拉"><a href="#7、推和拉" class="headerlink" title="7、推和拉"></a>7、推和拉</h3><p>拉和推是两个不同的协议如何数据生产者可以与数据消费者。</p>
<p>拉<br>数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。<br>每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。</p>
<p>推<br>在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。<br>在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。</p>
<h2 id="二、相关api"><a href="#二、相关api" class="headerlink" title="二、相关api"></a>二、相关api</h2><h3 id="1-scan"><a href="#1-scan" class="headerlink" title="1. scan()"></a>1. scan()</h3><p>使用RxJS您隔离的状态。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">button </span>= document . querySelector ( <span class="string">'button'</span> )<span class="comment">;</span></span><br><span class="line">Rx . Observable . fromEvent ( <span class="keyword">button </span>,  <span class="string">'click'</span> )</span><br><span class="line">  . <span class="keyword">scan </span>( <span class="built_in">count</span> =&gt; <span class="built_in">count</span> +  <span class="number">1</span> ,  <span class="number">0</span> )</span><br><span class="line">  . <span class="keyword">subscribe </span>( <span class="built_in">count</span> =&gt; console . log ( <span class="string">'Clicked &#123;$ count&#125;次'</span> ））<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-subscribe"><a href="#2-subscribe" class="headerlink" title="2. subscribe()"></a>2. subscribe()</h3><p>异步函数，可以使用一个回调</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var button = <span class="built_in">document</span> . querySelector ( <span class="string">'button'</span> );</span><br><span class="line">Rx . Observable . fromEvent ( button ,  <span class="string">'click'</span> )</span><br><span class="line">  . subscribe (<span class="function"><span class="params">()</span>  =&gt;</span> <span class="built_in">console</span> . log ( <span class="string">'Clicked!'</span> ));</span><br></pre></td></tr></table></figure>
<h3 id="3-throttle"><a href="#3-throttle" class="headerlink" title="3. throttle()"></a>3. throttle()</h3><h3 id="4-map"><a href="#4-map" class="headerlink" title="4. map()"></a>4. map()</h3><p>每秒最多点击次数</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">button </span>= document . querySelector ( <span class="string">'button'</span> )<span class="comment">;</span></span><br><span class="line">Rx . Observable . fromEvent ( <span class="keyword">button </span>,  <span class="string">'click'</span> )</span><br><span class="line">  . throttle ( <span class="number">1000</span> )</span><br><span class="line">  . map ( event  =&gt;  event . clientX )</span><br><span class="line">  . <span class="keyword">scan </span>(( <span class="built_in">count</span> , clientX )  =&gt; <span class="built_in">count</span> + clientX ,  <span class="number">0</span> )</span><br><span class="line">  . <span class="keyword">subscribe </span>( <span class="built_in">count</span> =&gt; console . log ( <span class="built_in">count</span> ))<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="三、具体使用"><a href="#三、具体使用" class="headerlink" title="三、具体使用"></a>三、具体使用</h2><h3 id="1-Observable-1"><a href="#1-Observable-1" class="headerlink" title="1. Observable"></a>1. Observable</h3><p>我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var observable =  Rx . Observable . create ( <span class="function"><span class="keyword">function</span>  <span class="params">( observer )</span></span>  &#123;</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">1</span> );</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">2</span> );</span><br><span class="line">  observer . <span class="built_in">next</span> ( <span class="number">3</span> );</span><br><span class="line">  setTimeout (()  =&gt;  &#123;</span><br><span class="line">    observer . <span class="built_in">next</span> ( <span class="number">4</span> );</span><br><span class="line">    observer . complete ();</span><br><span class="line">  &#125;,  <span class="number">1000</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="2-subscribe-1"><a href="#2-subscribe-1" class="headerlink" title="2.subscribe"></a>2.subscribe</h3><p>为了能够看到这些值，我们需要订阅(subscribe)它。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'just before subscribe'</span>);</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  next: x =&gt; <span class="built_in">console</span>.log(<span class="string">'got value '</span> + x),</span><br><span class="line">  error: err =&gt; <span class="built_in">console</span>.error(<span class="string">'something wrong occurred: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just after subscribe'</span>);</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">just <span class="keyword">before</span> subscribe</span><br><span class="line">got <span class="built_in">value</span> <span class="number">1</span></span><br><span class="line">got <span class="built_in">value</span> <span class="number">2</span></span><br><span class="line">got <span class="built_in">value</span> <span class="number">3</span></span><br><span class="line">just <span class="keyword">after</span> subscribe</span><br><span class="line">got <span class="built_in">value</span> <span class="number">4</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。</p>
<h3 id="3、amb方法"><a href="#3、amb方法" class="headerlink" title="3、amb方法"></a>3、amb方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.amb(...args)]</code><br><code>作用</code><br>从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。<br><code>参数</code><br>args (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。<br><code>返回值</code><br>(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。<br><code>总结</code><br>简单的说，<code>amb()</code>像一个多路电闸，一次仅能构建一条通路：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">A B C D E F G H</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">     \</span><br><span class="line">      \   开关臂</span><br><span class="line">       \   </span><br><span class="line">       |<span class="string"></span><br><span class="line">      主线</span><br><span class="line">       </span>|</span><br></pre></td></tr></table></figure>
<p>实例</p>
<p>HTML<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;body&gt;</span></span><br><span class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input1"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</span><br><span class="line">  &lt;<span class="built_in">input</span> id=<span class="string">"input2"</span> <span class="built_in">type</span>=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<p>JS<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取元素</span></span><br><span class="line"><span class="built_in">var</span> input1 = $(<span class="string">'#input1'</span>);</span><br><span class="line"><span class="built_in">var</span> input2 = $(<span class="string">'#input2'</span>);</span><br><span class="line"><span class="comment">// 定义事件流</span></span><br><span class="line"><span class="built_in">var</span> event1 = <span class="literal">Rx</span>.Observable.fromEvent(input1, <span class="string">'click'</span>).<span class="built_in">map</span>(()=&gt;<span class="string">'one'</span>)</span><br><span class="line"><span class="built_in">var</span> event2 = <span class="literal">Rx</span>.Observable.fromEvent(input2, <span class="string">'click'</span>).<span class="built_in">map</span>(()=&gt;<span class="string">'two'</span>);</span><br><span class="line"><span class="comment">//传入事件流</span></span><br><span class="line"><span class="built_in">var</span> source = <span class="literal">Rx</span>.Observable.amb(event1,event2);</span><br></pre></td></tr></table></figure></p>
<p>上面例子中<br><code>amb()</code>中传入了两个点击事件流。<br>事件流1，会在点击后发射字符串one；<br>事件流2，会在点击后发射字符串two；<br>初始情况下，产生事件流1之后，事件流2不会再被输出；<br>反之亦然，我们可以订阅<code>amb()</code>产生的结果流：<a href="http://jsbin.com/pitayi/edit?html,js,console,output" target="_blank" rel="external">amb()操作符演示</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = source.subscribe(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err);   </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Completed'</span>);   </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>使用场景 1：秒杀</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.amb(</span><br><span class="line">    用户A的拍下请求,</span><br><span class="line">    用户B的拍下请求,</span><br><span class="line">    用户C的拍下请求,</span><br><span class="line">    ...</span><br><span class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>&#123;</span><br><span class="line">    执行购买逻辑，创建订单，打开支付工具</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用场景 1：通话</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.amb(</span><br><span class="line">    A来电,</span><br><span class="line">    B来电,</span><br><span class="line">    C来电,</span><br><span class="line">    ...</span><br><span class="line">).subscribe(<span class="function"><span class="keyword">function</span><span class="params">(call)</span> </span>&#123;</span><br><span class="line">    通话</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-case方法"><a href="#4-case方法" class="headerlink" title="4. case方法"></a>4. case方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.case(selector, sources, [elseSource|scheduler])]</code></p>
<p><code>作用</code><br>选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。</p>
<p><code>参数</code><br><code>selector (Function)</code>: 返回键的字符串的函数，键用以与sources中的键名进行比较。<br><code>sources (Object)</code>: 一个包含可观察对象的Javascript对象。<br><code>[elseSource|scheduler] (Observable | Scheduler)</code>:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的<code>Rx.Observabe.empty</code> 对象。</p>
<p><code>返回值</code><br>(Observable): 返回值为经过选择后的Observable（可观察对象）。</p>
<p><code>实例</code></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> sources = &#123;</span><br><span class="line">  hello: <span class="literal">Rx</span>.Observable.just(<span class="string">'clx'</span>),</span><br><span class="line">  world: <span class="literal">Rx</span>.Observable.just(<span class="string">'wxq'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">var</span> subscription = <span class="literal">Rx</span>.Observable.<span class="keyword">case</span>(()=&gt;<span class="string">"hello"</span>, sources, <span class="literal">Rx</span>.Observable.empty())</span><br><span class="line"></span><br><span class="line">subscription.subscribe(function(x) &#123;</span><br><span class="line">  console.<span class="keyword">log</span>(x)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>实例中，匿名函数()=&gt;”hello”指定需要在sources中返回的可观察对象的键名为”hello”，命令行最终输出”clx”，<a href="https://jsbin.com/kodije/edit?js,console,output" target="_blank" rel="external">点击进入case()实例</a>。</p>
<p>适用场景<br>针对表单进行校验，校验用户的<code>手机号</code>和<code>邮箱</code>是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validate = &#123;</span><br><span class="line">    <span class="string">"mobile"</span>: Observable.<span class="keyword">return</span>(<span class="string">'123-566-789-01'</span>),</span><br><span class="line">    <span class="string">"email"</span>: Observable.<span class="keyword">return</span>(<span class="string">'JonSnow@company.com'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> emptyObserable = Observable.<span class="keyword">empty</span>();</span><br><span class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'mobile'</span>, validate, <span class="keyword">empty</span>)</span><br><span class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(mobile)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 验证手机号码是否重复</span></span><br><span class="line">    &#125;)</span><br><span class="line">validate.<span class="keyword">case</span>(()=&gt;<span class="string">'email'</span>, validate, <span class="keyword">empty</span>)</span><br><span class="line">    .subscribe(<span class="function"><span class="keyword">function</span><span class="params">(email)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 验证用户邮箱是否重复</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-catch-方法"><a href="#4-catch-方法" class="headerlink" title="4. catch()方法"></a>4. catch()方法</h3><p><code>方法定义</code><br>Rx.Observable.catch(…args)</p>
<p><code>作用</code><br>序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。</p>
<p><code>参数</code><br>args (Array | arguments): 可观察对象序列。</p>
<p><code>返回值</code><br>(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。</p>
<p>实例</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> obs1 = <span class="literal">Rx</span>.Observable.throw(<span class="literal">new</span> Error(<span class="string">'error'</span>));</span><br><span class="line"><span class="built_in">var</span> obs2 = <span class="literal">Rx</span>.Observable.<span class="keyword">return</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> source = <span class="literal">Rx</span>.Observable.catch(obs1, obs2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> subscription = source.subscribe(</span><br><span class="line">  x =&gt; console.<span class="keyword">log</span>(<span class="string">`onNext: $&#123;x&#125;`</span>),</span><br><span class="line">  e =&gt; console.<span class="keyword">log</span>(<span class="string">`onError: $&#123;e&#125;`</span>),</span><br><span class="line">  () =&gt; console.<span class="keyword">log</span>(<span class="string">'onCompleted'</span>));</span><br></pre></td></tr></table></figure>
<p>手机验证码实例<br>这样，用户能够收到验证码并成功验证的几率大大增加。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var service1 = Observable.create(<span class="string">"服务提供商#1"</span>);</span><br><span class="line">var service2 = Observable.create(<span class="string">"服务提供商#1"</span>);</span><br><span class="line"></span><br><span class="line">Observable.<span class="keyword">catch</span>(service1, service2).subscribe(&#123;</span><br><span class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'succeed'</span>),</span><br><span class="line">    <span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'所有验证服务均不可用'</span>)</span><br><span class="line">    ()=&gt;<span class="built_in">console</span>.log(<span class="string">'completed'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="5-combineLatest方法"><a href="#5-combineLatest方法" class="headerlink" title="5. combineLatest方法"></a>5. combineLatest方法</h3><p><code>方法定义</code><br>Rx.Observable.combineLatest(…args, [resultSelector])</p>
<p><code>作用</code><br>通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。</p>
<p><code>参数</code><br><code>args (arguments | Array)</code>: 一系列可观察对象或可观察对象的数组。<br><code>[resultSelector] (Function)</code>: 在所有可观察对象都发射值后调用的处理函数。</p>
<p><code>返回值</code><br>(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。</p>
<p>实例</p>
<figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"紫色"</span>,<span class="string">"黄色"</span>,<span class="string">"蓝色"</span>,<span class="string">"黑色"</span>];</span><br><span class="line"><span class="keyword">var</span> shapes = [<span class="string">"小星星"</span>,<span class="string">"圆形"</span>,<span class="string">"三角形"</span>,<span class="string">"正方形"</span>,<span class="string">"心形"</span>,<span class="string">"五边形"</span>];</span><br><span class="line"><span class="keyword">var</span> source1 = Rx.<span class="keyword">Observable</span>.interval(<span class="number">3000</span>)</span><br><span class="line">  .<span class="keyword">map</span>(()=&gt;colors.pop());</span><br><span class="line"><span class="keyword">var</span> source2 = Rx.<span class="keyword">Observable</span>.interval(<span class="number">2000</span>)</span><br><span class="line">  .<span class="keyword">map</span>(()=&gt;shapes.pop());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combined = Rx.<span class="keyword">Observable</span>.combineLatest(source1, source2, <span class="keyword">function</span>(x, y)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="string">"的"</span> + y;</span><br><span class="line">&#125;).take(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">combined.subscribe((shaped)=&gt;console.log(shaped));</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript设计模式]]></title>
      <url>http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/</url>
      <content type="html"><![CDATA[<p>设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/javascript.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、设计原则"><a href="#一、设计原则" class="headerlink" title="一、设计原则"></a>一、设计原则</h2><h3 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h3><p>对扩展开发，对修改关闭。</p>
<h3 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.  里氏替换原则"></a>2.  里氏替换原则</h3><p>子类继承父类，但单独调用完全可以运行。</p>
<h3 id="3-依赖倒转原则"><a href="#3-依赖倒转原则" class="headerlink" title="3. 依赖倒转原则"></a>3. 依赖倒转原则</h3><p>引用一个对象，如果这个对象有低层类型，直接引用低层。</p>
<h3 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h3><p>每一个接口应该是一种角色。</p>
<h3 id="5-合成-聚合复用原则"><a href="#5-合成-聚合复用原则" class="headerlink" title="5. 合成/聚合复用原则"></a>5. 合成/聚合复用原则</h3><p>新的对象应使用一些己有的对象，使之成为新对象的一部分。</p>
<h3 id="6-迪米特原则"><a href="#6-迪米特原则" class="headerlink" title="6. 迪米特原则"></a>6. 迪米特原则</h3><p>一个对象在对其他对象尽可能少的了解。</p>
<h2 id="二、-设计模式"><a href="#二、-设计模式" class="headerlink" title="二、 设计模式"></a>二、 设计模式</h2><h3 id="1-原型模式"><a href="#1-原型模式" class="headerlink" title="1. 原型模式"></a>1. 原型模式</h3><p>概念：和javascript的prototype不同<br>prototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆</p>
<p>作用：<br>原型对象本身就是有效的利用了每个构造器创建的对象</p>
<p>注意事项：<br>注意深拷贝和浅拷贝，以免出现引用问题。</p>
<p>代码实战和总结：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line">  <span class="keyword">var</span> myObj = &#123;</span><br><span class="line">    str:<span class="string">'myStr'</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    myArr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    myObj:&#123;</span><br><span class="line">      innerObj:&#123;</span><br><span class="line">        test:<span class="number">25</span></span><br><span class="line">      &#125;,</span><br><span class="line">      innerStr:<span class="string">'innerStr'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝对象的方法（浅拷贝）会影响原型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        ret[k]= obj[k];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//深拷贝  使用Object.create</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  result.prototype = <span class="built_in">Object</span>.create(myObj);</span><br><span class="line">  <span class="keyword">var</span> _result = <span class="keyword">new</span> result();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行</span></span><br><span class="line">  <span class="keyword">var</span> result = clone(myObj);</span><br><span class="line">  result.myObj.innerStr = <span class="string">'outStr'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p>Object.create(prototype,optionalDescriptorObjects)</p>
<h3 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2. 策略模式"></a>2. 策略模式</h3><p>概念：<br>策略模式定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）</p>
<p>作用：<br>所有的这些算法都是做相同的事情，只是实现不同。<br>以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。<br>单独定义了算法类，也方便单元测试。</p>
<p>注意事项：<br>不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式</p>
<p>代码实战和总结</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//普通的验证</span></span><br><span class="line">  <span class="keyword">var</span> $input = $(<span class="string">'input'</span>).val();</span><br><span class="line">  <span class="keyword">var</span> val = &#123;</span><br><span class="line">    isEmpty:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</span><br><span class="line">      <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">    isTel:<span class="function"><span class="keyword">function</span><span class="params">(argument)</span></span>&#123;</span><br><span class="line">      <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ise = val.isEmpty($input);</span><br><span class="line">  <span class="keyword">var</span> isTel = val.isTel($input)</span><br><span class="line">  <span class="keyword">if</span>(ise &amp;&amp; isTel)&#123;</span><br><span class="line">    alert(<span class="string">'ok'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到$fn.val上   典型的策略模式验证</span></span><br><span class="line">  $input(&#123;</span><br><span class="line">    isEmpty:<span class="keyword">false</span>,</span><br><span class="line">    isTel:<span class="keyword">True</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="3-组合模式"><a href="#3-组合模式" class="headerlink" title="3. 组合模式"></a>3. 组合模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结：</p>
<h3 id="4-外观模式"><a href="#4-外观模式" class="headerlink" title="4. 外观模式"></a>4. 外观模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="5-迭代器模式"><a href="#5-迭代器模式" class="headerlink" title="5. 迭代器模式"></a>5. 迭代器模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6. 命令模式"></a>6. 命令模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="7-代理模式"><a href="#7-代理模式" class="headerlink" title="7. 代理模式"></a>7. 代理模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="9-责任链模式"><a href="#9-责任链模式" class="headerlink" title="9. 责任链模式"></a>9. 责任链模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="10-工厂模式"><a href="#10-工厂模式" class="headerlink" title="10. 工厂模式"></a>10. 工厂模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="11-单例模式"><a href="#11-单例模式" class="headerlink" title="11. 单例模式"></a>11. 单例模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="12-观察者模式"><a href="#12-观察者模式" class="headerlink" title="12. 观察者模式"></a>12. 观察者模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="13-中介者模式"><a href="#13-中介者模式" class="headerlink" title="13. 中介者模式"></a>13. 中介者模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="14-装饰者模式"><a href="#14-装饰者模式" class="headerlink" title="14. 装饰者模式"></a>14. 装饰者模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="15-建造者模式"><a href="#15-建造者模式" class="headerlink" title="15. 建造者模式"></a>15. 建造者模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
<h3 id="16-构造函数模式"><a href="#16-构造函数模式" class="headerlink" title="16. 构造函数模式"></a>16. 构造函数模式</h3><p>概念：</p>
<p>作用：</p>
<p>注意事项：</p>
<p>代码实战和总结</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年学习计划]]></title>
      <url>http://blog.xiaomo.info/2016/07/01/2016_study_plan/</url>
      <content type="html"><![CDATA[<p>2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/2016.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h2><h3 id="1-atom"><a href="#1-atom" class="headerlink" title="1. atom"></a>1. atom</h3><p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</p>
<h3 id="2-idea"><a href="#2-idea" class="headerlink" title="2. idea"></a>2. idea</h3><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p>
<h3 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3. webpack"></a>3. webpack</h3><p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>
<h3 id="4-gulp"><a href="#4-gulp" class="headerlink" title="4. gulp"></a>4. gulp</h3><p>Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目…</p>
<h3 id="5-lodash"><a href="#5-lodash" class="headerlink" title="5. lodash"></a>5. lodash</h3><p>lodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。</p>
<h3 id="6-fetch"><a href="#6-fetch" class="headerlink" title="6. fetch"></a>6. fetch</h3><p>对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。</p>
<h3 id="7-Electron"><a href="#7-Electron" class="headerlink" title="7. Electron"></a>7. Electron</h3><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p>
<h2 id="二、javascript框架"><a href="#二、javascript框架" class="headerlink" title="二、javascript框架"></a>二、javascript框架</h2><h3 id="1-angular2"><a href="#1-angular2" class="headerlink" title="1. angular2"></a>1. angular2</h3><h4 id="跨平台开发"><a href="#跨平台开发" class="headerlink" title="跨平台开发"></a>跨平台开发</h4><p>学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。</p>
<h4 id="速度与性能"><a href="#速度与性能" class="headerlink" title="速度与性能"></a>速度与性能</h4><p>通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。<br>Angular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。</p>
<h4 id="美妙的工具"><a href="#美妙的工具" class="headerlink" title="美妙的工具"></a>美妙的工具</h4><p>使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。</p>
<h3 id="2-react-redux"><a href="#2-react-redux" class="headerlink" title="2. react+redux"></a>2. react+redux</h3><p>React+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。</p>
<h3 id="3-jquery"><a href="#3-jquery" class="headerlink" title="3. jquery"></a>3. jquery</h3><p>JQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。</p>
<h3 id="4-antd"><a href="#4-antd" class="headerlink" title="4. antd"></a>4. antd</h3><p>Ant Design 是蚂蚁金服开发和正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现。企业级金融产品的交互语言和视觉体系。丰富实用的 React UI 组件。基于 React 的组件化开发模式。背靠 npm 生态圈。基于 webpack 的调试构建方案，支持 ES6。</p>
<h2 id="三、node相关技术"><a href="#三、node相关技术" class="headerlink" title="三、node相关技术"></a>三、node相关技术</h2><h3 id="1-npm"><a href="#1-npm" class="headerlink" title="1. npm"></a>1. npm</h3><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>
<h3 id="2-express"><a href="#2-express" class="headerlink" title="2. express"></a>2. express</h3><p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>
<h3 id="3-koa2"><a href="#3-koa2" class="headerlink" title="3. koa2"></a>3. koa2</h3><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>
<h3 id="4-rxjs"><a href="#4-rxjs" class="headerlink" title="4. rxjs"></a>4. rxjs</h3><p>是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。</p>
<h3 id="5-zonejs"><a href="#5-zonejs" class="headerlink" title="5. zonejs"></a>5. zonejs</h3><p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p>
<h2 id="四、设计模式"><a href="#四、设计模式" class="headerlink" title="四、设计模式"></a>四、设计模式</h2><h3 id="1-javascript设计模式"><a href="#1-javascript设计模式" class="headerlink" title="1. javascript设计模式"></a>1. <a href="http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/">javascript设计模式</a></h3><h2 id="五、编程语言"><a href="#五、编程语言" class="headerlink" title="五、编程语言"></a>五、编程语言</h2><h3 id="1-javascript"><a href="#1-javascript" class="headerlink" title="1. javascript"></a>1. javascript</h3><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>
<h3 id="2-ecmscript6"><a href="#2-ecmscript6" class="headerlink" title="2. ecmscript6"></a>2. ecmscript6</h3><p>ES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p>
<h3 id="3-typesript"><a href="#3-typesript" class="headerlink" title="3. typesript"></a>3. typesript</h3><p>typescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p>
<h2 id="六、数据存储"><a href="#六、数据存储" class="headerlink" title="六、数据存储"></a>六、数据存储</h2><h3 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1. mysql"></a>1. mysql</h3><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>
<h3 id="2-mongodb"><a href="#2-mongodb" class="headerlink" title="2. mongodb"></a>2. mongodb</h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<h3 id="3-redis"><a href="#3-redis" class="headerlink" title="3. redis"></a>3. redis</h3><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<h3 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4. cookie"></a>4. cookie</h3><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</p>
<h3 id="5-access-token"><a href="#5-access-token" class="headerlink" title="5. access token"></a>5. access token</h3><p>Windows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。</p>
<h2 id="七、html5-css3"><a href="#七、html5-css3" class="headerlink" title="七、html5+css3"></a>七、html5+css3</h2><h3 id="1-html5"><a href="#1-html5" class="headerlink" title="1. html5"></a>1. html5</h3><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。<br>HTML5的设计目的是为了在移动设备上支持多媒体。<br>HTML5 简单易学。</p>
<h3 id="2-ejs"><a href="#2-ejs" class="headerlink" title="2. ejs"></a>2. ejs</h3><p>EJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。引入EJS 创建一个模板 使用视图工具组件 与最初的JavaScript相比较，一些不太了解你的代码的人可以更容易地通过EJS模板代码看得懂你的代码。 让我们放松一下，一起来享受下令人激动的干净简洁的感觉。</p>
<h3 id="3-canvas"><a href="#3-canvas" class="headerlink" title="3. canvas"></a>3. canvas</h3><p>TML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</canvas></canvas></p>
<h3 id="4-css3"><a href="#4-css3" class="headerlink" title="4. css3"></a>4. css3</h3><p>CSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。</p>
<h3 id="5-sass"><a href="#5-sass" class="headerlink" title="5. sass"></a>5. sass</h3><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>
<h3 id="6-postcss"><a href="#6-postcss" class="headerlink" title="6. postcss"></a>6. postcss</h3><p>PostCSS 是使用 JS 插件来转换 CSS 的工具，支持变量，混入，未来 CSS 语法，内联图像等等。<br>PostCSS 已经被许多大公司使用：谷歌，推特，阿里巴巴和 Shopify。 Autoprefixer PostCSS 插件是最流行的 CSS 处理器插件之一。</p>
<h3 id="7-白鹭引擎"><a href="#7-白鹭引擎" class="headerlink" title="7. 白鹭引擎"></a>7. 白鹭引擎</h3><p>白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。</p>
<h2 id="八、算法和数据结构"><a href="#八、算法和数据结构" class="headerlink" title="八、算法和数据结构"></a>八、算法和数据结构</h2><h3 id="1-线型查找"><a href="#1-线型查找" class="headerlink" title="1. 线型查找"></a>1. 线型查找</h3><p>在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。</p>
<h3 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h3><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>
<h3 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h3><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<h3 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>
<h3 id="5-插入排序"><a href="#5-插入排序" class="headerlink" title="5. 插入排序"></a>5. 插入排序</h3><p>插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
<h3 id="6-字符串反转"><a href="#6-字符串反转" class="headerlink" title="6. 字符串反转"></a>6. 字符串反转</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">'123'</span>;</span><br><span class="line">var newStr = <span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>);</span><br><span class="line">alert(newStr);</span><br></pre></td></tr></table></figure>
<h3 id="7-搜索算法"><a href="#7-搜索算法" class="headerlink" title="7. 搜索算法"></a>7. 搜索算法</h3><p>搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。</p>
<h3 id="8-贪心算法"><a href="#8-贪心算法" class="headerlink" title="8. 贪心算法"></a>8. 贪心算法</h3><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p>
<h3 id="9-tween算法"><a href="#9-tween算法" class="headerlink" title="9. tween算法"></a>9. tween算法</h3><p>Flash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。</p>
<h3 id="10-javascript算法库"><a href="#10-javascript算法库" class="headerlink" title="10. javascript算法库"></a>10. javascript算法库</h3><ul>
<li><a href="https://github.com/sjkaliski/numbers.js/" target="_blank" rel="external">numbers.js</a></li>
<li><a href="http://www.numericjs.com/" target="_blank" rel="external">Numeric Javascript </a></li>
<li><a href="http://worrydream.com/Tangle/" target="_blank" rel="external">Tangle</a></li>
<li><a href="http://josscrowcroft.github.io/accounting.js/" target="_blank" rel="external">accounting.js</a><h2 id="九、测试框架"><a href="#九、测试框架" class="headerlink" title="九、测试框架"></a>九、测试框架</h2><h3 id="1-mocha"><a href="#1-mocha" class="headerlink" title="1. mocha"></a>1. mocha</h3>mocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。<h3 id="2-karma"><a href="#2-karma" class="headerlink" title="2. karma"></a>2. karma</h3>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。<h3 id="3-jasmine"><a href="#3-jasmine" class="headerlink" title="3. jasmine"></a>3. jasmine</h3>Jasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。<h3 id="4-chai"><a href="#4-chai" class="headerlink" title="4. chai"></a>4. chai</h3>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<h3 id="5-Qunit"><a href="#5-Qunit" class="headerlink" title="5.Qunit"></a>5.Qunit</h3>该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子<h3 id="6-should-js"><a href="#6-should-js" class="headerlink" title="6. should.js:"></a>6. should.js:</h3>TJ的另外一个开源贡献<h3 id="7-expect-js"><a href="#7-expect-js" class="headerlink" title="7. expect.js"></a>7. expect.js</h3>BDD风格的另外一个断言库，基于should.js,是mini版的BDD库<h3 id="8-assert"><a href="#8-assert" class="headerlink" title="8. assert"></a>8. assert</h3>node自带核心模块: 可以在node中使用的断言模块</li>
</ul>
<h2 id="十、重构"><a href="#十、重构" class="headerlink" title="十、重构"></a>十、<a href="http://www.raychase.net/138" target="_blank" rel="external">重构</a></h2><h3 id="1-命名"><a href="#1-命名" class="headerlink" title="1. 命名"></a>1. 命名</h3><p> 模块划分和命名空间</p>
<h3 id="2-加载"><a href="#2-加载" class="headerlink" title="2. 加载"></a>2. 加载</h3><p>js的动态加载</p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>Javascript的测试</p>
<h3 id="4-编码"><a href="#4-编码" class="headerlink" title="4. 编码"></a>4. 编码</h3><p> Javascript编码规则</p>
<h3 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5. 闭包"></a>5. 闭包</h3><p> 利用原型/闭包开发组件</p>
<h3 id="6-继承"><a href="#6-继承" class="headerlink" title="6. 继承"></a>6. 继承</h3><p> 利用继承来做事</p>
<h3 id="7-重用"><a href="#7-重用" class="headerlink" title="7. 重用"></a>7. 重用</h3><p> 重用老代码</p>
<h3 id="8-检测"><a href="#8-检测" class="headerlink" title="8. 检测"></a>8. 检测</h3><p> JSDoc和JSLint</p>
<h3 id="9-框架"><a href="#9-框架" class="headerlink" title="9.  框架"></a>9.  框架</h3><p>自定义JavaScript产品框架</p>
<h3 id="10-强化"><a href="#10-强化" class="headerlink" title="10.  强化"></a>10.  强化</h3><p>强化对象封装和模块封装</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之动画效果]]></title>
      <url>http://blog.xiaomo.info/2016/06/30/angular2_study_animate/</url>
      <content type="html"><![CDATA[<p>动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、在两个状态间转场"><a href="#一、在两个状态间转场" class="headerlink" title="一、在两个状态间转场"></a>一、在两个状态间转场</h2><h3 id="1-构建一个动画"><a href="#1-构建一个动画" class="headerlink" title="1. 构建一个动画"></a>1. 构建一个动画</h3><p>它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 <code>@Component</code> 元数据中。在添加动画之前，先引入一些与动画有关的函数</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Component,</span><br><span class="line">  Input,</span><br><span class="line">  trigger,</span><br><span class="line">  state,</span><br><span class="line">  style,</span><br><span class="line">  transition,</span><br><span class="line">  animate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line">//通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。</span><br><span class="line"><span class="keyword">import</span> &#123; Heroes &#125; <span class="keyword">from</span> <span class="string">'./hero.service'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  <span class="name">moduleId</span>: <span class="built_in">module</span>.id,</span><br><span class="line">  <span class="name">selector</span>: <span class="string">'hero-list-basic'</span>,</span><br><span class="line">  <span class="name">template</span>: `</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li *ngFor=<span class="string">"let hero of heroes"</span></span><br><span class="line">          @heroState=<span class="string">"hero.state"</span></span><br><span class="line">          (click)=<span class="string">"hero.toggleState()"</span>&gt;</span><br><span class="line">        &#123;&#123;hero.name&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="name">styleUrls</span>: [<span class="string">'hero-list.component.css'</span>],</span><br><span class="line">  <span class="name">animations</span>: [</span><br><span class="line">    trigger(<span class="string">'heroState'</span>, [</span><br><span class="line">      state(<span class="string">'inactive'</span>, style(&#123;</span><br><span class="line">        <span class="name">backgroundColor</span>: <span class="string">'#eee'</span>,</span><br><span class="line">        <span class="name">transform</span>: <span class="string">'scale(1)'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      state(<span class="string">'active'</span>,   style(&#123;</span><br><span class="line">        <span class="name">backgroundColor</span>: <span class="string">'#cfd8dc'</span>,</span><br><span class="line">        <span class="name">transform</span>: <span class="string">'scale(1.1)'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      transition(<span class="string">'inactive =&gt; active'</span>, animate(<span class="string">'100ms ease-in'</span>)),</span><br><span class="line">      transition(<span class="string">'active =&gt; inactive'</span>, animate(<span class="string">'100ms ease-out'</span>))</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListBasicComponent</span> &#123;</span></span><br><span class="line">  @Input() <span class="name">heroes</span>: Heroes;</span><br><span class="line">&#125;</span><br><span class="line">//我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之路由]]></title>
      <url>http://blog.xiaomo.info/2016/06/29/angular2_study_forms/</url>
      <content type="html"><![CDATA[<p>既然要做spa，那么router当然是必不可少的。angular1的内置router坑坏了不少人，但是自始自终没有更新路由。好在angular2在路由上做的比较完备，不用再使用第三方router。是不是一大福音呢？<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、笔记整理中"><a href="#一、笔记整理中" class="headerlink" title="一、笔记整理中"></a>一、笔记整理中</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之表单和验证]]></title>
      <url>http://blog.xiaomo.info/2016/06/28/angular2_study_forms/</url>
      <content type="html"><![CDATA[<p>目前学习的版本是rc2,然而form相关的接口全部废弃掉使用新的了，google就是这么会折腾。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、效果图"><a href="#一、效果图" class="headerlink" title="一、效果图"></a>一、效果图</h2><p><img src="http://static.xiaomo.info/images/ValidateForm.gif" alt=""></p>
<h2 id="二、代码解析"><a href="#二、代码解析" class="headerlink" title="二、代码解析"></a>二、代码解析</h2><h3 id="1-ValidateForm-ts"><a href="#1-ValidateForm-ts" class="headerlink" title="1. ValidateForm.ts"></a>1. <a href="">ValidateForm.ts</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">"@angular/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Hero&#125; from <span class="string">"./../../model/HeroModel"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&#123;</span><br><span class="line">    selector: <span class="meta-string">'validate-form'</span>,</span><br><span class="line">    template: require(<span class="meta-string">'./ValidateForm.html'</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">ValidateFormComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">//准备数据</span></span><br><span class="line">    powers = [<span class="string">'Really Smart'</span>, <span class="string">'Super Flexible'</span>,</span><br><span class="line">        <span class="string">'Super Hot'</span>, <span class="string">'Weather Changer'</span>];</span><br><span class="line">    model = new Hero(<span class="number">18</span>, <span class="string">'Dr IQ'</span>, <span class="keyword">this</span>.powers[<span class="number">0</span>], <span class="string">'Chuck Overstreet'</span>);</span><br><span class="line">    <span class="comment">//默认是未提交状态(作用是在模板中会根据是否提交的状态显示不同的视图)</span></span><br><span class="line">    submitted = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交之后将提交状态改为true</span></span><br><span class="line">    onSubmit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.submitted = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是活跃状态，显示提交后的表单(也就是填充了数据的表单)</span></span><br><span class="line">    active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建新英雄(清空表单并将填充了数据的表单隐藏)</span></span><br><span class="line">    newHero() &#123;</span><br><span class="line">        <span class="keyword">this</span>.model = new Hero(<span class="number">42</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">this</span>.active = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(() =&gt; <span class="keyword">this</span>.active = <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之服务和http]]></title>
      <url>http://blog.xiaomo.info/2016/06/27/angular2_study_service_http/</url>
      <content type="html"><![CDATA[<p>现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h2><h3 id="1-展现出来的效果"><a href="#1-展现出来的效果" class="headerlink" title="1. 展现出来的效果"></a>1. 展现出来的效果</h3><p><img src="http://static.xiaomo.info/images/httpService.png" alt=""></p>
<h3 id="2-mysql的数据"><a href="#2-mysql的数据" class="headerlink" title="2. mysql的数据"></a>2. mysql的数据</h3><p><img src="http://static.xiaomo.info/images/mysql.png" alt=""></p>
<h2 id="二、代码实例"><a href="#二、代码实例" class="headerlink" title="二、代码实例"></a>二、代码实例</h2><h3 id="1-服务-service"><a href="#1-服务-service" class="headerlink" title="1. 服务 service"></a>1. 服务 <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/service/UserService.ts" target="_blank" rel="external">service</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125;from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api from <span class="string">'./../api/Api'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Rx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable()</span></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">data</span>:any;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="keyword">public</span> http:Http) &#123;</span><br><span class="line">        <span class="keyword">this</span>.http = http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    findAll():Observable&lt;any&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.<span class="keyword">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-组件-HttpService"><a href="#2-组件-HttpService" class="headerlink" title="2.组件 HttpService"></a>2.组件 <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts" target="_blank" rel="external">HttpService</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component,OnInit&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./../../service/UserService'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'http-service'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./HttpService.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./HttpService.html'</span>),</span><br><span class="line">    providers: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServiceComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    admins:<span class="built_in">Object</span>;</span><br><span class="line">    data:<span class="built_in">Object</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(public userService:UserService) &#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ngOnInit():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService.findAll().subscribe((data:any) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.admins = data.adminUsers.content;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'in component : '</span>,<span class="keyword">this</span>.admins);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' HttpServiceComponent ngOnInit :'</span>, <span class="string">'enter'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-模板-HttpService-html"><a href="#3-模板-HttpService-html" class="headerlink" title="3. 模板 HttpService.html"></a>3. 模板 <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html" target="_blank" rel="external">HttpService.html</a></h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of admins;let i = index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;i+1&#125;&#125;</span><span class="xml">.</span><span class="template-variable">&#123;&#123;item.userName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之小技巧]]></title>
      <url>http://blog.xiaomo.info/2016/06/26/angular2_study_note_other/</url>
      <content type="html"><![CDATA[<p>在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="1-组件"><a href="#1-组件" class="headerlink" title="1. 组件"></a>1. 组件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Component(&#123;</span><br><span class="line"> selector: <span class="meta-string">'reddit-article'</span>,</span><br><span class="line"> inputs: [<span class="meta-string">'article'</span>],</span><br><span class="line"> template:require(<span class="meta-string">'reddit-article.html'</span>)</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleComponent</span> </span>&#123;</span><br><span class="line"> article: Article;</span><br><span class="line"></span><br><span class="line"> voteUp(): boolean &#123;</span><br><span class="line"> <span class="keyword">this</span>.article.voteUp();</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteDown(): boolean &#123;</span><br><span class="line"> <span class="keyword">this</span>.article.voteDown();</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-模型"><a href="#2-模型" class="headerlink" title="2. 模型"></a>2. 模型</h3><p>类似javabean，可以把api封装在模型中</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"> title: string;</span><br><span class="line"> link: string;</span><br><span class="line"> votes: number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(title: string, link: string, votes?: number) &#123;</span><br><span class="line"> <span class="keyword">this</span>.title = title;</span><br><span class="line"> <span class="keyword">this</span>.link = link;</span><br><span class="line"> <span class="keyword">this</span>.votes = votes || <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteUp(): void &#123;</span><br><span class="line"> <span class="keyword">this</span>.votes += <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> voteDown(): void &#123;</span><br><span class="line"> <span class="keyword">this</span>.votes -= <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> sortedArticles(): Article[] &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.articles.sort((a: Article, b: Article) =&gt; b.votes - a.votes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>使用排序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ui grid posts"</span>&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">reddit-article</span></span><br><span class="line"> *<span class="attr">ngFor</span>=<span class="string">"let article of sortedArticles()"</span></span><br><span class="line"> [<span class="attr">article</span>]=<span class="string">"article"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">reddit-article</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span></span></span></span><br></pre></td></tr></table></figure>
<h3 id="3-模板"><a href="#3-模板" class="headerlink" title="3.模板"></a>3.模板</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"four wide column center aligned votes"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">div</span> class=<span class="string">"ui statistic"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">div</span> class=<span class="string">"value"</span>&gt;</span><br><span class="line"> &#123;&#123; <span class="selector-tag">article</span><span class="selector-class">.votes</span> &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">writing your First Angular <span class="number">2</span> Web Application</span><br><span class="line"> &lt;<span class="selector-tag">div</span> class=<span class="string">"label"</span>&gt;</span><br><span class="line"> Points</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;<span class="selector-tag">div</span> class=<span class="string">"twelve wide column"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">a</span> class=<span class="string">"ui large header"</span> href=<span class="string">"&#123;&#123; article.link &#125;&#125;"</span>&gt;</span><br><span class="line"> &#123;&#123; <span class="selector-tag">article</span><span class="selector-class">.title</span> &#125;&#125;</span><br><span class="line"> &lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;<span class="selector-tag">ul</span> class=<span class="string">"ui big horizontal list voters"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">li</span> class=<span class="string">"item"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">a</span> href (click)=<span class="string">"voteUp()"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">i</span> class=<span class="string">"arrow up icon"</span>&gt;&lt;/i&gt;</span><br><span class="line"> upvote</span><br><span class="line"> &lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> &lt;<span class="selector-tag">li</span> class=<span class="string">"item"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">a</span> href (click)=<span class="string">"voteDown()"</span>&gt;</span><br><span class="line"> &lt;<span class="selector-tag">i</span> class=<span class="string">"arrow down icon"</span>&gt;&lt;/i&gt;</span><br><span class="line"> downvote</span><br><span class="line"> &lt;/a&gt;</span><br><span class="line"> &lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4-服务"><a href="#4-服务" class="headerlink" title="4. 服务"></a>4. 服务</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Injectable&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125;from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api from <span class="string">'./../api/Api'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; from <span class="string">'rxjs/Rx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable()</span></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="keyword">public</span> http:Http) &#123;</span><br><span class="line">        <span class="keyword">this</span>.http = http;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    findAll():Observable&lt;any&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.<span class="keyword">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-管道"><a href="#5-管道" class="headerlink" title="5. 管道"></a>5. 管道</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; name: <span class="string">'trim'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TrimPipe</span> <span class="keyword">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  transform(value, args) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.trim();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一、-防止页面刷新"><a href="#一、-防止页面刷新" class="headerlink" title="一、 防止页面刷新"></a>一、 防止页面刷新</h2><p>如果想阻止页面刷新,在方法的返回值为false。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">voteUp(): boolean &#123;</span><br><span class="line">  <span class="keyword">this</span>.article.votes += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">voteDown(): boolean &#123;</span><br><span class="line">  <span class="keyword">this</span>.article.votes -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、-不让ng进行解析"><a href="#二、-不让ng进行解析" class="headerlink" title="二、 不让ng进行解析"></a>二、 不让ng进行解析</h2><p><code>ngNonBindable</code></p>
<p>告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bordered"</span>&gt;</span></span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pre"</span> <span class="attr">ngNonBindable</span>&gt;</span></span><br><span class="line"> &amp;larr; This is what </span><span class="template-variable">&#123;&#123; content &#125;&#125;</span><span class="xml"> rendered</span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="三、-预处理"><a href="#三、-预处理" class="headerlink" title="三、 预处理"></a>三、 预处理</h2><p>在没有编译之前进行处理</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Component</span>(&#123;</span><br><span class="line">  <span class="attribute">selector</span>: <span class="string">'hello'</span>,</span><br><span class="line"> <span class="attribute">host</span>: &#123;</span><br><span class="line"> <span class="attribute">class</span>: <span class="string">'row'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>具体表现为 <code>&lt;hello class=&quot;row&quot;&gt;</code></p>
<h2 id="四-组件传参"><a href="#四-组件传参" class="headerlink" title="四. 组件传参"></a>四. 组件传参</h2><h3 id="1-组件-1"><a href="#1-组件-1" class="headerlink" title="1. 组件"></a>1. 组件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&#123;</span><br><span class="line"> selector: <span class="meta-string">'reddit-article'</span>,</span><br><span class="line"> inputs: [<span class="meta-string">'article'</span>],</span><br><span class="line"> &#125;)</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ArticleComponent</span> </span>&#123;</span><br><span class="line"> article: Article;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">reddit-article</span> [<span class="attr">article</span>]=<span class="string">"article1"</span>&gt;</span><span class="tag">&lt;/<span class="name">reddit-article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以在Component中得到</p>
<h2 id="五-输出-自定义事件"><a href="#五-输出-自定义事件" class="headerlink" title="五. 输出(自定义事件)"></a>五. 输出(自定义事件)</h2><p>在class中 定义一个 <code>@Output</code>(EventEmitter)然后在构造函数中实例化<br>在class中 定义一个 <code>@Intput</code> 输入</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&#123;</span><br><span class="line"> selector: <span class="meta-string">'single-component'</span>,</span><br><span class="line">  inputs:[<span class="meta-string">'titles'</span>]</span><br><span class="line"> outputs: [<span class="meta-string">'putRingOnIt'</span>],</span><br><span class="line"> template: `</span><br><span class="line"> &lt;button (click)</span>=<span class="string">"liked()"</span>&gt;Like it?&lt;/button&gt;</span><br><span class="line"> `</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 自定义一个事件</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SingleComponent</span> </span>&#123;</span><br><span class="line"> putRingOnIt: EventEmitter&lt;string&gt;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line"> <span class="keyword">this</span>.putRingOnIt = new EventEmitter();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> liked(): void &#123;</span><br><span class="line"> <span class="keyword">this</span>.putRingOnIt.emit(<span class="string">"oh oh oh"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>[] 输入 inputs  参数<br>() 输出 outputs 事件</p>
<h2 id="六、-打印日志"><a href="#六、-打印日志" class="headerlink" title="六、 打印日志"></a>六、 打印日志</h2><p>可以使用 <code>${value}</code>来替换参数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">addArticle</span>(<span class="attribute">title</span>: HTMLInputElement, <span class="attribute">link</span>: HTMLInputElement): <span class="selector-tag">void</span> &#123;</span><br><span class="line"> <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="built_in">`Adding article title: $&#123;title.value&#125; and link: $&#123;link.value&#125;`</span>\</span><br><span class="line"> );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="七、双向绑定"><a href="#七、双向绑定" class="headerlink" title="七、双向绑定"></a>七、双向绑定</h2><h3 id="1-模型到视图"><a href="#1-模型到视图" class="headerlink" title="1. 模型到视图"></a>1. 模型到视图</h3><p>[]  例如 [style.color]</p>
<h3 id="2-视图到模型"><a href="#2-视图到模型" class="headerlink" title="2. 视图到模型"></a>2. 视图到模型</h3><p>()  例如 (click)</p>
<h3 id="3-双向绑定"><a href="#3-双向绑定" class="headerlink" title="3. 双向绑定"></a>3. 双向绑定</h3><p>[()] 例如 [(ngModel)]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之ng2标签]]></title>
      <url>http://blog.xiaomo.info/2016/06/25/angular2_study_note_ng-tag/</url>
      <content type="html"><![CDATA[<p>angular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h2><p><img src="http://static.xiaomo.info/images/ngTag.png" alt=""></p>
<h2 id="一、指令解读"><a href="#一、指令解读" class="headerlink" title="一、指令解读"></a>一、<a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag" target="_blank" rel="external">指令解读</a></h2><h3 id="0-组件"><a href="#0-组件" class="headerlink" title="0. 组件"></a>0. <a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts" target="_blank" rel="external">组件</a></h3><p>主要就是定义了一些数据用于测试</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'ng-tag'</span>,</span><br><span class="line">    styles: [<span class="built_in">require</span>(<span class="string">'./NgTag.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'NgTag.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NgTagComponent &#123;</span><br><span class="line">    list:<span class="built_in">any</span>;</span><br><span class="line">    ngSwitchList:<span class="built_in">any</span>;</span><br><span class="line">    ngStyleList:<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.list = [&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaomo'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaogang'</span></span><br><span class="line"></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'xiaomoxue'</span></span><br><span class="line">            &#125;];</span><br><span class="line">        <span class="keyword">this</span>.ngSwitchList=[</span><br><span class="line">            <span class="string">'xiaomo'</span>,</span><br><span class="line">            <span class="string">'xiaoming'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">this</span>.ngStyleList=&#123;</span><br><span class="line">            <span class="string">'color'</span>:<span class="string">'blue'</span>,</span><br><span class="line">            <span class="string">'backgroundColor'</span>:<span class="string">'green'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-ngFor"><a href="#1-ngFor" class="headerlink" title="1. ngFor"></a>1. <a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="external">ngFor</a></h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://static.xiaomo.info/images/ngFor.png" alt=""></p>
<h3 id="2-ngIf"><a href="#2-ngIf" class="headerlink" title="2. ngIf"></a>2. <a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="external">ngIf</a></h3><p>我在组件中定义了一个list</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.list = [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaomo'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaogang'</span></span><br><span class="line"></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaomoxue'</span></span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>我在循环这个数组对象的时候去比对item.name 如果是 <code>xiaomo</code>,就 出现 ngIf中的内容</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngIf</span>=<span class="string">"item.name=='xiaomo'"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>哇,我在list列表中找到了 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://static.xiaomo.info/images/ngIf.png" alt=""></p>
<h3 id="3-ngSwitch"><a href="#3-ngSwitch" class="headerlink" title="3. ngSwitch"></a>3. <a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="external">ngSwitch</a></h3><p>我在组件中定义了一个方法，可以设置选中的值给myVal</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myVal:number = <span class="number">0</span>;</span><br><span class="line">changeValue($<span class="keyword">event</span>):<span class="keyword">void</span>&#123;</span><br><span class="line">    console.log($<span class="keyword">event</span>.target.<span class="keyword">value</span>);<span class="comment">// 输出选中的值设给myVal</span></span><br><span class="line">    <span class="keyword">this</span>.myVal = $<span class="keyword">event</span>.target.<span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一组单选按钮，选中是<code>myVal</code>会改变，<code>ngSwitch</code>会去循环每个<code>case</code>,如果找到了就显示那条<code>case</code>中的数据，不然显示<code>default</code>中的数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ngSwitch<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"1"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>1</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"2"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>2</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"3"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>3</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"4"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>4</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"myVal"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"5"</span> (<span class="attr">click</span>)=<span class="string">"changeValue($event)"</span>&gt;</span>5</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> [<span class="attr">ngSwitch</span>]=<span class="string">"myVal"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'1'"</span>&gt;</span>ONE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'2'"</span>&gt;</span>TWO<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'3'"</span>&gt;</span>THREE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'4'"</span>&gt;</span>FOUR<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'5'"</span>&gt;</span>FIVE<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>other<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://static.xiaomo.info/images/NgSwitch.gif" alt=""></p>
<h3 id="4-ngStyle"><a href="#4-ngStyle" class="headerlink" title="4. ngStyle"></a>4. <a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="external">ngStyle</a></h3><p>这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是<code>ngClass</code></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"</span></span></span><span class="template-variable">&#123;'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> [<span class="attr">style.font-size</span>]=<span class="string">"30"</span>&gt;</span></span><br><span class="line">      背景 :</span><span class="template-variable">&#123;&#123;ngStyleList.backgroundColor&#125;</span><span class="xml">&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      字体颜色: </span><span class="template-variable">&#123;&#123;ngStyleList.color&#125;</span><span class="xml">&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://static.xiaomo.info/images/ngStyle.png" alt=""></p>
<h3 id="5-ngClass"><a href="#5-ngClass" class="headerlink" title="5. ngClass"></a>5. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html" target="_blank" rel="external">ngClass</a></h3><p>左边是class名[要用<code>‘’</code>包起来]，右边是一个true|false表达式或者是一个方法</p>
<p>在组件中定义了一个fn() 返回封装好的样式</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ngStyleList=&#123;</span><br><span class="line">     <span class="string">'color'</span>:<span class="string">'blue'</span>,</span><br><span class="line">     <span class="string">'backgroundColor'</span>:<span class="string">'green'</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">    classes:any=&#123;&#125;;</span><br><span class="line">    fn():any &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.classes =  &#123;</span><br><span class="line">            <span class="string">'btn-primary'</span>:<span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> [<span class="attr">ngClass</span>]=<span class="string">"</span></span></span><span class="template-variable">&#123;'btn-danger': ngStyleList&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> [<span class="attr">ngClass</span>]=<span class="string">"fn()"</span>&gt;</span>fn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://static.xiaomo.info/images/ngClass.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之事件和多组件]]></title>
      <url>http://blog.xiaomo.info/2016/06/24/angular2_study_note_ng-tag/</url>
      <content type="html"><![CDATA[<p>组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-点击事件"><a href="#一、-点击事件" class="headerlink" title="一、 点击事件"></a>一、 点击事件</h2><p><img src="http://static.xiaomo.info/images/ClickEvent.gif" alt=""></p>
<p><a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/clickEvent" target="_blank" rel="external">代码解读</a></p>
<h3 id="1-ClickEvent-ts"><a href="#1-ClickEvent-ts" class="headerlink" title="1. ClickEvent.ts"></a>1. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts" target="_blank" rel="external">ClickEvent.ts</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BasicComponent&#125; <span class="keyword">from</span> <span class="string">'./../basic/Basic'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector:<span class="string">'click-event'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./ClickEvent.scss'</span>)],</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./ClickEvent.html'</span>),</span><br><span class="line">    directives:[BasicComponent] <span class="comment">//需要引用的组件</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickEventComponent</span></span>&#123;</span><br><span class="line">    showMsg():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'己经触发点击事件'</span>);</span><br><span class="line">        alert(<span class="string">'己经触发点击事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-ClickEvent-html"><a href="#2-ClickEvent-html" class="headerlink" title="2. ClickEvent.html"></a>2. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html" target="_blank" rel="external">ClickEvent.html</a></h3><p>basic 就是引用的另一个组件,这个组件源自于上一篇博客<a href="http://blog.xiaomo.info/2016/06/22/angular2_study_note_component/">基本组件</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">basic</span>&gt;</span><span class="tag">&lt;/<span class="name">basic</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> (<span class="attr">click</span>)=<span class="string">"showMsg()"</span>&gt;</span>点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="二、键盘按下事件"><a href="#二、键盘按下事件" class="headerlink" title="二、键盘按下事件"></a>二、键盘按下事件</h2><p><img src="http://static.xiaomo.info/images/ClickEvent.gif" alt=""></p>
<h3 id="1-KeyupEvent-ts"><a href="#1-KeyupEvent-ts" class="headerlink" title="1. KeyupEvent.ts"></a>1. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts" target="_blank" rel="external">KeyupEvent.ts</a></h3><p>初始化一个<code>values</code>为空字符串，然后当用户按下键盘的时候把值拼给<code>values</code>，并且以<code>|</code>隔开</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector:<span class="string">'keyup-event'</span>,</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./KeyupEvent.html'</span>),</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./KeyupEvent.scss'</span>)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyupEventComponent</span> &#123;</span></span><br><span class="line">    values:string = <span class="string">''</span>;</span><br><span class="line">    onKey(value:any):<span class="literal">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.values += value + <span class="string">' | '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-KeyupEvent-html"><a href="#2-KeyupEvent-html" class="headerlink" title="2. KeyupEvent.html"></a>2. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html" target="_blank" rel="external">KeyupEvent.html</a></h3><p>当键盘按下的时候调用<code>onKey</code>方法</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> #<span class="attr">box</span> (<span class="attr">keyup</span>)=<span class="string">"onKey(box.value)"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;values&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="三、-enter事件和失焦事件"><a href="#三、-enter事件和失焦事件" class="headerlink" title="三、 enter事件和失焦事件"></a>三、 enter事件和失焦事件</h2><p><img src="http://static.xiaomo.info/images/ClickEvent.gif" alt=""></p>
<h3 id="1-EnterBlurEvent-ts"><a href="#1-EnterBlurEvent-ts" class="headerlink" title="1. EnterBlurEvent.ts"></a>1. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts" target="_blank" rel="external">EnterBlurEvent.ts</a></h3><p>定义一个<code>heroes</code>数组并给几个初始值，添加英雄方法可以增加一个新的英雄到<code>heroes</code>中</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector:<span class="string">'enter-blur-event'</span>,</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./EnterBlurEvent.html'</span>),</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./EnterBlurEvent.scss'</span>)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EnterBlurEventComponent</span> &#123;</span></span><br><span class="line">    heroes = [<span class="string">'Windstorm'</span>, <span class="string">'Bombasto'</span>, <span class="string">'Magneta'</span>, <span class="string">'Tornado'</span>];</span><br><span class="line">    addHero(newHero: string) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newHero) &#123;</span><br><span class="line">            <span class="keyword">this</span>.heroes.push(newHero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-EnterBlurEvent-html"><a href="#2-EnterBlurEvent-html" class="headerlink" title="2. EnterBlurEvent.html"></a>2. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html" target="_blank" rel="external">EnterBlurEvent.html</a></h3><p>当用户按<code>enter</code>或者<code>Add</code>或者<code>blur</code>失去焦点且不为空的时候调用<code>newHero</code>方法，然后循环输出<code>heroes</code></p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">newHero</span></span><br><span class="line">       (<span class="attr">keyup.enter</span>)=<span class="string">"addHero(newHero.value)"</span></span><br><span class="line">       (<span class="attr">blur</span>)=<span class="string">"addHero(newHero.value); newHero.value='' "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">addHero(newHero.value)</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span></span><span class="template-variable">&#123;&#123;hero&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之基本组件和ngFor]]></title>
      <url>http://blog.xiaomo.info/2016/06/23/angular2_study_note_component/</url>
      <content type="html"><![CDATA[<p>angular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h3><p><img src="http://static.xiaomo.info/images/jiegou.png" alt=""></p>
<ul>
<li><code>.ts</code>   组件代码</li>
<li><code>.scss</code>   样式</li>
<li><code>.png</code>   效果图</li>
<li><code>.html</code>   模板文件</li>
</ul>
<h3 id="2-效果图"><a href="#2-效果图" class="headerlink" title="2. 效果图"></a>2. 效果图</h3><p><img src="http://static.xiaomo.info/images/Basic.png" alt=""></p>
<h2 id="二、代码实例"><a href="#二、代码实例" class="headerlink" title="二、代码实例"></a>二、代码实例</h2><p><a href="https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic" target="_blank" rel="external">https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic</a></p>
<h3 id="三、-详细解读"><a href="#三、-详细解读" class="headerlink" title="三、 详细解读"></a>三、 详细解读</h3><h3 id="1-Basic-ts"><a href="#1-Basic-ts" class="headerlink" title="1. Basic.ts"></a>1. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.ts" target="_blank" rel="external">Basic.ts</a></h3><p>一个基本的组件就长个样子，并没有那么神秘</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;UserModel&#125; <span class="keyword">from</span> <span class="string">'./../../model/UserModel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建模拟数据</span></span><br><span class="line"><span class="keyword">let</span> xiaomo:UserModel = <span class="keyword">new</span> UserModel( <span class="string">'xiaomo'</span>);</span><br><span class="line"><span class="keyword">let</span> xiaoming:UserModel = <span class="keyword">new</span> UserModel(<span class="string">'xiaoming'</span>);</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'basic'</span>,</span><br><span class="line">    styles:[<span class="built_in">require</span>(<span class="string">'./Basic.scss'</span>)], <span class="comment">//内联样式,注意使用row-loader</span></span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'./Basic.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    users:<span class="built_in">Object</span>;</span><br><span class="line">    <span class="comment">// 在构造函数中赋值</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">this</span>.users= [ xiaomo,xiaoming];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-UserModel-ts"><a href="#2-UserModel-ts" class="headerlink" title="2. UserModel.ts"></a>2. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/model/UserModel.ts" target="_blank" rel="external">UserModel.ts</a></h3><p>这里使用了uuid来创建一个随机的id作为唯一标识符<br>使用 <code>public</code> 可以不用再 <code>this.name = name</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; uuid &#125; <span class="keyword">from</span> <span class="string">'./../util/uuid'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span>&#123;</span><br><span class="line">    id :string;</span><br><span class="line">    <span class="keyword">constructor</span>(public name:string)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = uuid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-Basic-html"><a href="#3-Basic-html" class="headerlink" title="3. Basic.html"></a>3. <a href="https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.html" target="_blank" rel="external">Basic.html</a></h3><p>使用ngFor 循环,index可以取到索引值(从0开始)</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">"let item of users; let i = index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;i+1&#125;&#125;</span><span class="xml"> Hello </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angular2学习笔记之基础环境搭建]]></title>
      <url>http://blog.xiaomo.info/2016/06/22/angular2_study_note_environment/</url>
      <content type="html"><![CDATA[<p>俗话说万事开头难，对于一个项目的开发，准备工作其实是一件很很头大的事。尤其是像angular2这种前沿基础，搭建环境这一步就让很多人望而却步。<a href="https://github.com/qq83387856/angular2-demo" target="_blank" rel="external">angular2-demo</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、angular2基础依赖"><a href="#一、angular2基础依赖" class="headerlink" title="一、angular2基础依赖"></a>一、angular2基础依赖</h2><h3 id="1-angular模块"><a href="#1-angular模块" class="headerlink" title="1.angular模块"></a>1.angular模块</h3><ul>
<li>@angular/common</li>
<li>@angular/compiler</li>
<li>@angular/core</li>
<li>@angular/http</li>
<li>@angular/platform-browser</li>
<li>@angular/platform-browser-dynamic</li>
<li>@angular/router</li>
<li>@angular/deprecated</li>
</ul>
<h3 id="2-其他依赖"><a href="#2-其他依赖" class="headerlink" title="2. 其他依赖"></a>2. 其他依赖</h3><ul>
<li>core-js</li>
<li>es6-shim</li>
<li>reflect-metadata</li>
<li>systemjs</li>
<li>ts-helpers</li>
<li>tslint</li>
<li>typescript</li>
<li>typings</li>
<li>zone.js</li>
<li>concurrently</li>
<li>live-server</li>
<li>lodash</li>
<li>moment</li>
<li>uuid</li>
<li>base64id</li>
<li>optimist</li>
<li>uuid</li>
<li><a href="#">rxjs</a> 非常重要</li>
</ul>
<h3 id="3-typings依赖"><a href="#3-typings依赖" class="headerlink" title="3. typings依赖"></a>3. typings依赖</h3><p>dt源</p>
<ul>
<li>angular-protractor</li>
<li>core-js</li>
<li>hammerjs</li>
<li>jasmine</li>
<li>node</li>
<li>selenium-webdriver</li>
<li>source-map</li>
<li>uglify-js</li>
<li>webpack</li>
</ul>
<p>npm源</p>
<ul>
<li>lodash</li>
</ul>
<p>github源<br>暂无</p>
<h3 id="4-typings-json"><a href="#4-typings-json" class="headerlink" title="4. typings.json"></a>4. <a href="https://github.com/qq83387856/angular2-demo/blob/master/typings.json" target="_blank" rel="external">typings.json</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"globalDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"angular-protractor"</span>: <span class="string">"registry:dt/angular-protractor#1.5.0+20160425143459"</span>,</span><br><span class="line">    <span class="attr">"core-js"</span>: <span class="string">"registry:dt/core-js#0.0.0+20160317120654"</span>,</span><br><span class="line">    <span class="attr">"hammerjs"</span>: <span class="string">"registry:dt/hammerjs#2.0.4+20160417130828"</span>,</span><br><span class="line">    <span class="attr">"jasmine"</span>: <span class="string">"registry:dt/jasmine#2.2.0+20160505161446"</span>,</span><br><span class="line">    <span class="attr">"node"</span>: <span class="string">"registry:dt/node#6.0.0+20160514165920"</span>,</span><br><span class="line">    <span class="attr">"selenium-webdriver"</span>: <span class="string">"registry:dt/selenium-webdriver#2.44.0+20160317120654"</span>,</span><br><span class="line">    <span class="attr">"source-map"</span>: <span class="string">"registry:dt/source-map#0.0.0+20160317120654"</span>,</span><br><span class="line">    <span class="attr">"uglify-js"</span>: <span class="string">"registry:dt/uglify-js#2.6.1+20160316155526"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"registry:dt/webpack#1.12.9+20160321060707"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"lodash"</span>: <span class="string">"registry:npm/lodash#4.0.0+20160416211519"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-webpack的配置"><a href="#4-webpack的配置" class="headerlink" title="4. webpack的配置"></a>4. <a href="https://github.com/qq83387856/angular2-demo/blob/master/webpack.config.js" target="_blank" rel="external">webpack的配置</a></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">var webpack               = require(<span class="string">'webpack'</span>),</span><br><span class="line">    ReloadPlugin          = require(<span class="string">'webpack-reload-plugin'</span>),</span><br><span class="line">    path                  = require(<span class="string">'path'</span>),</span><br><span class="line">    HtmlWebpackPlugin     = require(<span class="string">'html-webpack-plugin'</span>),</span><br><span class="line">    WebpackNotifierPlugin = require(<span class="string">'webpack-notifier'</span>),</span><br><span class="line">    ExtractTextPlugin     = require(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Support for extra commandline arguments</span><br><span class="line"> */</span></span><br><span class="line">var argv = require(<span class="string">'optimist'</span>).argv;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Useful variables</span><br><span class="line"> */</span></span><br><span class="line">var cwd = process.cwd();</span><br><span class="line">var DEBUG = !argv.release;</span><br><span class="line">var isDevServer = process.argv.join(<span class="string">''</span>).indexOf(<span class="string">'webpack-dev-server'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">var version = require(path.resolve(cwd,<span class="string">'package.json'</span>)).version;</span><br><span class="line">var reloadHost = <span class="string">'localhost'</span>;</span><br><span class="line">var npmRoot = __dirname + <span class="string">'/node_modules'</span>;</span><br><span class="line">var appDir = __dirname + <span class="string">'/src'</span>;</span><br><span class="line"></span><br><span class="line">var entry = [<span class="string">'app.ts'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDevServer) &#123;</span><br><span class="line">  entry.unshift(<span class="string">'webpack-dev-server/client?http://'</span>+reloadHost+<span class="string">':8080'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function makeConfig(options) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="symbol">    cache:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">    debug:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">    verbose:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">    displayErrorDetails:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">    context:</span> appDir,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    entry:</span> &#123;</span><br><span class="line"><span class="symbol">      vendor:</span> <span class="string">'vendor.ts'</span>,</span><br><span class="line"><span class="symbol">      bundle:</span> entry</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    stats:</span> &#123;</span><br><span class="line"><span class="symbol">      colors:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">      reasons:</span> DEBUG</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    devtool:</span> <span class="string">'source-map'</span>,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    recordsPath:</span> path.resolve(<span class="string">'.webpack.json'</span>),</span><br><span class="line"><span class="symbol"></span><br><span class="line">    devServer:</span> &#123;</span><br><span class="line"><span class="symbol">      inline:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">      colors:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">      header:</span>&#123;</span><br><span class="line">        <span class="string">"Access-Control-Allow-Origin"</span>:<span class="string">"*"</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="symbol">      contentBase:</span> path.resolve(cwd, <span class="string">'dist'</span>),</span><br><span class="line"><span class="symbol">      publicPath:</span> <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    output:</span> &#123;</span><br><span class="line"><span class="symbol">      path:</span> path.resolve(cwd, <span class="string">'dist'</span>),</span><br><span class="line"><span class="symbol">      filename:</span> <span class="string">'[name].js'</span>,</span><br><span class="line"><span class="symbol">      publicPath:</span> <span class="string">'/'</span>,</span><br><span class="line"><span class="symbol">      chunkFilename:</span> <span class="string">'[id].bundle.js'</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Hot Module Replacement settings:</span></span><br><span class="line"><span class="symbol">      hotUpdateMainFilename:</span> <span class="string">'updates/[hash].update.json'</span>,</span><br><span class="line"><span class="symbol">      hotUpdateChunkFilename:</span> <span class="string">'updates/[hash].[id].update.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol"></span><br><span class="line">    plugins:</span> [</span><br><span class="line">      <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/spec\.js$/</span>),</span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>),</span><br><span class="line">      <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles.css'</span>),</span><br><span class="line">      <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line"><span class="symbol">        VERSION:</span> JSON.stringify(version),</span><br><span class="line"><span class="symbol">        ENV:</span> JSON.stringify(options.env)</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"><span class="symbol">        template:</span> path.join(appDir, <span class="string">'index.html'</span>)</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> ReloadPlugin( isDevServer ? 'localhost' : <span class="string">''</span>),</span><br><span class="line">      <span class="keyword">new</span> WebpackNotifierPlugin(&#123;</span><br><span class="line"><span class="symbol">        title:</span> <span class="string">'ng-book'</span>,</span><br><span class="line"><span class="symbol">        contentImage:</span> path.join(appDir, <span class="string">'images'</span>, <span class="string">'favicon.ico'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line"><span class="symbol">    resolveLoader:</span> &#123;</span><br><span class="line"><span class="symbol">      root:</span> path.join(__dirname, <span class="string">'node_modules'</span>),</span><br><span class="line"><span class="symbol">      modulesDirectories:</span> [<span class="string">'node_modules'</span>],</span><br><span class="line"><span class="symbol">      fallback:</span> path.join(__dirname, <span class="string">'node_modules'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol">    resolve:</span> &#123;</span><br><span class="line"><span class="symbol">      root:</span> [path.resolve(cwd)],</span><br><span class="line"><span class="symbol">      modulesDirectories:</span> [</span><br><span class="line">        <span class="string">'node_modules'</span>, <span class="string">'src'</span>, <span class="string">'src/ts'</span>, <span class="string">'.'</span></span><br><span class="line">      ],</span><br><span class="line"><span class="symbol">      extensions:</span> [<span class="string">''</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.css'</span>,<span class="string">'.scss'</span>],</span><br><span class="line"><span class="symbol">      alias:</span> &#123;</span><br><span class="line">        <span class="string">'src'</span>: <span class="string">'src'</span>,</span><br><span class="line">        <span class="string">'scripts'</span>: npmRoot</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol">    module:</span> &#123;</span><br><span class="line"><span class="symbol">      preLoaders:</span> [</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.ts$/</span>, <span class="string">loader:</span> <span class="string">'tslint'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line"><span class="symbol"></span><br><span class="line">      loaders:</span> [</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.(png|jpg|gif|ico)$/</span>,   <span class="string">loader:</span> <span class="string">'file-loader?limit=50000&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.json$/</span>, <span class="string">loader:</span> <span class="string">'json'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/^.*\.css$/</span>, <span class="string">loader:</span> ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader?sourceMap'</span>)&#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.scss$/</span>, <span class="string">loaders:</span> [</span><br><span class="line">                                     <span class="string">'raw-loader'</span>,</span><br><span class="line">                                     <span class="string">'style-loader'</span>,</span><br><span class="line">                                     ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader?sourceMap'</span>),</span><br><span class="line">                                     <span class="string">'sass-loader'</span> +</span><br><span class="line">                                     <span class="string">'?outputStyle=expanded&amp;'</span> +</span><br><span class="line">                                     <span class="string">'root='</span>+appDir+<span class="string">'&amp;'</span> +</span><br><span class="line">                                     <span class="string">'&amp;includePaths[]'</span>+npmRoot + <span class="string">'&amp;'</span> +</span><br><span class="line">                                     <span class="string">'&amp;includePaths[]'</span>+appDir</span><br><span class="line">                                    ]&#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.svg(\?v=\d+\.\d+\.\d+)?$/</span>,         <span class="string">loader:</span> <span class="string">'url-loader'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.html$/</span>,    <span class="string">loader:</span> <span class="string">'raw'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/^index\.html$/</span>, <span class="string">loader:</span> <span class="string">'file-loader?name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.ts$/</span>, <span class="string">loader:</span> <span class="string">'ts'</span>, <span class="string">exclude:</span> [ <span class="regexp">/test/</span>, <span class="regexp">/node_modules/</span>]&#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.woff(2)?(\?v=\d+\.\d+\.\d+)?$/</span>,    <span class="string">loader:</span> <span class="string">'file-loader?mimetype=application/font-woff&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.ttf(\?v=\d+\.\d+\.\d+)?$/</span>,         <span class="string">loader:</span> <span class="string">'file-loader?mimetype=application/x-font-ttf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.eot(\?v=\d+\.\d+\.\d+)?\??$/</span>,      <span class="string">loader:</span> <span class="string">'file-loader?mimetype=application/vnd.ms-fontobject&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.otf(\?v=\d+\.\d+\.\d+)?$/</span>,         <span class="string">loader:</span> <span class="string">'file-loader?mimetype=application/font-otf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class="line">        &#123; <span class="string">test:</span> <span class="regexp">/\.svg(\?v=\d+\.\d+\.\d+)?$/</span>,         <span class="string">loader:</span> <span class="string">'url-loader'</span>   &#125;</span><br><span class="line">      ],</span><br><span class="line"><span class="symbol">      noParse:</span> [</span><br><span class="line">        <span class="regexp">/\.min\.js/</span>,</span><br><span class="line">        <span class="regexp">/vendor\/</span>.*?\.(js|css)$/</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    tslint: &#123;</span><br><span class="line"><span class="symbol">        emitErrors:</span> <span class="literal">false</span>,</span><br><span class="line"><span class="symbol">        failOnHint:</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var config = makeConfig(argv);</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure>
<h3 id="5-ts转码"><a href="#5-ts转码" class="headerlink" title="5. ts转码"></a>5. ts转码</h3><p><a href="https://github.com/qq83387856/angular2-demo/blob/master/tsconfig.json" target="_blank" rel="external">tsconfig.json</a></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noLib"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"filesGlob"</span>: [</span><br><span class="line">    <span class="string">"./**/*.ts"</span>,</span><br><span class="line">    <span class="string">"./test/**/*.ts"</span>,</span><br><span class="line">    <span class="string">"!./node_modules/**/*.ts"</span>,</span><br><span class="line">    <span class="string">"!./tmp/*.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"compileOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"buildOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"atom"</span>: &#123; <span class="attr">"rewriteTsconfig"</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"typings/main.d.ts"</span>,</span><br><span class="line">    <span class="string">"typings/main"</span>,</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"tmp"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-基础依赖引入"><a href="#6-基础依赖引入" class="headerlink" title="6.基础依赖引入"></a>6.基础依赖引入</h3><p><a href="https://github.com/qq83387856/angular2-demo/blob/master/vendor.ts" target="_blank" rel="external">vendor.ts</a></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Polyfills</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'core-js/es6';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'core-js/es6';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'core-js/es7/reflect';</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'zone.js/dist/zone';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'zone.js/dist/long-stack-trace-zone';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Angular 2</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> '@angular/platform-browser-dynamic';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> '@angular/common';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> '@angular/core';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> '@angular/router';</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> '@angular/http';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJS</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> 'rxjs';</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react学习笔记之环境搭建]]></title>
      <url>http://blog.xiaomo.info/2016/06/21/react_environment/</url>
      <content type="html"><![CDATA[<p>不知道为什么，就是突然想学一学react。先进的思想，前沿的技术，漂亮的组件。它的魔力就在于能让我一眼就爱上它！源码: <a href="https://github.com/nodejs-study/node-koa/tree/master/web/client" target="_blank" rel="external">react-detail</a><br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/react.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、核心依赖"><a href="#一、核心依赖" class="headerlink" title="一、核心依赖"></a>一、核心依赖</h2><h3 id="1-react"><a href="#1-react" class="headerlink" title="1. react"></a>1. <a href="https://npm.taobao.org/package/react" target="_blank" rel="external">react</a></h3><h3 id="2-react-dom"><a href="#2-react-dom" class="headerlink" title="2. react-dom"></a>2. <a href="https://npm.taobao.org/package/react-dom" target="_blank" rel="external">react-dom</a></h3><h3 id="3-react-redux"><a href="#3-react-redux" class="headerlink" title="3. react-redux"></a>3. <a href="https://npm.taobao.org/package/react-redux" target="_blank" rel="external">react-redux</a></h3><h3 id="4-react-router"><a href="#4-react-router" class="headerlink" title="4. react-router"></a>4. <a href="https://npm.taobao.org/package/react-router" target="_blank" rel="external">react-router</a></h3><h3 id="5-redux"><a href="#5-redux" class="headerlink" title="5. redux"></a>5. <a href="https://npm.taobao.org/package/redux" target="_blank" rel="external">redux</a></h3><h3 id="6-react-router-redux"><a href="#6-react-router-redux" class="headerlink" title="6. react-router-redux"></a>6. <a href="https://npm.taobao.org/package/react-router-redux" target="_blank" rel="external">react-router-redux</a></h3><h3 id="7-redux-thunk"><a href="#7-redux-thunk" class="headerlink" title="7. redux-thunk"></a>7. <a href="https://npm.taobao.org/package/redux-thunk" target="_blank" rel="external">redux-thunk</a></h3><h3 id="8-isomorphic-fetch"><a href="#8-isomorphic-fetch" class="headerlink" title="8. isomorphic-fetch"></a>8. <a href="https://npm.taobao.org/package/isomorphic-fetch" target="_blank" rel="external">isomorphic-fetch</a></h3><h3 id="9-antd"><a href="#9-antd" class="headerlink" title="9. antd"></a>9. <a href="https://npm.taobao.org/package/antd" target="_blank" rel="external">antd</a></h3><h3 id="10-bootstrap"><a href="#10-bootstrap" class="headerlink" title="10.bootstrap"></a>10.<a href="https://npm.taobao.org/package/bootstrap" target="_blank" rel="external">bootstrap</a></h3><h2 id="二、babel相关"><a href="#二、babel相关" class="headerlink" title="二、babel相关"></a>二、babel相关</h2><h3 id="1-命令编译器"><a href="#1-命令编译器" class="headerlink" title="1. 命令编译器"></a>1. 命令编译器</h3><p><a href="https://npm.taobao.org/package/babel-cli" target="_blank" rel="external">babel-cli</a></p>
<p>使用 <code>babel script.js</code>   一般全局安装 <code>npm install -g babel-cli</code></p>
<h3 id="2-babel的核心库"><a href="#2-babel的核心库" class="headerlink" title="2. babel的核心库"></a>2. babel的核心库</h3><p><a href="https://npm.taobao.org/package/babel-core" target="_blank" rel="external">babel-core</a></p>
<h3 id="3-解析器"><a href="#3-解析器" class="headerlink" title="3. 解析器"></a>3. 解析器</h3><p><a href="https://npm.taobao.org/package/babel-preset-es2015" target="_blank" rel="external">babel-preset-es2015</a> 和<a href="https://npm.taobao.org/package/babel-react" target="_blank" rel="external">babel-preset-react</a></p>
<p>使用 在项目根目录新建文件<code>.babelrc</code>加上以下代码，可以用babel将es2015和react转成浏览器能够识别的代码</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-es6的stage0转码器"><a href="#4-es6的stage0转码器" class="headerlink" title="4. es6的stage0转码器"></a>4. es6的stage0转码器</h3><p><a href="https://npm.taobao.org/package/babel-preset-stage-0" target="_blank" rel="external">babel-preset-stage-0</a></p>
<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"stage-0"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-转码器"><a href="#5-转码器" class="headerlink" title="5. 转码器"></a>5. 转码器</h3><p> <a href="https://npm.taobao.org/package/babel-loader" target="_blank" rel="external">babel-loader</a></p>
<p><code>npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</code></p>
<h3 id="6-babel插件"><a href="#6-babel插件" class="headerlink" title="6 babel插件"></a>6 babel插件</h3><p><a href="https://npm.taobao.org/package/babel-runtime" target="_blank" rel="external">babel-runtime</a> <a href="https://npm.taobao.org/package/babel-plugin-transform-runtime" target="_blank" rel="external">babel-plugin-transform-runtime</a></p>
<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">plugins</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-es6转码垫片"><a href="#7-es6转码垫片" class="headerlink" title="7. es6转码垫片"></a>7. es6转码垫片</h3><p><a href="https://npm.taobao.org/package/babel-polyfill" target="_blank" rel="external">babel-polyfill</a></p>
<p>使用： 在入口文件引入 <code>import &#39;babel/polyfill&#39;;</code><br>作用：<br>babel-polyfill Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。然后，在脚本头部，加入如下一行代码。<code>import &#39;babel-polyfill&#39;</code>;Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。</p>
<h3 id="8-react代码优化插件"><a href="#8-react代码优化插件" class="headerlink" title="8. react代码优化插件"></a>8. react代码优化插件</h3><p><a href="https://github.com/thejameskyle/babel-react-optimize" target="_blank" rel="external">babel-preset-react-optimize</a></p>
<p>1.下载  <code>npm install --save-dev babel-preset-react-optimize</code></p>
<p>2.使用 .babelrc</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"production"</span>: &#123;</span><br><span class="line">      <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>, <span class="string">"react-optimize"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.具体表现<br>转换常量元素  <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-constant-elements" target="_blank" rel="external">transform-react-constant-elements</a><br>转换内联元素  <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-inline-elements" target="_blank" rel="external">transform-react-inline-elements</a><br>移除属性类型  <a href="https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types" target="_blank" rel="external">transform-react-remove-prop-types</a><br>将类转成方法  <a href="https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function" target="_blank" rel="external">transform-react-pure-class-to-function</a></p>
<h3 id="9-babel注册机"><a href="#9-babel注册机" class="headerlink" title="9. babel注册机"></a>9. babel注册机</h3><p><a href="https://github.com/aleclarson/babel-register" target="_blank" rel="external">babel-register</a></p>
<p>使用 <code>import &#39;babel-register&#39;</code></p>
<p>作用： 能够将模块化引入的es和react代码交给babel进行转换</p>
<h2 id="三、webpack"><a href="#三、webpack" class="headerlink" title="三、webpack"></a>三、webpack</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h3><ul>
<li>webpack</li>
<li>webpack-dev-server</li>
<li>webpack-dev-middleware</li>
<li>webpack-hot-middleware</li>
<li>extract-text-webpack-plugin</li>
<li>html-webpack-plugin</li>
<li>copy-webpack-plugin</li>
</ul>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h2 id="四、loaders"><a href="#四、loaders" class="headerlink" title="四、loaders"></a>四、loaders</h2><h3 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h3><ul>
<li>raw-loader<h3 id="2-css"><a href="#2-css" class="headerlink" title="2. css"></a>2. css</h3></li>
<li>node-sass</li>
<li>style-loader</li>
<li>css-loader</li>
<li>less-loader</li>
<li>sass-loader</li>
<li>postcss-loader<h3 id="3-图片、字体"><a href="#3-图片、字体" class="headerlink" title="3. 图片、字体"></a>3. 图片、字体</h3></li>
<li>file-loader</li>
<li>url-loader</li>
<li>imorts-loader<h3 id="4-json"><a href="#4-json" class="headerlink" title="4. json"></a>4. json</h3></li>
<li>json-loader</li>
</ul>
<h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><ul>
<li>normalize</li>
<li>cssnano</li>
<li>history</li>
<li>ip</li>
<li>yargs</li>
<li>cheerio</li>
<li>better-npm-run</li>
<li>fs-extra</li>
<li>redbox-react</li>
<li>autoprefixer</li>
<li>nodemon</li>
</ul>
<h2 id="六、后台相关"><a href="#六、后台相关" class="headerlink" title="六、后台相关"></a>六、后台相关</h2><ul>
<li>debug</li>
<li>koa</li>
<li>koa-connect-history-api-fallback</li>
<li>koa-convert</li>
<li>koa-proxy</li>
<li>koa-static</li>
<li>mongoose</li>
<li>moment</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取多说和 Disqus 文章评论数的方法]]></title>
      <url>http://blog.xiaomo.info/2016/06/17/duoshuo_comment/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。<p></p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h2><p>多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可</p>
<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><ul>
<li><code>short_name</code>: 站点注册的多说二级域名，比如注册了 <a href="http://helloworld.duoshuo.com/" target="_blank" rel="external">http://helloworld.duoshuo.com/</a>, 则对应二级域名为 helloworld;</li>
<li><code>threads</code>: 文章的 <code>thread-key</code>, 与评论框中 data-thread-key 一致。</li>
</ul>
<h3 id="返回数据示例"><a href="#返回数据示例" class="headerlink" title="返回数据示例"></a>返回数据示例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"response"</span>: &#123;</span><br><span class="line">        <span class="attr">"about/index.html"</span>: &#123;</span><br><span class="line">            <span class="attr">"thread_id"</span>: <span class="string">"6205475504969401090"</span>,</span><br><span class="line">            <span class="attr">"channel_key"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"thread_key"</span>: <span class="string">"about/index.html"</span>,</span><br><span class="line">            <span class="attr">"reposts"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"views"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"likes"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"dislikes"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"comments"</span>: <span class="number">187</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"comments_zero"</span>: <span class="string">"暂无评论"</span>,</span><br><span class="line">        <span class="attr">"comments_one"</span>: <span class="string">"1条评论"</span>,</span><br><span class="line">        <span class="attr">"comments_multiple"</span>: <span class="string">"&#123;num&#125;条评论"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><ul>
<li>需要的只是评论数 <code>comments</code>，这里使用 jQuery 的 <code>getJSON</code> 比较方便</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shortName = <span class="string">"moxfive"</span>;</span><br><span class="line">    <span class="keyword">var</span> threads = <span class="string">"about/index.html"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jsonUrl = <span class="string">"http://api.duoshuo.com/threads/counts.jsonp?short_name="</span> + shortName + <span class="string">"&amp;threads="</span> + threads +  <span class="string">"&amp;callback=?"</span>;</span><br><span class="line">    $.getJSON(jsonUrl, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        $.each(result.response, <span class="function"><span class="keyword">function</span>(<span class="params">i, field</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value = field.comments;</span><br><span class="line">            $(<span class="string">".duoshuo-count"</span>).text(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>获得的值会显示在匹配的区域中</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"disqus-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h2><h3 id="加载相关-JS"><a href="#加载相关-JS" class="headerlink" title="加载相关 JS"></a>加载相关 JS</h3><ul>
<li>域名中填入自己的 Disqus <code>shortname</code>，获取方式参考 <a href="https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-" target="_blank" rel="external">官方文档</a></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"dsq-count-scr"</span> <span class="attr">src</span>=<span class="string">"//&lt;shortname&gt;.disqus.com/count.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- e.g. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"dsq-count-scr"</span> <span class="attr">src</span>=<span class="string">"//moxfive.disqus.com/count.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="显示评论数"><a href="#显示评论数" class="headerlink" title="显示评论数"></a>显示评论数</h3><ul>
<li>这里介绍两种借助特定 Class 显示评论数的方法</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 `data-disqus-identifier` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"disqus-comment-count"</span> <span class="attr">data-disqus-identifier</span>=<span class="string">"about/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 `data-disqus-url` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"disqus-comment-count"</span> <span class="attr">data-disqus-url</span>=<span class="string">"http://MOxFIVE.xyz/about/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>identifier</code> 和 <code>url</code> 的值如果不清楚，可以自行设置，方法参考 <a href="https://help.disqus.com/customer/portal/articles/472098" target="_blank" rel="external">官方文档</a></li>
<li>获取的评论数不正确，很可能是因为远程数据没更新，等等就好。</li>
</ul>
</blockquote>
<h3 id="提取纯数字"><a href="#提取纯数字" class="headerlink" title="提取纯数字"></a>提取纯数字</h3><ul>
<li>上面方法显示的评论数是类似 <code>1 Comment</code> 这样的格式，这里可以把它转为纯数字格式 <code>1</code></li>
<li>使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $disqusCount = $(<span class="string">".disqus-comment-count"</span>);</span><br><span class="line">$disqusCount.bind(<span class="string">"DOMNodeInserted"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = $(<span class="keyword">this</span>).text().replace(<span class="regexp">/[^0-9]/ig</span>,<span class="string">""</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).text(num)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li>多说官方文档: <a href="http://dev.duoshuo.com/docs/50615732a834c63c56004257" target="_blank" rel="external">获取文章评论、转发数</a></li>
<li>多说官方文档: <a href="http://dev.duoshuo.com/threads/5016427f77cf5fa30500000e" target="_blank" rel="external">代码显示【文章评论数】方法</a></li>
<li>Disqus Help: <a href="https://help.disqus.com/customer/portal/articles/565624-adding-comment-c" target="_blank" rel="external">Adding comment count links to your home page</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[几个国内专用的公共 DNS]]></title>
      <url>http://blog.xiaomo.info/2016/06/17/public_dns/</url>
      <content type="html"><![CDATA[<p>　　之前 <a href="http://www.bootcdn.cn/" target="_blank" rel="external">有个网站</a> 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/dns.png" alt="点击访问小莫的github"></a></p>
<h2 id="DNS-简介"><a href="#DNS-简介" class="headerlink" title="DNS 简介"></a>DNS 简介</h2><p>DNS 全称 <code>Domain Name System</code>，中文译为 <code>域名系统</code>，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。</p>
<h2 id="114DNS"><a href="#114DNS" class="headerlink" title="114DNS"></a>114DNS</h2><pre><code>114.114.114.114
114.114.115.115
</code></pre><p><strong>官　网</strong>：<a href="http://www.114dns.com/" target="_blank" rel="external">http://www.114dns.com/</a><br><strong>关键词</strong>：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒</p>
<h2 id="阿里公共DNS"><a href="#阿里公共DNS" class="headerlink" title="阿里公共DNS"></a>阿里公共DNS</h2><pre><code>223.5.5.5
223.6.6.6
</code></pre><p><strong>官　网</strong>：<a href="http://www.alidns.com/" target="_blank" rel="external">http://www.alidns.com/</a><br><strong>关键词</strong>：快速，稳定，智能</p>
<h2 id="腾讯-Public-DNS"><a href="#腾讯-Public-DNS" class="headerlink" title="腾讯 Public DNS +"></a>腾讯 Public DNS +</h2><pre><code>119.29.29.29
</code></pre><p><strong>官　网</strong>：<a href="https://www.dnspod.cn/Products/Public.DNS" target="_blank" rel="external">https://www.dnspod.cn/Products/Public.DNS</a><br><strong>关键词</strong>：快速，准确，稳定</p>
<h2 id="百度公共DNS"><a href="#百度公共DNS" class="headerlink" title="百度公共DNS"></a>百度公共DNS</h2><pre><code>180.76.76.76
</code></pre><p><strong>官　网</strong>：<a href="http://dudns.baidu.com/intro/publicdns/" target="_blank" rel="external">http://dudns.baidu.com/intro/publicdns/</a><br><strong>关键词</strong>：云防护，无劫持，更精确</p>
<h2 id="oneDNS"><a href="#oneDNS" class="headerlink" title="oneDNS"></a>oneDNS</h2><pre><code>南方首选：112.124.47.27
北方首选：114.215.126.16
</code></pre><p><strong>官　网</strong>：<a href="http://www.onedns.net/" target="_blank" rel="external">http://www.onedns.net/</a><br><strong>关键词</strong>：安全，快速，恶意网站拦截，广告过滤，上网加速</p>
<h2 id="CNNIC-SDNS"><a href="#CNNIC-SDNS" class="headerlink" title="CNNIC SDNS"></a>CNNIC SDNS</h2><pre><code>1.2.4.8
210.2.4.8
</code></pre><p><strong>官　网：</strong><a href="http://public.sdns.cn/" target="_blank" rel="external">http://public.sdns.cn/</a><br><strong>关键词：</strong>权威，安全，智能，高速</p>
<h2 id="DNS-选用"><a href="#DNS-选用" class="headerlink" title="DNS 选用"></a>DNS 选用</h2><h3 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h3><ul>
<li>可以通过 <a href="http://www.webkaka.com/dns/" target="_blank" rel="external">在线小工具</a> 测试一下 DNS 的解析速度，结果可以作为参考<br><img src="http://static.xiaomo.info/images/dns-tool.png" alt="DNS Tool"></li>
</ul>
<h3 id="本地优选"><a href="#本地优选" class="headerlink" title="本地优选"></a>本地优选</h3><ul>
<li>下载 <a href="http://www.crsky.com/soft/88043.html" target="_blank" rel="external">魔方DNS助手</a>，可以方便地检测，选择和修改 DNS</li>
</ul>
<p><img src="http://static.xiaomo.info/images/dnshelper.png" alt="DNS Helper"></p>
<blockquote>
<p>如果更换 DNS 后网络异常，可以尝试 <a href="http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html" target="_blank" rel="external">刷新本地的DNS缓存</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里云服务器磁盘挂载]]></title>
      <url>http://blog.xiaomo.info/2016/06/17/linux_disk/</url>
      <content type="html"><![CDATA[<p>起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/linux.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h2><p>参考自阿里云服务器使用心得。</p>
<p>云服务器环境：CentOS 6.2 64位</p>
<p>客户端环境：Mac OSX</p>
<p>远程连接方式：运行 Terminal，输入命令 ssh username@ip</p>
<h2 id="二、硬盘分区及挂载操作步骤"><a href="#二、硬盘分区及挂载操作步骤" class="headerlink" title="二、硬盘分区及挂载操作步骤"></a>二、硬盘分区及挂载操作步骤</h2><h3 id="1-查看未挂载的硬盘"><a href="#1-查看未挂载的硬盘" class="headerlink" title="1. 查看未挂载的硬盘"></a>1. 查看未挂载的硬盘</h3><p>（名称为/dev/xvdb）<br><code>fdisk -l</code><br>输出<br><code>Disk /dev/xvdb doesn&#39;t contain a valid partition table</code></p>
<h3 id="2-创建分区"><a href="#2-创建分区" class="headerlink" title="2. 创建分区"></a>2. 创建分区</h3><p><code>fdisk /dev/xvdb</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入n</span><br><span class="line"></span><br><span class="line">Command (m for <span class="keyword">help</span>):n</span><br><span class="line"></span><br><span class="line">输入p</span><br><span class="line"></span><br><span class="line">Command <span class="keyword">action</span></span><br><span class="line">e <span class="keyword">extended</span></span><br><span class="line">p primary <span class="keyword">partition</span> (<span class="number">1</span><span class="number">-4</span>)</span><br><span class="line">p</span><br><span class="line"></span><br><span class="line">输入<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Partition</span> <span class="built_in">number</span> (<span class="number">1</span><span class="number">-4</span>): <span class="number">1</span></span><br><span class="line"></span><br><span class="line">回车</span><br><span class="line"></span><br><span class="line"><span class="keyword">First</span> cylinder (<span class="number">1</span><span class="number">-2610</span>, <span class="keyword">default</span> <span class="number">1</span>):</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">default</span> <span class="keyword">value</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">回车</span><br><span class="line"></span><br><span class="line"><span class="keyword">Last</span> cylinder, +cylinders <span class="keyword">or</span> +<span class="keyword">size</span>&#123;K,M,G&#125; (<span class="number">1</span><span class="number">-2610</span>, <span class="keyword">default</span> <span class="number">2610</span>):</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">default</span> <span class="keyword">value</span> <span class="number">2610</span></span><br><span class="line"></span><br><span class="line">输入w</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="keyword">help</span>): w</span><br><span class="line">The <span class="keyword">partition</span> <span class="keyword">table</span> has been altered!</span><br></pre></td></tr></table></figure>
<h3 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h3><p> 执行命令： <code>mkfs.ext3 /dev/xvdb1</code></p>
<h3 id="4-建立挂载目录"><a href="#4-建立挂载目录" class="headerlink" title="4. 建立挂载目录"></a>4. 建立挂载目录</h3><p>执行命令： <code>mkdir /data</code>  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖</p>
<h3 id="5-挂载分区"><a href="#5-挂载分区" class="headerlink" title="5. 挂载分区"></a>5. 挂载分区</h3><p>将磁盘挂载到刚建立的<code>data</code>目录中   <code>mount /dev/xvdb1 /data</code></p>
<h3 id="6-设置开机自动挂载"><a href="#6-设置开机自动挂载" class="headerlink" title="6. 设置开机自动挂载"></a>6. 设置开机自动挂载</h3><p><code>vi /etc/fstab</code></p>
<p>在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/xvdb1              /<span class="class"><span class="keyword">data</span>                   ext3    defaults        0 0</span></span><br></pre></td></tr></table></figure>
<h3 id="7-确认是否挂载成功"><a href="#7-确认是否挂载成功" class="headerlink" title="7. 确认是否挂载成功"></a>7. 确认是否挂载成功</h3><p>重启服务器: <code>reboot</code><br>查看硬盘分区: <code>df</code></p>
<p>反馈信息</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/xvdb1            <span class="number">20635700</span>    <span class="number">176196</span>  <span class="number">19411268</span>   <span class="number">1</span>% /data</span><br></pre></td></tr></table></figure>
<p>搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！</p>
<h2 id="四、-原文地址"><a href="#四、-原文地址" class="headerlink" title="四、 原文地址"></a>四、 原文地址</h2><p><a href="http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html" target="_blank" rel="external">aliyun-linux-fdisk</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux权限详细解读]]></title>
      <url>http://blog.xiaomo.info/2016/06/17/linux_chmod/</url>
      <content type="html"><![CDATA[<p>话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/linux.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、理论说明"><a href="#一、理论说明" class="headerlink" title="一、理论说明"></a>一、理论说明</h2><p>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p>
<h3 id="1-权限说明"><a href="#1-权限说明" class="headerlink" title="1. 权限说明"></a>1. 权限说明</h3><p>文件或目录的访问权限分为只读，只写和可执行三种。<br>以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。<br>可执行权限表示允许将该文件作为一个程序执行。<br>文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。<br>用户也可根据需要把访问权限设置为需要的任何组合。</p>
<h3 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2. 用户组"></a>2. 用户组</h3><p>有三种不同类型的用户可对文件或目录进行访问：</p>
<ul>
<li>文件所有者，</li>
<li>同组用户</li>
<li>其他用户<br>所有者一般是文件的创建者。</li>
</ul>
<p>所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。<br>在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p>
<h3 id="3-文件权限"><a href="#3-文件权限" class="headerlink" title="3. 文件权限"></a>3. 文件权限</h3><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为</p>
<ul>
<li>文件属主的读、写和执行权限；</li>
<li>与属主同组的用户的读、写和执行权限；</li>
<li>系统中其他用户的读、写和执行权限。<br>当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。</li>
</ul>
<h3 id="4-实例分析"><a href="#4-实例分析" class="headerlink" title="4.实例分析"></a>4.实例分析</h3><p>随意查看一个目录： <code>ll</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">drwxr-xr-x</span>   9 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 17 10<span class="selector-pseudo">:18</span> .</span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   8 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 15 09<span class="selector-pseudo">:08</span> ..</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>   1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    1771 <span class="selector-tag">Jun</span> 16 23<span class="selector-pseudo">:22</span> _<span class="selector-tag">config</span><span class="selector-class">.yml</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>   1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 1201148 <span class="selector-tag">Jun</span> 17 10<span class="selector-pseudo">:18</span> <span class="selector-tag">db</span><span class="selector-class">.json</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   8 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 17 10<span class="selector-pseudo">:31</span> <span class="selector-class">.git</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>   1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>      55 <span class="selector-tag">Jun</span> 15 09<span class="selector-pseudo">:09</span> <span class="selector-class">.gitignore</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   2 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 15 09<span class="selector-pseudo">:09</span> <span class="selector-class">.idea</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span> 411 <span class="selector-tag">root</span> <span class="selector-tag">root</span>   16384 <span class="selector-tag">Jun</span> 15 09<span class="selector-pseudo">:12</span> <span class="selector-tag">node_modules</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>   1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>     861 <span class="selector-tag">Jun</span> 16 10<span class="selector-pseudo">:55</span> <span class="selector-tag">package</span><span class="selector-class">.json</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>  13 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 17 10<span class="selector-pseudo">:18</span> <span class="selector-tag">public</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   2 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 15 09<span class="selector-pseudo">:09</span> <span class="selector-tag">scaffolds</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   7 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 15 12<span class="selector-pseudo">:51</span> <span class="selector-tag">source</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span>   6 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    4096 <span class="selector-tag">Jun</span> 15 12<span class="selector-pseudo">:51</span> <span class="selector-tag">themes</span></span><br></pre></td></tr></table></figure>
<p>解读：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意这里共有<span class="number">10</span>个位置,<span class="number">10</span>个位置又可以分为<span class="number">4</span>个部分。</span><br><span class="line">四个部分分别为 <span class="number">1.</span>类型 <span class="number">2.</span>属主权限 <span class="number">2.</span>同组用户权限 <span class="number">3</span> 其他用户权限</span><br><span class="line">第一个字符指定了文件类型。</span><br><span class="line"><span class="keyword">r</span>代表只读，<span class="keyword">w</span>代表写，<span class="keyword">x</span>代表可执行，横线代表空。</span><br><span class="line">在通常意义上，一个目录也是一个文件。</span><br><span class="line">如果第一个字符是横线，表示是一个非目录的文件。</span><br><span class="line">如果是<span class="keyword">d</span>，表示是一个目录。</span><br></pre></td></tr></table></figure></p>
<p>单个实例</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span></span><br></pre></td></tr></table></figure>
<p>详细解读(如果没有看懂建议回头看看理论说明1-3)</p>
<p><img src="http://static.xiaomo.info/images/chmod.png" alt=""></p>
<h2 id="二、命令使用说明"><a href="#二、命令使用说明" class="headerlink" title="二、命令使用说明"></a>二、命令使用说明</h2><h3 id="1-格式-参数设定"><a href="#1-格式-参数设定" class="headerlink" title="1.格式(参数设定)"></a>1.格式(参数设定)</h3><p><code>chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼</code></p>
<p>命令解读：</p>
<p>操作对象who可是下述字母中的任一个或者它们的组合：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　u 表示“用户（<span class="keyword">user</span>）”，即文件或目录的所有者。</span><br><span class="line"></span><br><span class="line">　　g 表示“同组（<span class="keyword">group</span>）用户”，即与文件属主有相同组ID的所有用户。</span><br><span class="line"></span><br><span class="line">　　o 表示“其他（others）用户”。</span><br><span class="line"></span><br><span class="line">　　a 表示“所有（<span class="literal">all</span>）用户”。它是系统默认值。</span><br></pre></td></tr></table></figure>
<p>　　操作符号可以是：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　+ 添加某个权限。</span><br><span class="line"></span><br><span class="line">　　-<span class="ruby"> 取消某个权限。</span><br><span class="line"></span></span><br><span class="line">　　=<span class="ruby"> 赋予给定权限并取消其他所有权限（如果有的话）。</span></span><br></pre></td></tr></table></figure>
<p>　　设置mode所表示的权限可用下述字母的任意组合：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">r</span> 可读。</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">w</span> 可写。</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">x</span> 可执行。</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">X</span> 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加<span class="keyword">x</span> 属性。</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">s</span> 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋<span class="keyword">s</span>”设置文件的用户ID位，“g＋<span class="keyword">s</span>”设置组ID位。</span><br><span class="line"></span><br><span class="line">　　t 保存程序的文本到交换设备上。</span><br><span class="line"></span><br><span class="line">　　u 与文件属主拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　g 与和文件属主同组的用户拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　o 与其他用户拥有一样的权限。</span><br><span class="line"></span><br><span class="line">　　文件名：以空格分开的要改变权限的文件列表，支持通配符。</span><br><span class="line"></span><br><span class="line">　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+<span class="keyword">r</span>，o+<span class="keyword">r</span> example</span><br><span class="line"></span><br><span class="line">　　使同组和其他用户对文件example 有读权限。</span><br></pre></td></tr></table></figure>
<h3 id="2-权限设置-数字"><a href="#2-权限设置-数字" class="headerlink" title="2.权限设置(数字)"></a>2.权限设置(数字)</h3><p>我们必须首先了解用数字表示的属性的含义：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0表示没有权限，</span><br><span class="line">1表示可执行权限，</span><br><span class="line">2表示可写权限，</span><br><span class="line">4表示可读权限，</span><br><span class="line">然后将其相加。所</span><br><span class="line">以数字属性的格式应为3个从0到7的八进制数，</span><br><span class="line">其顺序是（u）（g）（o）。</span><br></pre></td></tr></table></figure>
<h2 id="三、其他命令"><a href="#三、其他命令" class="headerlink" title="三、其他命令"></a>三、其他命令</h2><h3 id="1-chgrp命令"><a href="#1-chgrp命令" class="headerlink" title="1. chgrp命令"></a>1. <code>chgrp</code>命令</h3><p>功能：改变文件或目录所属的组。</p>
<p>语法：<code>chgrp ［选项］ group filename¼</code></p>
<p>该命令改变指定指定文件所属的用户组。其中<code>group</code>可以是用户组ID，也可以是<code>/etc/group</code>文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</p>
<p>该命令的各选项含义为：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>R 递归式地改变指定目录及其下的所有子目录和文件的属组。</span><br></pre></td></tr></table></figure>
<p>　　例1：<code>$ chgrp - R book /opt/local /book</code></p>
<p>　　改变<code>`/opt/local</code> <code>/book/</code>及其子目录下的所有文件的属组为<code>book</code>。</p>
<h3 id="2-chown命令"><a href="#2-chown命令" class="headerlink" title="2. chown命令"></a>2. <code>chown</code>命令</h3><p>　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。</p>
<p>　　语法：<code>chown ［选项］ 用户或组 文件</code></p>
<p>　　说明：<code>chown</code>将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。</p>
<p>　　该命令的各选项含义如下：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　-<span class="ruby"> R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。</span><br><span class="line"></span>　　-<span class="ruby"> v 显示chown命令所做的工作。</span></span><br></pre></td></tr></table></figure>
<p>　　例1：把文件<code>shiyan.c</code>的所有者改为<code>wang</code>。</p>
<p>　　$ <code>chown wang shiyan.c</code></p>
<p>　　例2：把目录/his及其下的所有文件和子目录的属主改成<code>wang</code>，属组改成<code>users</code>。</p>
<p>　　$ <code>chown - R wang.users /his</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 表格样式调整与自适应优化]]></title>
      <url>http://blog.xiaomo.info/2016/06/07/markdown-table-style/</url>
      <content type="html"><![CDATA[<p>　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/markdown.png" alt="点击访问小莫的github"></a></p>
<p></p><p data-height="300" data-theme-id="0" data-slug-hash="ONyKqb" data-default-tab="css" data-user="MOxFIVE" class="codepen">See the Pen <a href="http://codepen.io/MOxFIVE/pen/ONyKqb/" target="_blank" rel="external">Table style</a> by MOxFIVE (<a href="http://codepen.io/MOxFIVE" target="_blank" rel="external">@MOxFIVE</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h2 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><pre><code>&lt;table&gt;: 表格
&lt;thead&gt;: table header 表头区
&lt;th&gt;: table headings 表头单元格内容
&lt;tbody&gt;: table body 表格内容区
&lt;tr&gt;: table row 表行
&lt;td&gt;: table data 单元格内容
</code></pre><h3 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*表格宽度*/</span></span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">65em</span>; <span class="comment">/*表格最大宽度，避免表格过宽*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*表格外边框设置*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto; <span class="comment">/*外边距*/</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/*使用单一线条的边框*/</span></span><br><span class="line">    <span class="attribute">empty-cells</span>: show; <span class="comment">/*单元格无内容依旧绘制边框*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>; <span class="comment">/*统一每一行的默认高度*/</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*内部边框样式*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="comment">/*内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表头样式"><a href="#表头样式" class="headerlink" title="表头样式"></a>表头样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold; <span class="comment">/*加粗*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>; <span class="comment">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(158,188,226,0.2); <span class="comment">/*背景色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="隔行变色"><a href="#隔行变色" class="headerlink" title="隔行变色"></a>隔行变色</h3><ul>
<li>使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 <code>&lt;tbody&gt;</code> 包裹内容，那下面就相当于从表格第二行开始计数</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(158,188,226,0.12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="悬浮变色"><a href="#悬浮变色" class="headerlink" title="悬浮变色"></a>悬浮变色</h3><ul>
<li>鼠标悬浮时该行改变背景色</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自适应优化"><a href="#自适应优化" class="headerlink" title="自适应优化"></a>自适应优化</h2><p>表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。</p>
<h3 id="表头不换行"><a href="#表头不换行" class="headerlink" title="表头不换行"></a>表头不换行</h3><ul>
<li>设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/*表头内容强制在一行显示*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="首列不换行"><a href="#首列不换行" class="headerlink" title="首列不换行"></a>首列不换行</h3><ul>
<li>表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表格滚动条"><a href="#表格滚动条" class="headerlink" title="表格滚动条"></a>表格滚动条</h3><ul>
<li>添加 JavaScript 代码，用一个 <code>&lt;div&gt;</code> 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'table'</span>)).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    wrapper.className = <span class="string">'table-area'</span>;</span><br><span class="line">    el.parentNode.insertBefore(wrapper, el);</span><br><span class="line">    el.parentNode.removeChild(el);</span><br><span class="line">    wrapper.appendChild(el);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>jQuery</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"table"</span>).wrap(<span class="string">"&lt;div class='table-area'&gt;&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>同时添加如下 CSS</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-area</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>To be added</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gulp构建工具的使用]]></title>
      <url>http://blog.xiaomo.info/2016/06/07/gulp_use/</url>
      <content type="html"><![CDATA[<p>先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍…。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/gulp.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、简介-增强和使你的工作自动化"><a href="#一、简介-增强和使你的工作自动化" class="headerlink" title="一、简介(增强和使你的工作自动化)"></a>一、简介(增强和使你的工作自动化)</h2><h3 id="1-使用简单"><a href="#1-使用简单" class="headerlink" title="1. 使用简单"></a>1. 使用简单</h3><p>没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  </p>
<h3 id="2-高效"><a href="#2-高效" class="headerlink" title="2. 高效"></a>2. 高效</h3><p>利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  </p>
<h3 id="3-高质量"><a href="#3-高质量" class="headerlink" title="3. 高质量"></a>3. 高质量</h3><p>gulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p>
<h3 id="4-易学"><a href="#4-易学" class="headerlink" title="4. 易学"></a>4. 易学</h3><p>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p>
<h2 id="二、gulp相关api"><a href="#二、gulp相关api" class="headerlink" title="二、gulp相关api"></a>二、gulp相关api</h2><h3 id="1-gulp-src-来源"><a href="#1-gulp-src-来源" class="headerlink" title="1. gulp.src: 来源"></a>1. <code>gulp.src</code>: 来源</h3><h3 id="2-gulp-dest-目标"><a href="#2-gulp-dest-目标" class="headerlink" title="2. gulp.dest: 目标"></a>2. <code>gulp.dest</code>: 目标</h3><h3 id="3-gulp-pipe-管道"><a href="#3-gulp-pipe-管道" class="headerlink" title="3. gulp.pipe: 管道"></a>3. <code>gulp.pipe</code>: 管道</h3><h3 id="4-gulp-watch-热加载"><a href="#4-gulp-watch-热加载" class="headerlink" title="4. gulp.watch: 热加载"></a>4. <code>gulp.watch</code>: 热加载</h3><h3 id="5-gulp-task-任务"><a href="#5-gulp-task-任务" class="headerlink" title="5. gulp.task: 任务"></a>5. <code>gulp.task</code>: 任务</h3><h3 id="6-gulp-task-‘default’"><a href="#6-gulp-task-‘default’" class="headerlink" title="6. gulp.task(‘default’)"></a>6. <code>gulp.task</code>(‘default’)</h3><p> 默认任务,必须存在</p>
<h2 id="三、使用-工作流程"><a href="#三、使用-工作流程" class="headerlink" title="三、使用(工作流程)"></a>三、使用(工作流程)</h2><h3 id="1-全局安装gulp"><a href="#1-全局安装gulp" class="headerlink" title="1. 全局安装gulp"></a>1. 全局安装gulp</h3><p><code>npm install -g gulp</code>  </p>
<h3 id="2-建立项目"><a href="#2-建立项目" class="headerlink" title="2. 建立项目"></a>2. 建立项目</h3><p><code>mkdir gulp-test &amp;&amp; cd gulp-test</code></p>
<h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3. 初始化项目"></a>3. 初始化项目</h3><p><code>npm init -y</code>  (会生成package.json)   </p>
<h3 id="4-安装项目依赖"><a href="#4-安装项目依赖" class="headerlink" title="4. 安装项目依赖"></a>4. 安装项目依赖</h3><p><code>npm install --save-dev gulp</code></p>
<ol>
<li>创建配置文件<br><code>touch gulpfile.js</code><h3 id="6-gulp常用的功能"><a href="#6-gulp常用的功能" class="headerlink" title="6. gulp常用的功能"></a>6. gulp常用的功能</h3>转码（<code>gulp-babel</code> <code>babel-preset-es2015</code> <code>gulp-sass</code> <code>gulp-less</code> <code>gulp-react</code>）、合并（<code>gulp-concat</code>）、压缩（<code>gulp-uglify</code>）、模块化（<code>gulp-browserify</code>）、测试（gulp-jasmine），请依次安装这些依赖。<h3 id="7-小常识"><a href="#7-小常识" class="headerlink" title="7. 小常识"></a>7. 小常识</h3>因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用<code>cnpm</code>或者设置镜像源<code>npm config set registry https://registry.npm.taobao.org</code><h3 id="8-写配置"><a href="#8-写配置" class="headerlink" title="8. 写配置"></a>8. 写配置</h3>（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> react = <span class="built_in">require</span>(<span class="string">"gulp-react"</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">"gulp-sass"</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">"gulp-less"</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"><span class="keyword">var</span> jasmine = <span class="built_in">require</span>(<span class="string">"gulp-jasmine"</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量</span></span><br><span class="line"><span class="keyword">const</span> transformJs = <span class="string">"transformJs"</span>;</span><br><span class="line"><span class="keyword">const</span> transformSass = <span class="string">"transformSass"</span>;</span><br><span class="line"><span class="keyword">const</span> transformLess = <span class="string">"transformLess"</span>;</span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line">gulp.task(transformJs, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/*.js"</span>)</span><br><span class="line">        .pipe(react())</span><br><span class="line">        .pipe(babel(</span><br><span class="line">            &#123;</span><br><span class="line">                presets: [<span class="string">"babel-preset-es2015"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ))</span><br><span class="line">        .pipe(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// scss</span></span><br><span class="line">gulp.task(transformSass, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.scss"</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// less</span></span><br><span class="line">gulp.task(transformLess, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/css/*.less"</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jasmine</span></span><br><span class="line">gulp.task(test, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./test/*.js"</span>)</span><br><span class="line">        .pipe(jasmine())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, [transformJs, transformSass, transformLess, test]);</span><br></pre></td></tr></table></figure>
<h2 id="四、配置文件解读"><a href="#四、配置文件解读" class="headerlink" title="四、配置文件解读"></a>四、配置文件解读</h2><h3 id="1-第一部分"><a href="#1-第一部分" class="headerlink" title="1. 第一部分"></a>1. 第一部分</h3><p>一堆<code>reqire</code>,是引用gulp相应的插件。在引用之前要确保己经安装。</p>
<h3 id="2-第二部分"><a href="#2-第二部分" class="headerlink" title="2. 第二部分"></a>2. 第二部分</h3><p>几个<code>const</code>,是定义任务名常量，有多几任务就定义多少常量。</p>
<h3 id="3-第三部分"><a href="#3-第三部分" class="headerlink" title="3. 第三部分"></a>3. 第三部分</h3><p>几个<code>task</code>,每个task对应一个任务，具有不同的功能。可以使用 <code>gulp xxx</code>来启动这个任务。</p>
<h3 id="4-第四部分"><a href="#4-第四部分" class="headerlink" title="4. 第四部分"></a>4. 第四部分</h3><p><code>default</code>,是执行<code>gulp</code>之后就会开始的任务 常用参数(<code>&#39;default&#39;,[task1,task2,...],callback[可选]</code>)。</p>
<h2 id="五、执行"><a href="#五、执行" class="headerlink" title="五、执行"></a>五、执行</h2><ol>
<li>如果要执行<code>default</code>任务，直接<code>gulp</code></li>
</ol>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">09:56:04</span>] Using gulpfile e:\oscchina\gulp-start-kit\gulpfile.js</span><br><span class="line">[<span class="name">09:56:04</span>] Starting <span class="symbol">'transformJs</span><span class="symbol">'...</span></span><br><span class="line">[<span class="name">09:56:04</span>] Starting <span class="symbol">'transformSass</span><span class="symbol">'...</span></span><br><span class="line">[<span class="name">09:56:04</span>] Starting <span class="symbol">'transformLess</span><span class="symbol">'...</span></span><br><span class="line">[<span class="name">09:56:04</span>] Starting <span class="symbol">'test</span><span class="symbol">'...</span></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> spec, <span class="number">0</span> failures</span><br><span class="line">Finished in <span class="number">0</span> seconds</span><br><span class="line">[<span class="name">09:56:04</span>] Finished <span class="symbol">'test</span>' after <span class="number">62</span> ms</span><br><span class="line">[<span class="name">09:56:06</span>] Finished <span class="symbol">'transformLess</span>' after <span class="number">2.66</span> s</span><br><span class="line">[<span class="name">09:56:06</span>] Finished <span class="symbol">'transformSass</span>' after <span class="number">2.68</span> s</span><br><span class="line">[<span class="name">09:56:06</span>] Finished <span class="symbol">'transformJs</span>' after <span class="number">2.7</span> s</span><br><span class="line">[<span class="name">09:56:06</span>] Finished <span class="symbol">'default</span>' after <span class="number">32</span> μs</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ol>
<li>如果想要执行单个任务，请输入 <code>gulp taskName</code>,例如<code>gulp test</code></li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[09:56:47] Using gulpfile e:\oscchina\gulp-<span class="keyword">start</span>-kit\gulpfile.js</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">47</span>] <span class="keyword">Starting</span> <span class="string">'test'</span>...</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> spec, <span class="number">0</span> failures</span><br><span class="line">Finished <span class="keyword">in</span> <span class="number">0</span> seconds</span><br><span class="line">[<span class="number">09</span>:<span class="number">56</span>:<span class="number">47</span>] Finished <span class="string">'test'</span> <span class="keyword">after</span> <span class="number">77</span> ms</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="六、gulp常见任务"><a href="#六、gulp常见任务" class="headerlink" title="六、gulp常见任务"></a>六、gulp常见任务</h2><h3 id="1-处理js"><a href="#1-处理js" class="headerlink" title="1. 处理js"></a>1. 处理js</h3><p>（包括转码、合并、压缩）  <a href="https://npm.taobao.org/package/gulp-babel" target="_blank" rel="external">gulp-babel</a> <a href="https://npm.taobao.org/package/babel-preset-es2015" target="_blank" rel="external">babel-preset-es2015</a> <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="external">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="external">gulp-uglify</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(transformJs, function () &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">"src/*.js"</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(react())</span><br><span class="line">      <span class="selector-class">.pipe</span>(babel(</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attribute">presets</span>: [<span class="string">"babel-preset-es2015"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">      ))</span><br><span class="line">      <span class="selector-class">.pipe</span>(concat(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(uglify())</span><br><span class="line">      <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-处理scss"><a href="#2-处理scss" class="headerlink" title="2. 处理scss"></a>2. 处理scss</h3><p>(包括转码、合并、压缩)  <a href="https://npm.taobao.org/package/gulp-sass" target="_blank" rel="external">gulp-sass</a>  <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="external">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="external">gulp-uglify</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scss</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(transformSass, function () &#123;</span><br><span class="line">    return gulp<span class="selector-class">.src</span>(<span class="string">"src/css/*.scss"</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(sass())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-处理less"><a href="#3-处理less" class="headerlink" title="3. 处理less"></a>3. 处理less</h3><p>(包括转码、合并、压缩)  <a href="https://npm.taobao.org/package/gulp-less" target="_blank" rel="external">gulp-less</a>  <a href="https://npm.taobao.org/package/gulp-concat" target="_blank" rel="external">gulp-concat</a> <a href="https://npm.taobao.org/package/gulp-uglify" target="_blank" rel="external">gulp-uglify</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(transformLess, function () &#123;</span><br><span class="line">  return gulp<span class="selector-class">.src</span>(<span class="string">"src/css/*.less"</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(less())</span><br><span class="line">      <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">"./dist"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p><a href="https://npm.taobao.org/package/gulp-jasmine" target="_blank" rel="external">gulp-jasmine</a>  </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jasmine</span></span><br><span class="line">gulp.task(test, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./test/*.js"</span>)</span><br><span class="line">        .pipe(jasmine())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试文件 test.spec.js</span></span><br><span class="line">describe(<span class="string">'test one'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    it(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-清理"><a href="#5-清理" class="headerlink" title="5. 清理"></a>5. 清理</h3><p> <a href="https://npm.taobao.org/package/gulp-clean" target="_blank" rel="external">gulp-clean</a></p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="keyword">task</span>(<span class="symbol">'clean</span>', <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">gulp.src(config.dist</span> + '/*', &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">      .pipe(clean());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="6-热加载"><a href="#6-热加载" class="headerlink" title="6. 热加载"></a>6. 热加载</h3><p>  <a href="https://npm.taobao.org/package/gulp-util" target="_blank" rel="external">gulp-util</a> <a href="https://npm.taobao.org/package/gulp-watch" target="_blank" rel="external">gulp-watch</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="keyword">require</span>(<span class="string">'gulp-util'</span>);</span><br><span class="line"><span class="keyword">var</span> watch = <span class="keyword">require</span>(<span class="string">'gulp-watch'</span>);</span><br><span class="line"><span class="keyword">var</span> config = &#123;&#125;;</span><br><span class="line">config.dist = <span class="string">'dist'</span>;</span><br><span class="line">config.<span class="keyword">static</span> = [</span><br><span class="line">  <span class="string">'bin/**/*'</span>,</span><br><span class="line">  <span class="string">'package.json'</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// sync static resource in production mode</span></span><br><span class="line">gulp.task(<span class="string">'static-sync'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(config.<span class="keyword">static</span>, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">      .pipe(gulp.dest(config.dist));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'static-sync:dev'</span>, [<span class="string">'static-sync'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  util.log(<span class="string">'[Sync] starting file watch'</span>);</span><br><span class="line">  <span class="keyword">return</span> watch(config.<span class="keyword">static</span>, <span class="function"><span class="keyword">function</span> <span class="params">(obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.event === <span class="string">'change'</span> || obj.event === <span class="string">'add'</span>)</span><br><span class="line">      <span class="keyword">return</span> gulp.src(obj.path, &#123;base: <span class="string">'./'</span>&#125;)</span><br><span class="line">          .pipe(gulp.dest(config.dist))</span><br><span class="line">          .pipe(<span class="keyword">print</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[Sync] file sync success: '</span> + obj.path.replace(obj.base, <span class="string">''</span>);</span><br><span class="line">          &#125;));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj.event === <span class="string">'unlink'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> distFilePath = obj.path.replace(__dirname, __dirname + <span class="string">'/'</span> + config.dist);</span><br><span class="line">      <span class="keyword">return</span> gulp.src(distFilePath)</span><br><span class="line">          .pipe(clean())</span><br><span class="line">          .pipe(<span class="keyword">print</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'[Sync] file remove success: '</span> + obj.path.replace(obj.base, <span class="string">''</span>);</span><br><span class="line">          &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="7-debug"><a href="#7-debug" class="headerlink" title="7. debug"></a>7. debug</h3><p> <a href="https://npm.taobao.org/package/gulp-print" target="_blank" rel="external">gulp-print</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载</span></span><br><span class="line">npm install gulp-<span class="keyword">print</span></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">print</span> = <span class="keyword">require</span>(<span class="string">'gulp-print'</span>);</span><br><span class="line"><span class="comment">// 注册任务</span></span><br><span class="line">gulp.task(<span class="string">'print'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'test/*.js'</span>)</span><br><span class="line">    .pipe(<span class="keyword">print</span>())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="8-sourceMap"><a href="#8-sourceMap" class="headerlink" title="8. sourceMap"></a>8. sourceMap</h3><p>  <a href="https://npm.taobao.org/package/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var sourcemaps = require(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="comment">// compile server script in production mode</span></span><br><span class="line">gulp.task(<span class="string">'compile:server'</span>, function () &#123;</span><br><span class="line">  <span class="keyword">if</span> (config.babel.sourceMaps)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(babel(config.babel))</span><br><span class="line">        .pipe(sourcemaps.write('.', &#123;sourceRoot: '/ustar'&#125;))</span><br><span class="line">        .pipe(gulp.dest(config.dist));</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">          preset:'babel-preset-es2015'</span><br><span class="line">          &#125;))</span><br><span class="line">        .pipe(gulp.dest('./dist'));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="9-复制静态资源"><a href="#9-复制静态资源" class="headerlink" title="9. 复制静态资源"></a>9. 复制静态资源</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'static-sync'</span>, function () &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/css/*'</span>, &#123;<span class="attribute">base</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="10-处理css雪碧图"><a href="#10-处理css雪碧图" class="headerlink" title="10. 处理css雪碧图"></a>10. 处理css雪碧图</h3><p> <a href="https://npm.taobao.org/package/gulp-css-spriter" target="_blank" rel="external">gulp-css-spriter</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> spriter = <span class="built_in">require</span>(<span class="string">'gulp-css-spriter'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/styles.css'</span>)</span><br><span class="line">      .pipe(spriter(&#123;</span><br><span class="line">          <span class="comment">// The path and file name of where we will save the sprite sheet</span></span><br><span class="line">          <span class="string">'spriteSheet'</span>: <span class="string">'./dist/images/spritesheet.png'</span>,</span><br><span class="line">          <span class="comment">// Because we don't know where you will end up saving the CSS file at this point in the pipe,</span></span><br><span class="line">          <span class="comment">// we need a litle help identifying where it will be.</span></span><br><span class="line">          <span class="string">'pathToSpriteSheetFromCSS'</span>: <span class="string">'../images/spritesheet.png'</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="11-压缩css"><a href="#11-压缩css" class="headerlink" title="11. 压缩css"></a>11. 压缩css</h3><p><a href="https://npm.taobao.org/package/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(gulp_minify_css,function () &#123;</span><br><span class="line">   return gulp<span class="selector-class">.src</span>(<span class="string">'./dist/*.css'</span>)</span><br><span class="line">       <span class="selector-class">.pipe</span>(print())</span><br><span class="line">       <span class="selector-class">.pipe</span>(minifycss())</span><br><span class="line">       <span class="selector-class">.pipe</span>(gulp.dest(config.dist))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="12-压缩图片"><a href="#12-压缩图片" class="headerlink" title="12. 压缩图片"></a>12. 压缩图片</h3><p><a href="https://npm.taobao.org/package/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">  <span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'img'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/images/*'</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(imagemin(&#123;</span><br><span class="line">          <span class="attribute">progressive</span>: true,</span><br><span class="line">          <span class="attribute">svgoPlugins</span>: [&#123;<span class="attribute">removeViewBox</span>: false&#125;],</span><br><span class="line">          <span class="attribute">use</span>: [pngcrush()]</span><br><span class="line">      &#125;))</span><br><span class="line">      <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'./dest/images/'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(notify(&#123; <span class="attribute">message</span>: <span class="string">'img task ok'</span> &#125;));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="13-检查js"><a href="#13-检查js" class="headerlink" title="13. 检查js"></a>13. 检查js</h3><p>  <a href="https://npm.taobao.org/package/gulp-jshint" target="_blank" rel="external">gulp-jshint</a>  <a href="https://npm.taobao.org/package/jshint" target="_blank" rel="external">gulp-jshint</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查js</span></span><br><span class="line">  <span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'lint'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">      <span class="selector-class">.pipe</span>(jshint())</span><br><span class="line">      <span class="selector-class">.pipe</span>(jshint.reporter(<span class="string">'default'</span>))</span><br><span class="line">      <span class="selector-class">.pipe</span>(notify(&#123; <span class="attribute">message</span>: <span class="string">'lint task ok'</span> &#125;));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="14-gzip压缩"><a href="#14-gzip压缩" class="headerlink" title="14. gzip压缩"></a>14. gzip压缩</h3><p> <a href="https://npm.taobao.org/package/gulp-gzip" target="_blank" rel="external">gulp-gzip</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> gzip = <span class="built_in">require</span>(<span class="string">'gulp-gzip'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./dev/scripts/*.js'</span>)</span><br><span class="line">    .pipe(gzip())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/scripts'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="15-处理前缀"><a href="#15-处理前缀" class="headerlink" title="15. 处理前缀"></a>15. 处理前缀</h3><p><a href="https://npm.taobao.org/package/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="keyword">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span><br><span class="line">  return gulp.src('src/app.css')</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">      .pipe(autoprefixer(&#123;</span><br><span class="line">          browsers: ['last 2 versions'],</span><br><span class="line">          cascade: false</span><br><span class="line">      &#125;</span>))</span><br><span class="line">      .<span class="title">pipe</span><span class="params">(<span class="keyword">concat</span>(<span class="string">'all.css'</span>)</span>)</span><br><span class="line">      .<span class="title">pipe</span><span class="params">(sourcemaps.<span class="keyword">write</span>(<span class="string">'.'</span>,&#123;sourceRoot:config.dist&#125;)</span>)</span><br><span class="line">      .<span class="title">pipe</span><span class="params">(gulp.dest(<span class="string">'dist'</span>)</span>);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="七、项目地址"><a href="#七、项目地址" class="headerlink" title="七、项目地址"></a>七、项目地址</h2><p><a href="https://github.com/qq83387856/gulp-start-kit" target="_blank" rel="external">gulp-start-kit</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端工程化工具初选]]></title>
      <url>http://blog.xiaomo.info/2016/06/05/front-end-tools/</url>
      <content type="html"><![CDATA[<p>　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="库与框架"><a href="#库与框架" class="headerlink" title="库与框架"></a>库与框架</h2><p>&gt;</p>
<ul>
<li><a href="http://jquery.com/" target="_blank" rel="external">jQuery</a></li>
<li><a href="http://jqueryui.com/" target="_blank" rel="external">jQuery UI</a>: 一个JQuery的UI框架,特点是高效、组件化</li>
<li><a href="http://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a>: 数据驱动的组件，为现代化的 Web 界面而生</li>
<li><a href="http://www.apjs.net/" target="_blank" rel="external">angularjs</a> 应用最广泛的企业级web开发框架</li>
<li><a href="https://angular.io/" target="_blank" rel="external">angular</a>: 新一代angular开发框架</li>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">React.js</a>: 构建组化件应用的javascript库</li>
<li><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>: 使用react构建移动app应用</li>
</ul>
<h2 id="构建工具-amp-模块化"><a href="#构建工具-amp-模块化" class="headerlink" title="构建工具&amp;模块化"></a>构建工具&amp;模块化</h2><p>一个构建、测试应用的构建工具</p>
<p>&gt;</p>
<ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">gulp.js</a>: 自动化工作流</li>
<li><a href="https://nodejs.org/" target="_blank" rel="external">node</a> 建立在V8引擎上的快速构建平台</li>
</ul>
<h2 id="模块打包器"><a href="#模块打包器" class="headerlink" title="模块打包器"></a>模块打包器</h2><p>将模块打包到一个bundle中</p>
<p>&gt;</p>
<ul>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>: 能够将依赖打包、生成的自动构建工具</li>
</ul>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具</p>
<p>&gt;</p>
<ul>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>: Node 模块化管理工具</li>
</ul>
<h2 id="CSS-处理"><a href="#CSS-处理" class="headerlink" title="CSS 处理"></a>CSS 处理</h2><p>提供一个高效、动态的方法生成css</p>
<p>&gt;</p>
<ul>
<li><a href="https://github.com/stylus/stylus" target="_blank" rel="external">Stylus</a>: node社区的css预处理器</li>
<li><a href="https://github.com/postcss/postcss" target="_blank" rel="external">PostCSS</a>: 将css转换成js插件</li>
</ul>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>&gt;</p>
<ul>
<li><a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="external">ECMAScript 6 Module</a></li>
</ul>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>使用js生成html文件</p>
<p>&gt;</p>
<ul>
<li><a href="http://ejs.co/" target="_blank" rel="external">EJS</a></li>
<li><a href="http://jade-lang.com/" target="_blank" rel="external">jade</a></li>
</ul>
<h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h2><p>&gt;</p>
<ul>
<li><a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a>: 一个简单、快速的用来测试node和web应用的测试框架</li>
<li><a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>: Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。</li>
</ul>
<h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>&gt;</p>
<ul>
<li><a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a> Web 应用开发流程与工具   </li>
<li><a href="https://npm.taobao.org/package/koa-generator" target="_blank" rel="external">koa-generator</a> koa项目生成器         </li>
</ul>
<h2 id="集成方案"><a href="#集成方案" class="headerlink" title="集成方案"></a>集成方案</h2><p>&gt;</p>
<ul>
<li><a href="http://fis.baidu.com/" target="_blank" rel="external">FIS</a>: 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题</li>
</ul>
<h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><p>&gt;</p>
<ul>
<li><a href="http://bootcss.com/" target="_blank" rel="external">bootstrap</a> 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。</li>
<li><a href="http://foundation.zurb.com/" target="_blank" rel="external">foundation</a> 最流行的响应式前前端布局框架</li>
<li><a href="http://www.semantic-ui.cn/" target="_blank" rel="external">semantic-ui</a> Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。</li>
<li><a href="http://callemall.github.io/material-ui/#/" target="_blank" rel="external">Material UI</a>  一组反应元件，实现谷歌的材料设计。</li>
<li><a href="http://ant.design/" target="_blank" rel="external">ant design</a> Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。</li>
</ul>
<h2 id="游戏引擎"><a href="#游戏引擎" class="headerlink" title="游戏引擎"></a>游戏引擎</h2><p>&gt;</p>
<ul>
<li><a href="http://createjs.com/" target="_blank" rel="external">CreateJS</a>  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。</li>
<li><a href="http://phaser.io/" target="_blank" rel="external">PhaserJS</a>  PC端和移动端HTML5游戏框架 。</li>
<li><a href="http://threejs.org/" target="_blank" rel="external">ThreeJS</a> 制作HTML5的3D游戏引擎 。</li>
<li><a href="http://www.egret.com/" target="_blank" rel="external">白鹭</a> Egret是一套HTML5游戏开发解决方案</li>
<li><a href="http://www.cocos.com/" target="_blank" rel="external">Cocos2d-JS</a> 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote>
<ul>
<li><a href="http://www.docker.com/" target="_blank" rel="external">Docker</a>: Build, Ship, and Run Any App, Anywhere</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><p>&gt;</p>
<ul>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a> 技术大牛多，素质好，质量高</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">segmentfault</a> 自动生成目录，博客UI看起来相对漂亮</li>
<li><a href="http://www.oschina.net/" target="_blank" rel="external">开源中国</a> 支持开源文化</li>
</ul>
<h2 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h2><p>&gt;</p>
<ul>
<li><a href="http://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a>  学习资源多</li>
<li><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a>  质量高，全免费  </li>
<li><a href="http://www.huachuanxueyuan.com/" target="_blank" rel="external">花川学院</a> 学习swift的好去处</li>
<li><a href="http://www.maiziedu.com/" target="_blank" rel="external">麦子学院</a> 后起之秀</li>
<li><a href="http://www.runoob.com/" target="_blank" rel="external">W3C菜鸟</a> 新手程序员的天堂</li>
<li><a href="http://www.yun.lu/student/homepage" target="_blank" rel="external">云路课堂</a> 极客风</li>
<li><a href="http://www.mengma.com/" target="_blank" rel="external">码萌</a> 编程从来简单有趣</li>
</ul>
<h2 id="其他常用网站"><a href="#其他常用网站" class="headerlink" title="其他常用网站"></a>其他常用网站</h2><p>&gt;</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="external">github</a> 程序员的QQ,面试的门面</li>
<li><a href="https://git.oschina.net" target="_blank" rel="external">码云</a> 和马云同名，给个面子</li>
<li><a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝同步npm</a> 访问快，10分钟同步一次，查资料必备</li>
<li><a href="http://www.bootcdn.cn/" target="_blank" rel="external">bootCDN</a> 使用最普遍的CDN</li>
<li><a href="http://fontawesome.dashgame.com/" target="_blank" rel="external">font-awesome</a> 最好用的图标库</li>
<li><a href="http://json.cn/#" target="_blank" rel="external">JSON格式化</a>  这个时代的开发者谁离得了JSON呢</li>
<li><a href="http://fenav.com/#/p11" target="_blank" rel="external">开发工具</a> 全面省心</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Anki 记忆库之 Excel 快捷键大全]]></title>
      <url>http://blog.xiaomo.info/2016/06/04/anki-excel-shortcuts/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。<p></p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="记忆库使用"><a href="#记忆库使用" class="headerlink" title="记忆库使用"></a>记忆库使用</h2><p>所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。</p>
<blockquote>
<p>下载: <a href="/resources/Excel-Shortcut-keys.apkg">Excel 快捷键大全 (Windows) for Anki</a></p>
</blockquote>
<p>释义默认中英对照显示，可按需隐藏。<br><img src="http://moxfive.xyz/resources/Anki-a1.png" alt="Anki-a1"></p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>列出自己平时使用最频繁的10个 Excel 快捷键。</p>
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>快捷键</th>
<th>　　　　说明　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>CTRL+D</td>
<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>CTRL+ENTER</td>
<td>使用当前输入的条目填充选定的单元格区域。</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>F2</td>
<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>CTRL+1</td>
<td>显示“单元格格式”对话框。</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>CTRL+SHIFT+~</td>
<td>应用“常规”数字格式。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>CTRL+G</td>
<td>显示“定位”对话框。</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>CTRL+`</td>
<td>在工作表中切换显示单元格值和公式。</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td>CTRL+’</td>
<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td>F4</td>
<td>重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td>ALT+ENTER</td>
<td>在同一单元格中另起一个新行。</td>
</tr>
</tbody>
</table>
<h2 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h2><h3 id="Ctrl-组合快捷键"><a href="#Ctrl-组合快捷键" class="headerlink" title="Ctrl 组合快捷键"></a>Ctrl 组合快捷键</h3><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>快捷键</th>
<th>　　　　说明　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>CTRL+PgUp</td>
<td>向左切换工作表</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>CTRL+PgDn</td>
<td>向右切换工作表</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>CTRL+SHIFT+&amp;</td>
<td>将外框应用于选定单元格。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>CTRL+SHIFT_</td>
<td>从选定单元格删除外框。</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>CTRL+SHIFT+~</td>
<td>应用“常规”数字格式。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>CTRL+SHIFT+$</td>
<td>应用带有两位小数的“货币”格式（负数放在括号中）。</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>CTRL+SHIFT+%</td>
<td>应用不带小数位的“百分比”格式。</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td>CTRL+SHIFT+^</td>
<td>应用带有两位小数的“指数”格式。</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td>CTRL+SHIFT+#</td>
<td>应用带有日、月和年的“日期”格式。</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td>CTRL+SHIFT+@</td>
<td>应用带有小时和分钟以及 AM 或 PM 的“时间”格式。</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td>CTRL+SHIFT+!</td>
<td>应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td>CTRL+SHIFT+*</td>
<td>选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td>CTRL+SHIFT+:</td>
<td>输入当前时间。</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td>CTRL+SHIFT+”</td>
<td>将值从活动单元格上方的单元格复制到单元格或编辑栏中。</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td>CTRL+SHIFT+Plus (+)</td>
<td>显示用于插入空白单元格的“插入”对话框。</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td>CTRL+Minus (-)</td>
<td>显示用于删除选定单元格的“删除”对话框。</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td>CTRL+;</td>
<td>输入当前日期。</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td>CTRL+`</td>
<td>在工作表中切换显示单元格值和公式。</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td>CTRL+’</td>
<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td>CTRL+1</td>
<td>显示“单元格格式”对话框。</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td>CTRL+2</td>
<td>应用或取消加粗格式设置。</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td>CTRL+3</td>
<td>应用或取消倾斜格式设置。</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td>CTRL+4</td>
<td>应用或取消下划线。</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td>CTRL+5</td>
<td>应用或取消删除线。</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td>CTRL+6</td>
<td>在隐藏对象、显示对象和显示对象占位符之间切换。</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td>CTRL+8</td>
<td>显示或隐藏大纲符号。</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td>CTRL+9</td>
<td>隐藏选定的行。</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td>CTRL+0</td>
<td>隐藏选定的列。</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td>CTRL+A</td>
<td>☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td>CTRL+B</td>
<td>应用或取消加粗格式设置。</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td>CTRL+C</td>
<td>复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td>CTRL+D</td>
<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td>CTRL+F</td>
<td>显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。</td>
</tr>
<tr>
<td style="text-align:center">34</td>
<td>SHIFT+F4</td>
<td>重复上一次“查找”操作。</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td>CTRL+SHIFT+F<br>CTRL+SHIFT+P</td>
<td>打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。</td>
</tr>
<tr>
<td style="text-align:center">36</td>
<td>CTRL+G<br>F5</td>
<td>显示“定位”对话框。</td>
</tr>
<tr>
<td style="text-align:center">37</td>
<td>CTRL+H</td>
<td>显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。</td>
</tr>
<tr>
<td style="text-align:center">38</td>
<td>CTRL+I</td>
<td>应用或取消倾斜格式设置。</td>
</tr>
<tr>
<td style="text-align:center">39</td>
<td>CTRL+K</td>
<td>为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td>CTRL+N</td>
<td>创建一个新的空白工作簿。</td>
</tr>
<tr>
<td style="text-align:center">41</td>
<td>CTRL+O</td>
<td>显示“打开”对话框以打开或查找文件。</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td>CTRL+SHIFT+O</td>
<td>选择所有包含批注的单元格。</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td>CTRL+P</td>
<td>显示“打印”对话框。</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td>CTRL+R</td>
<td>使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td>CTRL+S</td>
<td>使用其当前文件名、位置和文件格式保存活动文件。</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td>CTRL+T</td>
<td>显示“创建表”对话框。</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td>CTRL+U</td>
<td>应用或取消下划线。</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td>CTRL+SHIFT+U</td>
<td>在展开和折叠编辑栏之间切换。</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td>CTRL+V</td>
<td>在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td>CTRL+ALT+V</td>
<td>显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td>CTRL+W</td>
<td>关闭选定的工作簿窗口。</td>
</tr>
<tr>
<td style="text-align:center">52</td>
<td>CTRL+X</td>
<td>剪切选定的单元格。</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td>CTRL+Y</td>
<td>重复上一个命令或操作（如有可能）。</td>
</tr>
<tr>
<td style="text-align:center">54</td>
<td>CTRL+Z</td>
<td>使用“撤消”命令来撤消上一个命令或删除最后键入的内容。</td>
</tr>
<tr>
<td style="text-align:center">55</td>
<td>CTRL+SHIFT+Z</td>
<td>显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。</td>
</tr>
</tbody>
</table>
<h3 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h3><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>快捷键</th>
<th>　　　　说明　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>F1</td>
<td>显示“Microsoft Office Excel 帮助”任务窗格。</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>ALT+F1</td>
<td>创建当前范围中数据的图表。</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>ALT+SHIFT+F1</td>
<td>插入新的工作表。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>F2</td>
<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>SHIFT+F2</td>
<td>添加或编辑单元格批注。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>CTRL+F2</td>
<td>显示“打印预览”窗口。</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>F3</td>
<td>显示“粘贴名称”对话框。</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td>SHIFT+F3</td>
<td>显示“插入函数”对话框。</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td>F4</td>
<td>“重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换”</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td>Ctrl+F4</td>
<td>关闭选定的工作簿窗口。</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td>Ctrl+F5</td>
<td>从最大化中恢复选定工作簿窗口的窗口大小。</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td>F6</td>
<td>在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td>SHIFT+F6</td>
<td>在工作表、缩放控件、任务窗格和功能区之间切换。</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td>CTRL+F6</td>
<td>如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td>F7</td>
<td>显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td>CTRL+F7</td>
<td>如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td>F8</td>
<td>打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td>SHIFT+F8</td>
<td>使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td>CTRL+F8</td>
<td>当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td>ALT+F8</td>
<td>显示用于创建、运行、编辑或删除宏的“宏”对话框。</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td>F9</td>
<td>计算所有打开的工作簿中的所有工作表。</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td>SHIFT+F9</td>
<td>按 Shift+F9 可计算活动工作表。</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td>CTRL+ALT+F9</td>
<td>计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td>CTRL+ALT+SHIFT+F9</td>
<td>重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td>CTRL+F9</td>
<td>将工作簿窗口最小化为图标。</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td>F10</td>
<td>“打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。”</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td>SHIFT+F10</td>
<td>按 Shift+F10 可显示选定项目的快捷菜单。</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td>ALT+SHIFT+F10</td>
<td>显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td>CTRL+F10</td>
<td>最大化或还原选定的工作簿窗口。</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td>F11</td>
<td>创建当前范围内数据的图表。</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td>SHIFT+F11</td>
<td>按 Shift+F11 可插入一个新工作表。</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td>ALT+F11</td>
<td>打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td>F12</td>
<td>显示“另存为”对话框。</td>
</tr>
</tbody>
</table>
<h3 id="其他实用快捷键"><a href="#其他实用快捷键" class="headerlink" title="其他实用快捷键"></a>其他实用快捷键</h3><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>快捷键</th>
<th>　　　　说明　　　　</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>ARROW KEYS</td>
<td>在工作表中上移、下移、左移或右移一个单元格。</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>CTRL+ARROW KEY</td>
<td>移动到工作表中当前数据区域的边缘。</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>SHIFT+ARROW KEY</td>
<td>将单元格的选定范围扩大一个单元格。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>CTRL+SHIFT+ARROW KEY</td>
<td>按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>BACKSPACE</td>
<td>在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>DELETE</td>
<td>从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>END</td>
<td>当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td>CTRL+END</td>
<td>移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td>CTRL+SHIFT+END</td>
<td>按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td>ENTER</td>
<td>从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td>ALT+ENTER</td>
<td>在同一单元格中另起一个新行。</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td>CTRL+ENTER</td>
<td>使用当前输入的条目填充选定的单元格区域。</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td>SHIFT+ENTER</td>
<td>完成单元格输入并选择上面的单元格。</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td>ESC</td>
<td>取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td>HOME</td>
<td>移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td>CTRL+HOME</td>
<td>移到工作表的开头。</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td>CTRL+SHIFT+HOME</td>
<td>将单元格的选定范围扩展到工作表的开头。</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td>PAGE DOWN</td>
<td>在工作表中下移一个屏幕。</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td>ALT+PAGE DOWN</td>
<td>在工作表中向右移动一个屏幕。</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td>CTRL+SHIFT+PAGE DOWN</td>
<td>选择工作簿中的当前和下一个工作表。</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td>PAGE UP</td>
<td>在工作表中上移一个屏幕。</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td>ALT+PAGE UP</td>
<td>在工作表中向左移动一个屏幕。</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td>CTRL+SHIFT+PAGE UP</td>
<td>选择工作簿中的当前和上一个工作表。</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td>SPACEBAR</td>
<td>在对话框中，执行选定按钮的操作，或者选中或清除复选框。</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td>CTRL+SPACEBAR</td>
<td>选择工作表中的整列。</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td>SHIFT+SPACEBAR</td>
<td>选择工作表中的整行。</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td>CTRL+SHIFT+SPACEBAR</td>
<td>按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td>ALT+SPACEBAR</td>
<td>显示 Microsoft Office Excel 窗口的“控制”菜单。</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td>TAB</td>
<td>在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td>SHIFT+TAB</td>
<td>移到前一个单元格（在工作表中）或前一个选项（在对话框中）。</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td>CTRL+TAB</td>
<td>在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td>CTRL+SHIFT+TAB</td>
<td>在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。</td>
</tr>
</tbody>
</table>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li>微软 Office 帮助中心: <a href="https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN" target="_blank" rel="external">Excel 快捷键和功能键</a></li>
<li>Microsoft Office Support: <a href="https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f" target="_blank" rel="external">Excel shortcut and function keys</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS font-family 网页字体使用小结]]></title>
      <url>http://blog.xiaomo.info/2016/06/03/css-font-family/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。<p></p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: 字体名1, 字体名2, 字体名<span class="selector-tag">n</span>, 字体系列名;</span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Verdana</span>, <span class="selector-tag">Helvetica</span>, "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", <span class="selector-tag">Arial</span>;</span><br></pre></td></tr></table></figure>
<h3 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h3><blockquote>
<ol>
<li>系统将选择列表中最先可用的字体来显示文字;</li>
<li>因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;</li>
<li>因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;</li>
<li>字体名为中文或包含空格等时，需要加双引号””才能正确识别;</li>
<li>中文字体建议也是用其对应英文字体名，如”微软雅黑”为”Microsoft YaHei”，以提高编码兼容性。</li>
</ol>
</blockquote>
<h2 id="常见字体系列"><a href="#常见字体系列" class="headerlink" title="常见字体系列"></a>常见字体系列</h2><h3 id="Serif-衬线字体"><a href="#Serif-衬线字体" class="headerlink" title="Serif 衬线字体"></a>Serif 衬线字体</h3><ul>
<li>Times New Roman, Georgia 和宋体都是很常见的衬线字体；</li>
<li>特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。</li>
</ul>
<p><img src="http://moxfive.xyz/resources/serif.png" alt="serif"></p>
<h3 id="Sans-serif-无衬线字体"><a href="#Sans-serif-无衬线字体" class="headerlink" title="Sans-serif 无衬线字体"></a>Sans-serif 无衬线字体</h3><ul>
<li>Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;</li>
<li>说明: <code>sans-</code>源于法语前缀，意思为<code>没有</code>。Sans-serif 也就是指无衬线字体。</li>
<li>特征: 字体比较圆滑，笔划较为均匀。</li>
</ul>
<p><img src="http://moxfive.xyz/resources/sans-serif.png" alt="sans-serif"></p>
<ul>
<li>字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。</li>
</ul>
<h3 id="Monospace-等宽字体"><a href="#Monospace-等宽字体" class="headerlink" title="Monospace 等宽字体"></a>Monospace 等宽字体</h3><ul>
<li>Courier New, Consolas, Menlo 都是比较常见的等宽字体;</li>
<li>特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。</li>
</ul>
<p><img src="http://moxfive.xyz/resources/Monospace.png" alt="Monospace"></p>
<ul>
<li>一个优秀的代码字体除了等宽外，还应该能较好地区分出<code>0 o O i l 1 I &quot;&quot; &#39;&#39; [] () {}</code> 等字符。</li>
</ul>
<h3 id="Cursive-手写体"><a href="#Cursive-手写体" class="headerlink" title="Cursive 手写体"></a>Cursive 手写体</h3><ul>
<li>Comic Sans, Author, 华文行楷都是比较常见的仿手写体;</li>
<li>特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。</li>
</ul>
<p><img src="http://moxfive.xyz/resources/cursive.png" alt="cursive"></p>
<h2 id="获取字体名称"><a href="#获取字体名称" class="headerlink" title="获取字体名称"></a>获取字体名称</h2><p>同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。</p>
<h3 id="本地字体"><a href="#本地字体" class="headerlink" title="本地字体"></a>本地字体</h3><ul>
<li>Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;</li>
<li>通过软件，如记事本、Office 等也可以查看字体名字:</li>
</ul>
<p><img src="http://moxfive.xyz/resources/font-a1.png" alt="font-a1"></p>
<ul>
<li>Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:</li>
</ul>
<p><img src="http://moxfive.xyz/resources/font-a2.png" alt="font-a2"></p>
<h3 id="网页字体"><a href="#网页字体" class="headerlink" title="网页字体"></a>网页字体</h3><ul>
<li>审查元素，查看生效的 font-family:</li>
</ul>
<p><img src="http://moxfive.xyz/resources/font-a3.png" alt="font-a3"></p>
<ul>
<li>通过 Chrome 插件 <a href="http://chengyinliu.com/whatfont.html" target="_blank" rel="external">WhatFont</a>:</li>
</ul>
<p><img src="http://moxfive.xyz/resources/font-a4.png" alt="font-a4"></p>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>使用<code>@font-face</code>引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, <a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>.</p>
<p><img src="http://moxfive.xyz/resources/font-icon.png" alt="font-icon"></p>
<h2 id="备用记录"><a href="#备用记录" class="headerlink" title="备用记录"></a>备用记录</h2><h3 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h3><ul>
<li>下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中文</span></span><br><span class="line"><span class="attribute">font</span>-chs = <span class="string">"Microsoft YaHei"</span>, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span></span><br><span class="line"><span class="comment">//无衬线字体 sans-serif</span></span><br><span class="line"><span class="attribute">font</span>-sans = Verdana, <span class="string">"Helvetica Neue"</span>, Helvetica, Tahoma, Arial</span><br><span class="line"><span class="comment">//衬线字体 serif</span></span><br><span class="line"><span class="attribute">font</span>-serif = Times, Georgia</span><br><span class="line"><span class="comment">//等宽字体 monospace</span></span><br><span class="line"><span class="attribute">font</span>-mono = Menlo, Consolas, <span class="string">"Source Code Pro"</span>, Inconsolata, Monaco, <span class="string">"Courier New"</span></span><br></pre></td></tr></table></figure>
<h3 id="字体英文名"><a href="#字体英文名" class="headerlink" title="字体英文名"></a>字体英文名</h3><ul>
<li>一些常见中文字体的对应英文名。</li>
</ul>
<style>
    .fa-apple {
        color: #9d9e9d;
    }
    .fa-windows {
        color: #4ca6e7;
    }
</style>

<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>中文名</th>
<th>英文名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td><i class="fa fa-apple"></i> 苹方</td>
<td>PingFang SC</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td><i class="fa fa-apple"></i> 冬青黑/苹果丽黑</td>
<td>Hiragino Sans GB</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td><i class="fa fa-apple"></i> 思源黑体</td>
<td>Source Han Sans CN</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td><i class="fa fa-apple"></i> 华文细黑</td>
<td>STHeiti Light [STXihei]</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td><i class="fa fa-apple"></i> 华文黑体</td>
<td>ST Heiti</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td><i class="fa fa-apple"></i> 华文楷体</td>
<td>STKaiti</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td><i class="fa fa-apple"></i> 华文宋体</td>
<td>STSong</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td><i class="fa fa-apple"></i> 华文仿宋</td>
<td>STFangsong</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td><i class="fa fa-apple"></i> 丽黑 Pro</td>
<td>LiHei Pro Medium</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td><i class="fa fa-apple"></i> 丽宋 Pro</td>
<td>LiSong Pro Light</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td><i class="fa fa-apple"></i> 标楷体</td>
<td>BiauKai</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td><i class="fa fa-apple"></i> 苹果丽中黑</td>
<td>Apple LiGothic Medium</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td><i class="fa fa-apple"></i> 苹果丽细宋</td>
<td>Apple LiSung Light</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td><i class="fa fa-windows"></i> 新细明体</td>
<td>PMingLiU</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td><i class="fa fa-windows"></i> 细明体</td>
<td>MingLiU</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td><i class="fa fa-windows"></i> 标楷体</td>
<td>DFKai-SB</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td><i class="fa fa-windows"></i> (中易)黑体</td>
<td>SimHei</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td><i class="fa fa-windows"></i> 宋体</td>
<td>SimSun</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td><i class="fa fa-windows"></i> 新宋体</td>
<td>NSimSun</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td><i class="fa fa-windows"></i> 仿宋</td>
<td>FangSong</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td><i class="fa fa-windows"></i> 楷体</td>
<td>KaiTi</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td><i class="fa fa-windows"></i> 仿宋_GB2312</td>
<td>FangSong_GB2312</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td><i class="fa fa-windows"></i> 楷体_GB2312</td>
<td>KaiTi_GB2312</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td><i class="fa fa-windows"></i> 微软正黑体</td>
<td>Microsoft JhengHei</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td><i class="fa fa-windows"></i> 微软雅黑</td>
<td>Microsoft YaHei</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td><i class="fa fa-file-word-o"></i>  隶书</td>
<td>LiSu</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td><i class="fa fa-file-word-o"></i>  幼圆</td>
<td>YouYuan</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td><i class="fa fa-file-word-o"></i>  华文中宋</td>
<td>STZhongsong</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td><i class="fa fa-file-word-o"></i>  方正舒体</td>
<td>FZShuTi</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td><i class="fa fa-file-word-o"></i>  方正姚体</td>
<td>FZYaoti</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td><i class="fa fa-file-word-o"></i>  华文彩云</td>
<td>STCaiyun</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td><i class="fa fa-file-word-o"></i>  华文琥珀</td>
<td>STHupo</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td><i class="fa fa-file-word-o"></i>  华文隶书</td>
<td>STLiti</td>
</tr>
<tr>
<td style="text-align:center">34</td>
<td><i class="fa fa-file-word-o"></i>  华文行楷</td>
<td>STXingkai</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td><i class="fa fa-file-word-o"></i>  华文新魏</td>
<td>STXinwei</td>
</tr>
<tr>
<td style="text-align:center">36</td>
<td><i class="fa fa-linux"></i> 文泉驿微米黑</td>
<td>Wenquanyi Micro Hei</td>
</tr>
<tr>
<td style="text-align:center">37</td>
<td><i class="fa fa-linux"></i> 文泉驿正黑</td>
<td>WenQuanYi Zen Hei</td>
</tr>
<tr>
<td style="text-align:center">38</td>
<td><i class="fa fa-linux"></i> 文泉驿点阵正黑</td>
<td>WenQuanYi Zen Hei Sharp</td>
</tr>
</tbody>
</table>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li><strong>Font Awesome</strong>: <a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></li>
<li><strong>Webdings和Wingdings字符码对应表</strong>: <a href="http://dwz.cn/2jOjYi" target="_blank" rel="external">http://dwz.cn/2jOjYi</a></li>
<li><strong><em>CSS魔法堂：再次认识 font</em></strong> by <strong>肥仔John</strong> on <code>2015/3/3</code>: <a href="http://www.cnblogs.com/fsjohnhuang/p/4310533.html" target="_blank" rel="external">http://www.cnblogs.com/fsjohnhuang/p/4310533.html</a></li>
<li><strong>有字库-中文在线字体</strong>: <a href="http://www.youziku.com/" target="_blank" rel="external">http://www.youziku.com/</a></li>
<li><strong><em>谈谈网页设计中的字体应用 (2) serif 和 sans-serif</em></strong> by <strong>棕熊</strong> on <code>2008/5/6</code>: <a href="http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html" target="_blank" rel="external">http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html</a></li>
<li><strong><em>Serif 和 Sans Serif 字体的区别</em></strong> by <strong>冰火九九</strong> on <code>2013/11/4</code>: <a href="http://blog.jobbole.com/50828/" target="_blank" rel="external">http://blog.jobbole.com/50828/</a></li>
<li><strong><em>Chinese Web Font Guide</em></strong> by <strong>Kendra Schaefer</strong> on <code>2012/6/11</code>: <a href="http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/" target="_blank" rel="external">http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/</a></li>
<li><strong>Fonts.css – 跨平台中文字体解决方案</strong>: <a href="http://zenozeng.github.io/fonts.css/" target="_blank" rel="external">http://zenozeng.github.io/fonts.css/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs爬虫项目实战]]></title>
      <url>http://blog.xiaomo.info/2016/06/03/node_spider/</url>
      <content type="html"><![CDATA[<p>这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-依赖"><a href="#一、-依赖" class="headerlink" title="一、 依赖"></a>一、 依赖</h2><h3 id="1-DOM操作-cheerio"><a href="#1-DOM操作-cheerio" class="headerlink" title="1. DOM操作  cheerio"></a>1. DOM操作  <a href="https://npm.taobao.org/package/cheerio" target="_blank" rel="external">cheerio</a></h3><h3 id="2-请求插件-request"><a href="#2-请求插件-request" class="headerlink" title="2. 请求插件  request"></a>2. 请求插件  <a href="https://npm.taobao.org/package/request" target="_blank" rel="external">request</a></h3><h3 id="3-http库-superagent"><a href="#3-http库-superagent" class="headerlink" title="3. http库  superagent"></a>3. http库  <a href="https://npm.taobao.org/package/superagent" target="_blank" rel="external">superagent</a></h3><h3 id="4-代理-eventproxy"><a href="#4-代理-eventproxy" class="headerlink" title="4. 代理  eventproxy"></a>4. 代理  <a href="https://npm.taobao.org/package/eventproxy" target="_blank" rel="external">eventproxy</a></h3><h2 id="二、建立项目node-spider"><a href="#二、建立项目node-spider" class="headerlink" title="二、建立项目node-spider"></a>二、建立项目node-spider</h2><h3 id="1-建立一个Koa2项目"><a href="#1-建立一个Koa2项目" class="headerlink" title="1. 建立一个Koa2项目"></a>1. 建立一个Koa2项目</h3><p> <code>npm install -g koa-generator</code></p>
<h3 id="2-生成一个koa2的项目"><a href="#2-生成一个koa2的项目" class="headerlink" title="2. 生成一个koa2的项目"></a>2. 生成一个koa2的项目</h3><p> <code>koa2 -e node-spider</code>   -e表示使用ejs模板，具体参照<a href="http://localhost:4000/2016/05/26/2016-5-26-koa_generator/" target="_blank" rel="external">koa生成器,一键生成koa和koa2项目</a>   </p>
<h2 id="三、目标网站分析"><a href="#三、目标网站分析" class="headerlink" title="三、目标网站分析"></a>三、目标网站分析</h2><p>如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。<br><img src="http://static.xiaomo.info/images/0.png" alt=""></p>
<h2 id="四、爬虫功能制作"><a href="#四、爬虫功能制作" class="headerlink" title="四、爬虫功能制作"></a>四、爬虫功能制作</h2><h3 id="1-superagent"><a href="#1-superagent" class="headerlink" title="1. superagent"></a>1. superagent</h3><p>是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="built_in">var</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">'url'</span>); <span class="comment">//解析操作url</span></span><br><span class="line"><span class="built_in">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>); <span class="comment">//这三个外部依赖不要忘记npm install</span></span><br><span class="line"><span class="built_in">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="built_in">var</span> eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>);</span><br><span class="line"><span class="built_in">var</span> targetUrl = <span class="string">'https://cnodejs.org/'</span>;</span><br><span class="line">superagent.get(targetUrl)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。</p>
<p><img src="http://static.xiaomo.info/images/1.png" alt=""></p>
<h3 id="2-使用cheerio解析"><a href="#2-使用cheerio解析" class="headerlink" title="2. 使用cheerio解析"></a>2. 使用cheerio解析</h3><p>cheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = cheerio.load(res.text);</span><br><span class="line"><span class="comment">//通过CSS selector来筛选数据</span></span><br><span class="line">$(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其结果为一个个对象，调用 <code>.each(function(index, element))</code>函数来遍历每一个对象，返回的是HTML DOM Elements。</p>
<p><img src="http://static.xiaomo.info/images/2.png" alt=""></p>
<p>输出 <code>console.log($element.attr(&#39;title&#39;));</code>的结果为<br> <code>广州2014年12月06日 NodeParty 之 UC 场之类的标题</code><br>输出 <code>console.log($element.attr(&#39;href&#39;));</code>的结果为<br><code>/topic/545c395becbcb78265856eb2之类的url</code>。<br>再用<code>NodeJS1的url.resolve()</code>函数来补全完整的url。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">superagent.get(tUrl)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> topicUrls = [];</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(res.text);</span><br><span class="line">        <span class="comment">// 获取首页所有的链接</span></span><br><span class="line">        $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $element = $(element);</span><br><span class="line">            <span class="keyword">var</span> href = url.resolve(tUrl, $element.attr(<span class="string">'href'</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(href);</span><br><span class="line">            <span class="comment">//topicUrls.push(href);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-使用eventproxy来并发抓取"><a href="#3-使用eventproxy来并发抓取" class="headerlink" title="3.使用eventproxy来并发抓取"></a>3.使用eventproxy来并发抓取</h3><p>教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：得到一个 eventproxy 的实例</span></span><br><span class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</span><br><span class="line"><span class="comment">//第二步：定义监听事件的回调函数。</span></span><br><span class="line"><span class="comment">//after方法为重复监听</span></span><br><span class="line"><span class="comment">//params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数</span></span><br><span class="line">ep.after(<span class="string">'topic_html'</span>, topicUrls.length, <span class="function"><span class="keyword">function</span>(<span class="params">topics</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair</span></span><br><span class="line">    <span class="comment">//.map</span></span><br><span class="line">    topics = topics.map(<span class="function"><span class="keyword">function</span>(<span class="params">topicPair</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//use cheerio</span></span><br><span class="line">        <span class="keyword">var</span> topicUrl = topicPair[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> topicHtml = topicPair[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(topicHtml);</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">            title: $(<span class="string">'.topic_full_title'</span>).text().trim(),</span><br><span class="line">            href: topicUrl,</span><br><span class="line">            comment1: $(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//outcome</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outcome:'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(topics);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第三步：确定放出事件消息的</span></span><br><span class="line">topicUrls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">topicUrl</span>) </span>&#123;</span><br><span class="line">    superagent.get(topicUrl)</span><br><span class="line">        .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'fetch '</span> + topicUrl + <span class="string">' successful'</span>);</span><br><span class="line">            ep.emit(<span class="string">'topic_html'</span>, [topicUrl, res.text]);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>结果如下  </p>
<p><img src="http://static.xiaomo.info/images/3.png" alt=""></p>
<p>获取留言用户名和积分  </p>
<p><img src="http://static.xiaomo.info/images/4.png" alt=""></p>
<p>在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $(‘.reply_author’).get(0)可以看到，我们需要获取东西都在这里头。</p>
<p><img src="http://static.xiaomo.info/images/5.png" alt=""></p>
<p>首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userHref = url.resolve(tUrl, $(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).attribs.href);</span><br><span class="line"><span class="built_in">console</span>.log(userHref);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).children[<span class="number">0</span>].data);</span><br></pre></td></tr></table></figure>
<p>我们可以通过<code>https://cnodejs.org/user/username</code>抓取积分信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.reply_author'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $element = $(element);</span><br><span class="line"><span class="built_in">console</span>.log($element.attr(<span class="string">'href'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在用户信息页面 <code>$(&#39;.big&#39;).text().trim()</code>即为积分信息。<br>使用cheerio的函数.get(0)为获取第一个元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userHref = url.resolve(tUrl, $(<span class="string">'.reply_author'</span>).get(<span class="number">0</span>).attribs.href);</span><br><span class="line"><span class="built_in">console</span>.log(userHref);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[package.json常用script]]></title>
      <url>http://blog.xiaomo.info/2016/06/02/package.json_scripts/</url>
      <content type="html"><![CDATA[<p>好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/npm.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、git相关"><a href="#一、git相关" class="headerlink" title="一、git相关"></a>一、git相关</h2><h3 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1. 查看分支"></a>1. 查看分支</h3><p>  <code>branch:git branch -a</code>,    </p>
<h3 id="2-查看标签"><a href="#2-查看标签" class="headerlink" title="2. 查看标签"></a>2. 查看标签</h3><p>  <code>tag:git tag</code>,    </p>
<h3 id="3-创建标签"><a href="#3-创建标签" class="headerlink" title="3. 创建标签"></a>3. 创建标签</h3><p>  <code>createtag:git tag -a 0.1.2 -m Release^-^</code>,    </p>
<h3 id="4-推送标签"><a href="#4-推送标签" class="headerlink" title="4. 推送标签"></a>4. 推送标签</h3><p>  <code>pushtag:npm run createtag &amp;&amp; git push origin --tags</code>,        </p>
<h3 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h3><p>  <code>delbranch:git push origin --delete</code>,             </p>
<h3 id="6-同步git"><a href="#6-同步git" class="headerlink" title="6. 同步git"></a>6. 同步git</h3><p>  <code>fetch</code>:<code>git fetch -p</code>,                  </p>
<h3 id="7-推送更新"><a href="#7-推送更新" class="headerlink" title="7. 推送更新"></a>7. 推送更新</h3><p>  <code>push</code>:<code>git push origin master</code>,            </p>
<h3 id="8-提交代码"><a href="#8-提交代码" class="headerlink" title="8. 提交代码"></a>8. 提交代码</h3><p> <code>commit</code>:<code>git commit -a</code>,             </p>
<h3 id="9-检出代码"><a href="#9-检出代码" class="headerlink" title="9. 检出代码"></a>9. 检出代码</h3><p>  <code>checkout</code>:<code>git checkout</code>,            </p>
<h3 id="10-删除标签"><a href="#10-删除标签" class="headerlink" title="10. 删除标签"></a>10. 删除标签</h3><p>  <code>deltag:git push origin --delete tag</code>,             </p>
<h3 id="11-删除己合并分支"><a href="#11-删除己合并分支" class="headerlink" title="11. 删除己合并分支"></a>11. 删除己合并分支</h3><p>   <code>delbranck:git branch -d</code>,          </p>
<h3 id="12-删除所分支"><a href="#12-删除所分支" class="headerlink" title="12. 删除所分支"></a>12. 删除所分支</h3><p> <code>delbranchall:git branch -D</code>,                 </p>
<h3 id="13-重命名分支"><a href="#13-重命名分支" class="headerlink" title="13. 重命名分支"></a>13. 重命名分支</h3><p>  <code>renamebranch:git branch -m</code>,   </p>
<h2 id="二、webpack相关"><a href="#二、webpack相关" class="headerlink" title="二、webpack相关"></a>二、webpack相关</h2><h3 id="1-清空目录"><a href="#1-清空目录" class="headerlink" title="1. 清空目录"></a>1. 清空目录</h3><p>  <code>clean:rimraf dist</code>,</p>
<h3 id="2-构建项目"><a href="#2-构建项目" class="headerlink" title="2. 构建项目"></a>2. 构建项目</h3><p>  <code>build:npm run clean &amp;&amp; webpack --progress --colors --profile</code>,</p>
<h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3. 启动项目"></a>3. 启动项目</h3><p>  <code>start:webpack-dev-server --progress --colors --profile</code>,</p>
<h3 id="4-测试代码"><a href="#4-测试代码" class="headerlink" title="4. 测试代码"></a>4. 测试代码</h3><p>  <code>test:karma start</code>,</p>
<h3 id="5-检测测试"><a href="#5-检测测试" class="headerlink" title="5. 检测测试"></a>5. 检测测试</h3><p>  <code>test-watch:karma start --auto-watch --no-single-run</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm模块分享]]></title>
      <url>http://blog.xiaomo.info/2016/06/01/npm_modules_share/</url>
      <content type="html"><![CDATA[<p>平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/npm.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-实用的模块"><a href="#一、-实用的模块" class="headerlink" title="一、 实用的模块"></a>一、 实用的模块</h2><h3 id="1-thunder-vip"><a href="#1-thunder-vip" class="headerlink" title="1.thunder-vip"></a>1.<a href="https://github.com/nswbmw/thunder-vip" target="_blank" rel="external">thunder-vip</a></h3><p>作用：获取最新可用的迅雷 vip 账号。<br>解决什么：不用每次打开网站去找号。。<br>用法： <code>$ thunder</code>  or</p>
  <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var thunderVip = require('thunder-vip')<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">thunderVip(<span class="name">function</span> (<span class="name">err</span>, accounts) &#123;</span><br><span class="line">console.log(<span class="name">accounts</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>  截图  </p>
<p>  <img src="https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9" alt="1"></p>
<h3 id="2-npm-user-downloads"><a href="#2-npm-user-downloads" class="headerlink" title="2. npm-user-downloads"></a>2. npm-user-downloads</h3><p><a href="https://github.com/nswbmw/npm-user-downloads" target="_blank" rel="external">npm-user-downloads</a>  </p>
<p>  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。</p>
<p>  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。</p>
<p>  用法： <code>$ nud hupengbest last-month --limit=20</code></p>
<p>  截图：</p>
<p>  <img src="https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl" alt="1"></p>
<h2 id="二、koa开发模块"><a href="#二、koa开发模块" class="headerlink" title="二、koa开发模块"></a>二、koa开发模块</h2><h3 id="1-co"><a href="#1-co" class="headerlink" title="1. co"></a>1. <a href="https://npm.taobao.org/package/co" target="_blank" rel="external">co</a></h3><p>作用：异步控制  </p>
<p>1 栗子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用<code>co.wrap(fn*)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = co.wrap(<span class="function"><span class="keyword">function</span>* (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn(<span class="literal">true</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3 完整的example  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// yield any promise</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// resolve multiple promises in parallel</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> [a, b, c];</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line"><span class="comment">// errors can be try/catched</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'boom'</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.message); <span class="comment">// "boom"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;).catch(onerror);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onerror</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// log any uncaught errors</span></span><br><span class="line">  <span class="comment">// co will not throw any errors you do not handle!!!</span></span><br><span class="line">  <span class="comment">// HANDLE ALL YOUR ERRORS!!!</span></span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4 api  </p>
<p><code>co(fn*).then( val =&gt; )</code><br>解决一个generator然后返回一个promise</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>var fn = co.wrap(fn*)</code><br>将一个generator转成普通的function并返回一个promise  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = co.wrap(<span class="function"><span class="keyword">function</span>* (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn(<span class="literal">true</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2、debug"><a href="#2、debug" class="headerlink" title="2、debug"></a>2、<a href="https://npm.taobao.org/package/debug" target="_blank" rel="external">debug</a></h3><p><code>npm install debug</code>  </p>
<ol>
<li>使用方法  </li>
</ol>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> //Example app.js</span><br><span class="line">var <span class="built_in">debug</span> = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'http'</span>)</span><br><span class="line">  , http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">  , name = <span class="string">'My App'</span>;</span><br><span class="line"></span><br><span class="line">// fake app</span><br><span class="line"></span><br><span class="line"><span class="built_in">debug</span>(<span class="string">'booting %s'</span>, name);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span></span>&#123;</span><br><span class="line">  <span class="built_in">debug</span>(req.method + <span class="string">' '</span> + req.url);</span><br><span class="line">  res.<span class="keyword">end</span>(<span class="string">'hello\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">debug</span>(<span class="string">'listening'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// fake worker of some kind</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./worker'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Example worker.js:</span></span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'worker'</span>);</span><br><span class="line"></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  debug(<span class="string">'doing some work'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png" alt="1"></p>
<p>在windows环境下需要设置环境变量<code>set DEBUG=*,-not_this</code> 我这里使用的是idea的debug调试<br><img src="http://static.xiaomo.info/images/debug.png" alt="1"></p>
<p>windows 下启动方式<br><img src="http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png" alt="1"></p>
<p>将debug日志转存到文件中<br><code>DEBUG_FD=3 node your-app.js 3&gt; whatever.log</code>   </p>
<h3 id="3、koa-bodyparser"><a href="#3、koa-bodyparser" class="headerlink" title="3、koa-bodyparser"></a>3、<a href="https://npm.taobao.org/package/koa-bodyparser" target="_blank" rel="external">koa-bodyparser</a></h3><p>使用方法  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = koa();</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.body = <span class="keyword">this</span>.request.body;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在koa2中使用   </p>
<p><code>npm install koa-bodyparser@next --save</code></p>
<h3 id="4-koa-json"><a href="#4-koa-json" class="headerlink" title="4. koa-json"></a>4. <a href="https://npm.taobao.org/package/koa-json" target="_blank" rel="external">koa-json</a></h3><p><code>npm install koa-json --save</code>  </p>
<p>使用方法   </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="keyword">require</span>(<span class="string">'koa-json'</span>);</span><br><span class="line"><span class="keyword">var</span> Koa = <span class="keyword">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(json());</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>((ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = &#123; foo: <span class="string">'bar'</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-koa-webpack-dev-middleware"><a href="#4-koa-webpack-dev-middleware" class="headerlink" title="4. koa-webpack-dev-middleware"></a>4. <a href="https://npm.taobao.org/package/koa-webpack-dev-middleware" target="_blank" rel="external">koa-webpack-dev-middleware</a></h3><p>使用方法   </p>
<p><code>npm install --save-dev koa-webpack-dev-middleware</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">require</span>(<span class="string">'koa'</span>)();</span><br><span class="line"><span class="keyword">var</span> webpackMiddleware = <span class="keyword">require</span>(<span class="string">"koa-webpack-dev-middleware"</span>);</span><br><span class="line">app.<span class="keyword">use</span>(webpackMiddleware(webpack(&#123;</span><br><span class="line">  <span class="comment">// webpack options</span></span><br><span class="line">  <span class="comment">// webpackMiddleware takes a Compiler object as first parameter</span></span><br><span class="line">  <span class="comment">// which is returned by webpack(...) without callback.</span></span><br><span class="line">  entry: <span class="string">"..."</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">      path: <span class="string">"/"</span></span><br><span class="line">      <span class="comment">// no real path is required, just pass "/"</span></span><br><span class="line">      <span class="comment">// but it will work with other paths too.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;), &#123;</span><br><span class="line">  <span class="comment">// all options optional</span></span><br><span class="line"></span><br><span class="line">  noInfo: <span class="keyword">false</span>,</span><br><span class="line">  <span class="comment">// display no info to console (only warnings and errors)</span></span><br><span class="line"></span><br><span class="line">  quiet: <span class="keyword">false</span>,</span><br><span class="line">  <span class="comment">// display nothing to the console</span></span><br><span class="line"></span><br><span class="line">  lazy: <span class="keyword">true</span>,</span><br><span class="line">  <span class="comment">// switch into lazy mode</span></span><br><span class="line">  <span class="comment">// that means no watching, but recompilation on every request</span></span><br><span class="line"></span><br><span class="line">  watchDelay: <span class="number">300</span>,</span><br><span class="line">  <span class="comment">// delay after change (only lazy: false)</span></span><br><span class="line"></span><br><span class="line">  publicPath: <span class="string">"/assets/"</span>,</span><br><span class="line">  <span class="comment">// public path to bind the middleware to</span></span><br><span class="line">  <span class="comment">// use the same as in webpack</span></span><br><span class="line"></span><br><span class="line">  headers: &#123; <span class="string">"X-Custom-Header"</span>: <span class="string">"yes"</span> &#125;,</span><br><span class="line">  <span class="comment">// custom headers</span></span><br><span class="line"></span><br><span class="line">  stats: &#123;</span><br><span class="line">      colors: <span class="keyword">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// options for formating the statistics</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown编辑器推荐和使用]]></title>
      <url>http://blog.xiaomo.info/2016/05/30/markdownpad2/</url>
      <content type="html"><![CDATA[<p>由于自己在用markdown写博客，当然一个称手的利器是少不了的，所以我一直在探索用一款什么样的编辑器才能使用写博客更加的得心应手。我才开始一直是在atom里面写博客的，但是它的实时预览功能一旦开启就会很卡，因此我开始了寻找新的工具。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/markdown.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、markdown编辑器推荐"><a href="#一、markdown编辑器推荐" class="headerlink" title="一、markdown编辑器推荐"></a>一、markdown编辑器推荐</h2><h3 id="1-工具"><a href="#1-工具" class="headerlink" title="1.工具"></a>1.工具</h3><p><code>atom</code>、<code>idea</code>、<code>markdownpad2</code>都是不错的编辑工具               </p>
<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3><p>但是idea和atom有一个缺点:很卡！！！电脑配置不高的情况下很磨人，所以使用markdownpad2是不错的选择。　　　          </p>
<h2 id="二、安装markdownpad2"><a href="#二、安装markdownpad2" class="headerlink" title="二、安装markdownpad2"></a>二、安装markdownpad2</h2><h3 id="1-官方下载，放心、安全"><a href="#1-官方下载，放心、安全" class="headerlink" title="1. 官方下载，放心、安全"></a>1. 官方下载，放心、安全</h3><p>下载链接：<a href="http://markdownpad.com/download.html" target="_blank" rel="external">http://markdownpad.com/download.html</a></p>
<h3 id="2-安装和注册"><a href="#2-安装和注册" class="headerlink" title="2. 安装和注册"></a>2. 安装和注册</h3><p> 邮箱：<code>Soar360@live.com</code></p>
<p> 授权秘钥：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5<span class="regexp">/sQytXJUQl/</span>QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb<span class="regexp">/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/</span>eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure>
<h3 id="3-出现的问题"><a href="#3-出现的问题" class="headerlink" title="3. 出现的问题"></a>3. 出现的问题</h3><p>MarkdownPad 2 在win10下html渲染错误This view has crashed，windows 10系统 需要下载 一个<code>awesomium_v1.6.6_sdk_win</code>这是一个<code>HTML UI ENGINE</code></p>
<p>下载地址<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" title="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe</a></p>
<p>亲测下载安装后渲染正常;</p>
<p>如果以上安装后问题还没解决，官方文档建议下载安装 Microsoft’s DirectX End-User Runtimes (June 2010).</p>
<h2 id="三、使用效果图"><a href="#三、使用效果图" class="headerlink" title="三、使用效果图"></a>三、使用效果图</h2><p><img src="http://static.xiaomo.info/images/markdownpad2.png" alt="markdownpad2"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongodb数据库的使用]]></title>
      <url>http://blog.xiaomo.info/2016/05/27/mongodb_use/</url>
      <content type="html"><![CDATA[<p>最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/mongodb.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、mongodb的开启和关闭"><a href="#一、mongodb的开启和关闭" class="headerlink" title="一、mongodb的开启和关闭"></a>一、mongodb的开启和关闭</h2><h3 id="1-查找mongod是否可用"><a href="#1-查找mongod是否可用" class="headerlink" title="1. 查找mongod是否可用"></a>1. 查找mongod是否可用</h3><p><code>which mongod</code></p>
<h3 id="2-启动mongodb"><a href="#2-启动mongodb" class="headerlink" title="2. 启动mongodb"></a>2. 启动mongodb</h3><p> 指定path 和log日志<br><code>mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log</code></p>
<h3 id="3-关闭数据库"><a href="#3-关闭数据库" class="headerlink" title="3. 关闭数据库"></a>3. 关闭数据库</h3><p><code>mongod --shutdown</code></p>
<h2 id="二、mongodb的操作"><a href="#二、mongodb的操作" class="headerlink" title="二、mongodb的操作"></a>二、mongodb的操作</h2><h3 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h3><p><code>mongod 115.29.137.34:27017</code>  </p>
<h3 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2. 使用数据库"></a>2. 使用数据库</h3><p>(不存在的数据库也可以使用,插入数据之后会自动保存)<br><code>use mydb</code>  </p>
<h3 id="3-权限登陆"><a href="#3-权限登陆" class="headerlink" title="3. 权限登陆"></a>3. 权限登陆</h3><p><code>db.auth(&#39;username&#39;,&#39;password&#39;)</code></p>
<h3 id="4-展示数据库列表"><a href="#4-展示数据库列表" class="headerlink" title="4. 展示数据库列表"></a>4. 展示数据库列表</h3><p><code>show dbs</code></p>
<h3 id="5-插入数据"><a href="#5-插入数据" class="headerlink" title="5. 插入数据"></a>5. 插入数据</h3><p>(类似于mysql的表)<br><code>db.users.insert({&#39;name&#39;:&#39;xiaomo&#39;})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:25})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:24,&#39;sex&#39;:&#39;女&#39;})</code></p>
<h3 id="6-查询集合"><a href="#6-查询集合" class="headerlink" title="6. 查询集合"></a>6. 查询集合</h3><p>(前提是use了一个数据库)<br>有一个System.indexes 是索引<br><code>show collections</code></p>
<h3 id="7-不带条件查询"><a href="#7-不带条件查询" class="headerlink" title="7. 不带条件查询"></a>7. 不带条件查询</h3><p><code>db.users.find()</code>  </p>
<h3 id="8-带条件查询"><a href="#8-带条件查询" class="headerlink" title="8. 带条件查询"></a>8. 带条件查询</h3><p>(参数是一个对象)<br><code>db.users.find({&#39;name&#39;:&#39;xiaomo&#39;})</code>  </p>
<h3 id="9-更新数据"><a href="#9-更新数据" class="headerlink" title="9. 更新数据"></a>9. 更新数据</h3><p>(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}})</code>   修改满足条件的第一条数据<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}},{multi:true})</code>    修改所有满足条件的数据  </p>
<h3 id="10-保存数据"><a href="#10-保存数据" class="headerlink" title="10. 保存数据"></a>10. 保存数据</h3><p>(只有一个参数，必须要传id，后面是要修改的数据)<br><code>db.users.save({&#39;id&#39;:&#39;objectId(574710a97a3afd63cde56a49)&#39;,&#39;age&#39;:30})</code>  </p>
<h3 id="11-删除数据"><a href="#11-删除数据" class="headerlink" title="11. 删除数据"></a>11. 删除数据</h3><p>(1:条件 2 是否删除所有符合条件的)<br><code>db.users.remove({&#39;name&#39;:&#39;xiaomoing&#39;},true)</code>  </p>
<h3 id="12-删除集合"><a href="#12-删除集合" class="headerlink" title="12. 删除集合"></a>12. 删除集合</h3><p><code>db.users.drop()</code>  </p>
<h2 id="三、使用mongoose操作数据库"><a href="#三、使用mongoose操作数据库" class="headerlink" title="三、使用mongoose操作数据库"></a>三、使用mongoose操作数据库</h2><h3 id="1-模块的介绍"><a href="#1-模块的介绍" class="headerlink" title="1. 模块的介绍"></a>1. 模块的介绍</h3><p>连接mongdodb的驱动</p>
<h3 id="2-配置和链接"><a href="#2-配置和链接" class="headerlink" title="2. 配置和链接"></a>2. 配置和链接</h3><p><code>npm install --save mongoose</code>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- var uri = 'mongodb://username:password@hostname:port/databasename'; --&gt;</span></span><br><span class="line">var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';</span><br><span class="line">mongoose.connect(uri);</span></span><br></pre></td></tr></table></figure>
<h3 id="3-Model-和Shema"><a href="#3-Model-和Shema" class="headerlink" title="3. Model 和Shema"></a>3. Model 和Shema</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// model.js</span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema,</span><br><span class="line">    ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BlogPost = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    author    : ObjectId,</span><br><span class="line">    title     : <span class="built_in">String</span>,</span><br><span class="line">    body      : <span class="built_in">String</span>,</span><br><span class="line">    date      : <span class="built_in">Date</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Model</span></span><br><span class="line">mongoose.model(<span class="string">'blog'</span>,Schema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Comment = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name: &#123; <span class="keyword">type</span>: <span class="built_in">String</span>, <span class="keyword">default</span>: <span class="string">'hahaha'</span> &#125;,</span><br><span class="line">  age: &#123; <span class="keyword">type</span>: <span class="built_in">Number</span>, min: <span class="number">18</span>, index: <span class="literal">true</span> &#125;,</span><br><span class="line">  bio: &#123; <span class="keyword">type</span>: <span class="built_in">String</span>, match: <span class="regexp">/[a-z]/</span> &#125;,</span><br><span class="line">  date: &#123; <span class="keyword">type</span>: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a setter</span></span><br><span class="line">Comment.path(<span class="string">'name'</span>).set(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> capitalize(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware</span></span><br><span class="line">Comment.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  notify(<span class="keyword">this</span>.get(<span class="string">'email'</span>));</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-创建文档"><a href="#4-创建文档" class="headerlink" title="4. 创建文档"></a>4. 创建文档</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//insert.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose ＝ <span class="keyword">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">'./model.js'</span>); <span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> Blog(<span class="comment">&#123;</span><br><span class="line">    name:'xiaomo',</span><br><span class="line">    age:25,</span><br><span class="line">    bio:'don't know',</span><br><span class="line">    date:new Date</span><br><span class="line">  &#125;</span>);</span><br><span class="line"></span><br><span class="line">book.save(<span class="function"><span class="keyword">function</span><span class="params">(err)</span><span class="comment">&#123;</span><br><span class="line">    console.log('save status:'+err);</span><br><span class="line">  &#125;</span>);</span></span><br></pre></td></tr></table></figure>
<h3 id="5-删除文档"><a href="#5-删除文档" class="headerlink" title="5. 删除文档"></a>5. 删除文档</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.findOne(&#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">  doc.reomove();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6. 简单查询"></a>6. 简单查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.find(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>第一个满足条件的结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line">Blog.findOne(&#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="7-条件语句"><a href="#7-条件语句" class="headerlink" title="7. 条件语句"></a>7. 条件语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// condation.js</span></span><br><span class="line"> <span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"> <span class="built_in">require</span>(<span class="string">'./model.js'</span>);</span><br><span class="line"> <span class="keyword">var</span> Blog = mongoose.model(<span class="string">'blog'</span>);</span><br><span class="line"> <span class="comment">//名字是xiaomo或者xiaoming 可以用$or和$and</span></span><br><span class="line"> <span class="keyword">var</span> condation = &#123;</span><br><span class="line">   $or  $and:[</span><br><span class="line">   &#123;<span class="string">'name'</span>:<span class="string">'xiaomo'</span>&#125;,</span><br><span class="line">   &#123;<span class="string">'name'</span>:<span class="string">'xiaoming'</span>&#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line"> Blog.find(condation,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'result'</span>,doc)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="三、在项目中使用mongoose"><a href="#三、在项目中使用mongoose" class="headerlink" title="三、在项目中使用mongoose"></a>三、在项目中使用mongoose</h2><h3 id="1-生成项目"><a href="#1-生成项目" class="headerlink" title="1. 生成项目"></a>1. 生成项目</h3><p><code>koa koatest -e koatest</code>  </p>
<h3 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h3><p><code>cd koatest &amp;&amp; npm install</code></p>
<h3 id="3-安装mongoose"><a href="#3-安装mongoose" class="headerlink" title="3. 安装mongoose"></a>3. 安装mongoose</h3><p><code>npm install --save mongoose</code>  </p>
<h3 id="4-创建模型"><a href="#4-创建模型" class="headerlink" title="4. 创建模型"></a>4. 创建模型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/users.server.model.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    uid:<span class="built_in">Number</span>,</span><br><span class="line">    username:<span class="built_in">String</span>,</span><br><span class="line">    createTime:<span class="built_in">Date</span>,</span><br><span class="line">    lastLogin:<span class="built_in">Date</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>,UserSchema);</span><br></pre></td></tr></table></figure>
<h3 id="5-创建配置文件"><a href="#5-创建配置文件" class="headerlink" title="5. 创建配置文件"></a>5. 创建配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  mongodb:<span class="string">'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//config/mongoose.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> db = mongoose.connect(config.mongodb);</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./../models/users.server.model.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-操作mongdodb-代码"><a href="#6-操作mongdodb-代码" class="headerlink" title="6. 操作mongdodb 代码"></a>6. 操作mongdodb 代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routers/users.js</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>);</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">      uid:</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="keyword">yield</span> User.find(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[koa生成器,一键生成koa和koa2项目]]></title>
      <url>http://blog.xiaomo.info/2016/05/26/koa_generator/</url>
      <content type="html"><![CDATA[<p>最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/koajs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、一键生成koa项目特性"><a href="#一、一键生成koa项目特性" class="headerlink" title="一、一键生成koa项目特性"></a>一、一键生成koa项目特性</h2><ol>
<li>Express-style</li>
<li>Support koa 1.x（已支持）</li>
<li>Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）</li>
</ol>
<h2 id="二、使用说明"><a href="#二、使用说明" class="headerlink" title="二、使用说明"></a>二、使用说明</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p> 一定要全局安装(koa1.2和koa2都己经支持)<br><code>npm install koa-generator -g</code><br>koa1.2  生成一个test项目,切到test目录并下载依赖<br><code>koa test &amp;&amp; cd test &amp;&amp; npm install</code><br>koa2    生成一个test项目,切到test目录并下载依赖<br><code>koa2 test &amp;&amp; cd test &amp;&amp; npm install</code></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><code>npm start</code><br>  访问 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 就可以看到项目效果   </p>
<h2 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数"></a>三、参数</h2><p>当然koa生成器功能没有这么弱啦,可以定制你想要的东西  </p>
<pre><code>-h, --help          帮助
-V, --version       版本号
-e, --ejs           添加ejs模板引擎支持(默认是jade)
    --hbs           添加hbs模板引擎支持(默认是hbs)
-H, --hogan         添加hogan.js支持
-c, --css &lt;engine&gt;  添加css样式 支持 less sass styus css(默认是css)
    --git           添加 .gitignore
-f, --force         force on non-empty directory
</code></pre><h2 id="四、项目地址"><a href="#四、项目地址" class="headerlink" title="四、项目地址"></a>四、项目地址</h2><p><a href="https://github.com/qq83387856/node-koa" target="_blank" rel="external">https://github.com/qq83387856/node-koa</a></p>
<h2 id="五、国际惯例-项目演示"><a href="#五、国际惯例-项目演示" class="headerlink" title="五、国际惯例-项目演示"></a>五、国际惯例-项目演示</h2><ol>
<li>安装koa-generator  </li>
<li>新建项目   </li>
<li>运行项目  </li>
<li>演示结束<br><img src="http://static.xiaomo.info/images/koa-generator.gif" alt="koa生成器"></li>
</ol>
<p>查看大图 <a href="http://static.xiaomo.info/images/koa-generator.gif" target="_blank" rel="external">koa生成器</a></p>
<h2 id="我的github地址"><a href="#我的github地址" class="headerlink" title="我的github地址"></a>我的github地址</h2><p><a href="https://github.com/qq83387856" target="_blank" rel="external">https://github.com/qq83387856</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs框架koa学习]]></title>
      <url>http://blog.xiaomo.info/2016/05/24/node_koa/</url>
      <content type="html"><![CDATA[<p>Koa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、国际惯例-hello-world"><a href="#一、国际惯例-hello-world" class="headerlink" title="一、国际惯例 hello world"></a>一、国际惯例 hello world</h2><h3 id="1-当前版本1-2"><a href="#1-当前版本1-2" class="headerlink" title="1. 当前版本1.2"></a>1. 当前版本1.2</h3><p><code>npm install --save koa</code>   </p>
<h3 id="2-代码撸起来"><a href="#2-代码撸起来" class="headerlink" title="2. 代码撸起来"></a>2. 代码撸起来</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">let</span> app = koa();</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">"hello xiaomo"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>
<p>如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo<br>你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  </p>
<p>另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inc</span> () &#123;</span></span><br><span class="line"> let <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line"> yield <span class="built_in">number</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let test = inc()</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 0</span></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 1</span></span><br><span class="line">console.<span class="built_in">log</span>(test.next().<span class="built_in">value</span>)<span class="comment"> // -&gt; 2</span></span><br></pre></td></tr></table></figure>
<p>我分解一下这个程序：</p>
<p>inc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1<br>inc 函数被指派给了变量 test<br>inc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。<br>我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。</p>
<p>但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'hello world'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /404 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/404'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'page not found'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /500 route</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">'/500'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">yield</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.body = <span class="string">'internal server error'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p>你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，<a href="http://koajs.com/#context" target="_blank" rel="external">请点这里</a>。</p>
<p>让我们写一个将请求中的内容大写的中间件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = koa()</span><br><span class="line"></span><br><span class="line">app.use(upcaser())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upcaser</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>* (<span class="params">next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> next</span><br><span class="line"><span class="keyword">this</span>.body = <span class="keyword">this</span>.body.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<h2 id="我的github地址"><a href="#我的github地址" class="headerlink" title="我的github地址"></a>我的github地址</h2><p><a href="https://github.com/qq83387856" target="_blank" rel="external">https://github.com/qq83387856</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript学习笔记]]></title>
      <url>http://blog.xiaomo.info/2016/05/20/javascript_syntax/</url>
      <content type="html"><![CDATA[<p>一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/javascript.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、一些不同"><a href="#一、一些不同" class="headerlink" title="一、一些不同"></a>一、一些不同</h2><h3 id="1-javscript没有块级作用域"><a href="#1-javscript没有块级作用域" class="headerlink" title="1. javscript没有块级作用域"></a>1. javscript没有块级作用域</h3><p>于是es6中有了let和var<br>模拟js的块级作用域    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure>
<h3 id="2-javascipt中this用法不同"><a href="#2-javascipt中this用法不同" class="headerlink" title="2. javascipt中this用法不同"></a>2. javascipt中this用法不同</h3><p>它指向调用它的那个对象</p>
<h3 id="3-闭包是指有权访问另一个函数作用域中的变量的函数。"><a href="#3-闭包是指有权访问另一个函数作用域中的变量的函数。" class="headerlink" title="3. 闭包是指有权访问另一个函数作用域中的变量的函数。"></a>3. 闭包是指有权访问另一个函数作用域中的变量的函数。</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这是一个闭包'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h2><p><code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code> 、<code>object</code>、<code>function</code><br>它们有对应的方法<br><code>Boolean()</code>、<code>String()</code>、<code>Number()</code> 、<code>Object()</code>  </p>
<h3 id="1-undefined"><a href="#1-undefined" class="headerlink" title="1. undefined"></a>1. <code>undefined</code></h3><p>没有被定义就会返回<code>undefined</code>,是<code>null</code>衍生出来的,因些<code>undefined==null</code> 返回true</p>
<h3 id="2-null"><a href="#2-null" class="headerlink" title="2. null"></a>2. <code>null</code></h3><p>由于历史原因 <code>typeof null</code>返回<code>object</code></p>
<h3 id="3-boolean"><a href="#3-boolean" class="headerlink" title="3. boolean"></a>3. <code>boolean</code></h3><p><code>Boolean()</code><br>非0返回true<br>0、null、undefined返回false</p>
<h3 id="4-string"><a href="#4-string" class="headerlink" title="4. string"></a>4. <code>string</code></h3><p><code>String()</code><br>不管传入什么都会原样返回,但如果是<code>function</code>,会执行该方法并返回<code>undefined</code><br><code>toString(参数,进制)</code><br><code>toUpperCase()</code><br><code>toLowerCase()</code><br><code>substring(parm1,parm2)</code><br><code>substr()</code><br><code>charAt(1)</code><br><code>charCodeAt(2)</code><br><code>concat()</code><br><code>slice()</code><br><code>indexof()</code><br><code>lastIndexOf</code><br><code>trim()</code><br><code>search(pattern)</code>  //返回索引<br><code>replcae(&#39;原&#39;,&#39;新&#39;)</code> //第一个参数支持正则    第二个参数也可以是一个function<br><code>splice(&#39;,&#39;)</code>    //支持正则，支持指定长度<br>它只有length属性   </p>
<h3 id="5-number"><a href="#5-number" class="headerlink" title="5. number"></a>5. <code>number</code></h3><p><code>Number()</code>          true=&gt;1 false=&gt;0   null=&gt;0 undefined=&gt;NaN<br><code>Number.MAX_VALUE</code>  最大值<br><code>Number.MIN_VALUE</code>  最小值<br><code>NaN</code>  它是一个特例，不与任何值相等包括自己<br><code>parseInt()</code> //可以查找字符串中的数字并转换<br><code>parseFloat()</code> //可以查找字符串中的数字并转换<br><code>inFinite()</code> //是否在最大值和最小值之间<br><code>toFixed(小数点位数)</code><br>说明：它能够识别科学计数法 比如 2.15e5 =&gt; 215000   </p>
<h3 id="6-object"><a href="#6-object" class="headerlink" title="6. object"></a>6. <code>object</code></h3><p><code>constructor</code>  构造函数<br><code>obj.hasOwnProperty()</code> 是否具有自己的方法<br><code>obj.isProtoTypeOf(object)</code>  检查传入的对象是否是另一个对象的原型<br><code>ob.propertyIsEnumerable(propetyName)</code>  检查给定的属性能否使用for-in<br><code>obj.toLocaleString()</code> 返回执行地区对应的对象的字符串 =&gt;[‘Object’]<br><code>obj.toString()</code>    返回执行对象的字符串 =&gt;[‘Object’]<br><code>obj.valueOf()</code>   返回对象序列化之后的结果</p>
<h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="1-大于和小于"><a href="#1-大于和小于" class="headerlink" title="1. 大于和小于"></a>1. 大于和小于</h3><p><code>&#39;23&#39;&lt;&#39;3&#39;</code>  //true,字符串的比较跟数字的比较不同<br><code>&#39;a&#39;&lt;3</code>   //false a会被转成NaN<br><code>特别注意</code>:NaN和任何数比都是false<br><code>NaN&gt;3</code> //false<br><code>NaN&lt;3</code> //false<br><code>&#39;23&#39;&lt;3</code> //false  ‘23’会被转成23再与3比较</p>
<h3 id="2-全等和不全等"><a href="#2-全等和不全等" class="headerlink" title="2. 全等和不全等"></a>2. 全等和不全等</h3><p><code>&#39;55&#39;==55</code> //true 不全等只判断值不判断类型<br><code>&#39;55&#39;===55</code> //false  全等不仅判断值还判断类型  </p>
<h2 id="四、条件控制语句"><a href="#四、条件控制语句" class="headerlink" title="四、条件控制语句"></a>四、条件控制语句</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(proertyName <span class="keyword">in</span> <span class="keyword">global</span>)&#123;</span><br><span class="line">  console.<span class="built_in">log</span>(proertyName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h2><p>注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。</p>
<h2 id="六、检测类型"><a href="#六、检测类型" class="headerlink" title="六、检测类型"></a>六、检测类型</h2><p><code>typeof xxx</code><br>// 返回数据类型</p>
<h2 id="七、引用类型"><a href="#七、引用类型" class="headerlink" title="七、引用类型"></a>七、引用类型</h2><h3 id="1-object"><a href="#1-object" class="headerlink" title="1. object"></a>1. <code>object</code></h3><p>声明对象的方法<br><code>var obj = new Object();</code><br><code>var obj = {};</code></p>
<p>赋值<br><code>obj.name=&#39;xiaomo&#39;;</code>   </p>
<p>使用对象的属性<br><code>obj.name</code><br><code>obj[&#39;name&#39;]</code>  </p>
<h3 id="2-Array"><a href="#2-Array" class="headerlink" title="2. Array"></a>2. <code>Array</code></h3><p>可以存任何类型    </p>
<p>声明<br><code>var arr = new Array();</code><br><code>var arr = new Array(3);</code><br><code>var arr = [];</code>  </p>
<p>添加对象<br><code>arr.push(&#39;a&#39;,b&#39;,1,3,4,true)</code><br>操作对象(删除、插入、替换)     </p>
<p><code>删除</code>：起始位置，要删除的个数<br><code>arr.splice(起始位置,删除的个数)</code><br>例子：<code>arr.splice(2,1)</code> //返回[1] 返回删除的那个数   </p>
<p><code>插入</code>：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(1,0,&#39;插入的值1&#39;,&#39;插入的值2&#39;,&#39;插入的值n&#39;)</code>  </p>
<p><code>替换</code>：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(0,2,&#39;test1&#39;,&#39;test2&#39;)</code>   </p>
<p>其他数组操作<br><code>arr.push(&#39;test&#39;)</code> 插入到数组的最后面<br><code>arr.unshift(&#39;xiaomo&#39;)</code> 插入到数组的最前面<br><code>arr.pop()</code>   //删除数组的最后一个值<br><code>arr.shift()</code> //删除数组第一个值</p>
<p>使用对象<br><code>arr[1]</code>   </p>
<p>数组自带的方法<br><code>arr.reverse();</code>   反转数组<br><code>arr.sort()</code>   默认升序排列<br><code>arr.sort((a,b)=&gt;{reutrn b-a})</code>  传入排序方法会按照自定义排序<br><code>arr.concat(另一个数组或者单个参数)</code>  如果传入数组也会被展开拿出来,不会影响原数组<br><code>arr.slice(0,3)</code>  会把选定的部分截取出来生成一个新的数组，不会影响原数组<br><code>arr.indexOf(4)</code>   返回该值存在的下标,不存在返回-1<br><code>arr.lastIndexOf(4)</code> 从倒数开始查找,返回该值存在的下标,不存在返回-1<br><code>arr.every(fn)</code>   对每个参数进行处理，全部符合返回true<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn=(<span class="keyword">item</span>,index,array)<span class="comment">&#123;//当前值、索引、该数组</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">item</span>&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>arr.some(fn)</code>   对每个参数进行处理，有一个符合就返回true<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn=(<span class="keyword">item</span>,index,array)<span class="comment">&#123;//当前值、索引、该数组</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">item</span>&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>arr.filter(fn)</code> 对每个参数进行处理，返回过滤后的数组<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn=(<span class="keyword">item</span>,index,array)<span class="comment">&#123;//当前值、索引、该数组</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">item</span>&gt;<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>arr.map(fn)</code>    对每个参数进行处理，返回处理后的数组<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn=(<span class="keyword">item</span>,index,array)<span class="comment">&#123;//当前值、索引、该数组</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">item</span>*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>arr.forEach(fn)</code>  对每个参数进行处理，没有返回值<br><code>arr.reduce(fn)</code>    对每个参数进行处理，迭代返回最终结果<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span>=</span>(prev,cur,index,array)&#123;<span class="comment">//前一个值、当前值、索引、数组</span></span><br><span class="line">  <span class="keyword">return</span> prev+cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>arr.reduceRight(fn)</code>  从右边对每个参数进行处理，迭代返回最终结果<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span>=</span>(prev,cur,index,array)&#123;<span class="comment">//前一个值、当前值、索引、数组</span></span><br><span class="line">  <span class="keyword">return</span> prev+cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-Date类型"><a href="#3-Date类型" class="headerlink" title="3. Date类型"></a>3. Date类型</h3><p>声明:<br><code>var date = new Date();</code>  创建当前时间 也可以接收参数<br><code>Date.parse(pattern)</code>    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳<br><code>new Date(Date.parse(pattern))</code>   //   将时间戳格式化为正常的时间<br><code>new Date(2016,5,19,20,49,15)</code>  //也可以用逗号 2016-05-19 20:49:15<br><code>Date.now()</code>  //当前时间的时间戳<br><code>toDateString()</code> //返回时间的字符串 星期、日、月、年<br><code>toTimeString()</code> //时、分、秒、时区<br><code>toLocaleDateString()</code>   特定时区的星期、日、月、年<br><code>toLocaleTimeString()</code>   特定时区的时、分、秒、时间    </p>
<p>时间格式<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">var</span> time = <span class="built_in">date</span>.getTime() <span class="comment">//当前时间的时间戳</span></span><br><span class="line"><span class="built_in">var</span> fullYear = <span class="built_in">date</span>.getFullYear(); <span class="comment">//2016</span></span><br><span class="line"><span class="built_in">var</span> year = <span class="built_in">date</span>.getYear();   <span class="comment">//116  </span></span><br><span class="line"><span class="built_in">var</span> month = <span class="built_in">date</span>.getMonth(); <span class="comment">//04 从0开始</span></span><br><span class="line"><span class="built_in">var</span> d = <span class="built_in">date</span>.getDate(); <span class="comment">//日  19</span></span><br><span class="line"><span class="built_in">var</span> day = <span class="built_in">date</span>.getDay();  <span class="comment">//4 返回星期几</span></span><br><span class="line"><span class="built_in">var</span> <span class="keyword">min</span> = <span class="built_in">date</span>.getMinitues(); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">var</span> sec = <span class="built_in">date</span>.getSeconds() <span class="comment">//秒</span></span><br><span class="line"><span class="built_in">var</span> mill = <span class="built_in">date</span>.getMilliSeconds() <span class="comment">//毫秒</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-正则-RegExp类型"><a href="#4-正则-RegExp类型" class="headerlink" title="4. 正则 RegExp类型"></a>4. 正则 RegExp类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'pattern'</span>);</span><br><span class="line">re.test(parm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// exec 返回匹配的结果</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="string">'abcdef.js'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\.js$/</span></span><br><span class="line"><span class="keyword">var</span> matches = parrten.exec(test);</span><br><span class="line"><span class="built_in">console</span>.log(matches); <span class="comment">// '.js' ,index:6 input:'abcdef.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test 返回true/false</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'abcdef.js'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\.js$/</span></span><br><span class="line">pattern.test(text); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="5-方法-function"><a href="#5-方法-function" class="headerlink" title="5. 方法　function"></a>5. 方法　function</h3><p>方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法<br>每个方法都包含两个属性:<code>length</code>(参数个数)和<code>protoType</code>(原型链)<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>)    <span class="comment">//1</span></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p>
<p>你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是一个方法'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但如果是立即执行的函数则不行</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  function test()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;()</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<p>方法有两个特殊的内部属性和两个非继承来的方法 <code>call()</code>、<code>apply()</code>,以及其他方法 <code>toString()、valueOf()</code><br><code>arguments</code>和<code>this</code><br><code>arguments</code>是类数组,保存着参数。它有<code>arguments.callee()</code>方法<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">factorial</span>(<span class="built_in">num</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="built_in">num</span> * arguments.callee(<span class="built_in">num</span>-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">factorial</span>(<span class="number">5</span>); // <span class="number">5</span>! <span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">4</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p><code>this</code>在javascript中用法比较特殊,它指向它的调用者</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">color</span>=<span class="string">'green'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">var</span> o = &#123;</span><br><span class="line">  <span class="built_in">color</span>=<span class="string">'pink'</span>;</span><br><span class="line">&#125;</span><br><span class="line">o.sayColor(); <span class="comment">//pink</span></span><br><span class="line">sayColor(); <span class="comment">//green</span></span><br></pre></td></tr></table></figure>
<p><code>protoType</code> 原型链    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call 参数1:运行函数的作用域 参数2 agruments或者Array</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum1</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,[num1,num2])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>,num1,num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>encodeURIComponent()</code> //encode字符串<br><code>decodeURICopmonent()</code> //decode字符串<br><code>eval(express)</code> //解析字符串表达式<br><code>eval(&quot;console.log(&#39;我是被解析的表达式&#39;)&quot;)</code>   </p>
<h3 id="6-Math"><a href="#6-Math" class="headerlink" title="6. Math"></a>6. <code>Math</code></h3><p><code>Math.E</code> //e<br><code>Math.LN10</code> //10的自然对数<br><code>Math.LOG10E</code> //以10为底e的对数<br><code>Math.PI</code>  //PI<br><code>Math.SQRT2</code> //2的平方根<br><code>Math.SQRT1_2</code>  // 1/2的平方根   </p>
<p>方法：<br><code>Math.min(Array)</code><br><code>Math.max(Array)</code><br><code>Math.ceil(parm)</code> //向上取整<br><code>Math.floor(parm)</code> //向下取整<br><code>Math.round(parm)</code> //标准的四舍五入<br><code>Math.random()</code>  // 0-1之间的数<br><code>Math.abs(parm)</code> //绝对值</p>
<h2 id="八、面向对象的编程方法"><a href="#八、面向对象的编程方法" class="headerlink" title="八、面向对象的编程方法"></a>八、面向对象的编程方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name:<span class="string">'xiaomo'</span>,</span><br><span class="line">  age:<span class="number">25</span>，</span><br><span class="line">  sayHello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工厂模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age= age;</span><br><span class="line">    o.job =job;</span><br><span class="line">    o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'xiaomo'</span>,<span class="number">25</span>,<span class="string">'programer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'xiaoming'</span>,<span class="number">20</span>,<span class="string">'it'</span>);</span><br></pre></td></tr></table></figure>
<p>构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age,</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'xiaomo'</span>,<span class="number">25</span>,<span class="string">'programer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'xiaoming'</span>,<span class="number">20</span>,<span class="string">'it'</span>);</span><br></pre></td></tr></table></figure>
<p>判断类型 <code>instanceof</code>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">//true</span></span><br><span class="line">person1 <span class="keyword">instanceof</span> Person <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>原型模式    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//实际上隐式的创建一个构造函数constructor</span></span><br><span class="line">Person.prototype.name=<span class="string">'xiaomo'</span>;</span><br><span class="line">Person.prototype.age=<span class="number">25</span>;</span><br><span class="line">Person.prototype.job=<span class="string">'programmer'</span>;</span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前也可以这样</span></span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">  name=<span class="string">'xiaomo'</span>;</span><br><span class="line">  age=<span class="number">25</span>;</span><br><span class="line">  job=<span class="string">'programmer'</span>;</span><br><span class="line">  sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.isPrototypeOf(person1); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person1.name); <span class="comment">//xiaomo</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">'name'</span>) <span class="comment">//false 存在于protoType中，不存在于实例中</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> person1 <span class="comment">//true  虽然实例中没有,但是它的原型链有,所以返回true</span></span><br><span class="line"><span class="built_in">Object</span>.keys(person1) <span class="comment">//会枚举出实例中所有的属性</span></span><br></pre></td></tr></table></figure>
<h2 id="九、定时器和延迟执行"><a href="#九、定时器和延迟执行" class="headerlink" title="九、定时器和延迟执行"></a>九、定时器和延迟执行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟一秒执行fn函数，只执行一次</span></span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> timeoutId = setTimeout(fn,timeout)</span><br><span class="line">  <span class="comment">//清除间歇执行函数</span></span><br><span class="line">  clearTimeout(timeoutId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定时器，每秒执行fn函数，直到清除定时器</span></span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> intervalId = setInterval(fn,timout)</span><br><span class="line">  <span class="comment">//清除定时器</span></span><br><span class="line">  clearInterval(itervalId);</span><br></pre></td></tr></table></figure>
<h2 id="十、BOM-浏览器相关"><a href="#十、BOM-浏览器相关" class="headerlink" title="十、BOM(浏览器相关)"></a>十、BOM(浏览器相关)</h2><h3 id="1-系统对话框"><a href="#1-系统对话框" class="headerlink" title="1. 系统对话框"></a>1. 系统对话框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alert(); <span class="comment">//弹出框</span></span><br><span class="line"></span><br><span class="line">confirm();<span class="comment">//确认框</span></span><br><span class="line"><span class="keyword">if</span>(confirm(<span class="string">'are you sure?'</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sure'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am not sure!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prompt();<span class="comment">//交互框</span></span><br><span class="line"><span class="keyword">var</span> result = promot(<span class="string">"what's up?"</span>，<span class="string">'默认值'</span>);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="literal">null</span>)&#123;</span><br><span class="line">  alert(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-location对象"><a href="#2-location对象" class="headerlink" title="2. location对象"></a>2. location对象</h3><p>参数</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location<span class="selector-class">.hash</span> <span class="comment">//#contents url的hash值</span></span><br><span class="line">location<span class="selector-class">.host</span> <span class="comment">// ip</span></span><br><span class="line">location<span class="selector-class">.hostname</span> <span class="comment">//域名</span></span><br><span class="line">location<span class="selector-class">.href</span> <span class="comment">//http域名</span></span><br><span class="line">location<span class="selector-class">.pathname</span> <span class="comment">//url的目录</span></span><br><span class="line">location<span class="selector-class">.port</span> <span class="comment">//8080</span></span><br><span class="line">location<span class="selector-class">.protocool</span> <span class="comment">//协议</span></span><br><span class="line">location<span class="selector-class">.search</span> <span class="comment">//?q=search</span></span><br><span class="line">location.reload() <span class="comment">//可能从缓存加载</span></span><br><span class="line">location.reload(true) <span class="comment">//重新加载</span></span><br></pre></td></tr></table></figure>
<h3 id="3-navigator对象"><a href="#3-navigator对象" class="headerlink" title="3. navigator对象"></a>3. navigator对象</h3><p> 检测浏览器属性    </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">navigator.appCodeName <span class="comment">//浏览器的名字</span></span><br><span class="line">navigator.appName <span class="comment">//完整的浏览器名称</span></span><br><span class="line">navigator.appVersion <span class="comment">//浏览器的版本</span></span><br><span class="line">navigator.cookieEnabled <span class="comment">//cookie是否启用</span></span><br><span class="line">navigator.javaEnabled() <span class="comment">//java是否启用</span></span><br><span class="line">navigator.language <span class="comment">//主语言 zh-CH</span></span><br><span class="line">navigator.languages <span class="comment">//支持的语言</span></span><br><span class="line">navigator.onLine <span class="comment">//浏览器是否连接到了internet</span></span><br><span class="line">navigator.platofrm <span class="comment">//浏览器的平台 "Win32"</span></span><br><span class="line">navigator.plugins <span class="comment">//返回浏览器安装的插件的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">  name  = name.toLowerCase();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt;navigator.plugins.length;i++)&#123;</span><br><span class="line">    <span class="comment">// &gt;-1表示找到了</span></span><br><span class="line">    <span class="keyword">var</span> isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)&gt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(isTrue)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-history对象"><a href="#4-history对象" class="headerlink" title="4. history对象"></a>4. history对象</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="keyword">go</span>(<span class="number">-1</span>);<span class="comment">//后退一页</span></span><br><span class="line">history.back();</span><br><span class="line"></span><br><span class="line">history.<span class="keyword">go</span>(<span class="number">1</span>);<span class="comment">//前进一页</span></span><br><span class="line">history.forward();</span><br><span class="line"></span><br><span class="line">history.<span class="keyword">go</span>(<span class="string">'xiaomo.info'</span>)<span class="comment">//跳转到最近访问过的该页面</span></span><br><span class="line">history.length==<span class="number">0</span> <span class="comment">//表示这是用户打开浏览器的第一个页面</span></span><br></pre></td></tr></table></figure>
<h2 id="十一、表单"><a href="#十一、表单" class="headerlink" title="十一、表单"></a>十一、表单</h2><h3 id="1-表单属性"><a href="#1-表单属性" class="headerlink" title="1. 表单属性"></a>1. 表单属性</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">acceptCharset 服务器能够处理的字符集</span><br><span class="line">action 接受请求的url</span><br><span class="line">elements 表单所有控件的集合</span><br><span class="line">enctype 请求的编码类型</span><br><span class="line">length 表单中控件的数量</span><br><span class="line"><span class="function"><span class="keyword">method</span> <span class="title">get</span>/<span class="title">post</span></span><br><span class="line"><span class="title">name</span> 表单的名字</span><br><span class="line"><span class="title">reset</span><span class="params">()</span> 重置</span><br><span class="line"><span class="title">submit</span><span class="params">()</span> 提交</span><br><span class="line"><span class="title">target</span></span></span><br></pre></td></tr></table></figure>
<p><code>document.forms</code> 可以取到表单的所有控件    </p>
<h3 id="2-控件"><a href="#2-控件" class="headerlink" title="2. 控件"></a>2. 控件</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">disabled 当前字段是否禁用</span><br><span class="line"><span class="keyword">form</span> 指向当前字段所属表单的指针:只读</span><br><span class="line"><span class="keyword">name</span> 当前字段的名字</span><br><span class="line">readOnly 当前字段只读</span><br><span class="line">tabIndex tab切换的序号</span><br><span class="line"><span class="keyword">type</span> 当前字段的类型</span><br><span class="line"><span class="keyword">value</span> 当前字段提交给服务器的值</span><br></pre></td></tr></table></figure>
<p>修改控件的值</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = document.getElementById(<span class="string">'name'</span>);</span><br><span class="line">name.<span class="keyword">value</span>=<span class="string">'xiaomo'</span></span><br><span class="line">name.focus(); <span class="comment">//把焦点设置到当前字段</span></span><br><span class="line"><span class="comment">//在控件中加入 autofocus="focus" 是一样的效果</span></span><br></pre></td></tr></table></figure>
<p>选择文本<br><code>element.select()</code>     </p>
<p>取得选中的文本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">alertText</span>(<span class="params">username</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span><br><span class="line">    alert(getSelectText(username));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSelectText</span>(<span class="params">textbox</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// html</span></span><br><span class="line">&lt;input type=<span class="string">"input"</span> id=<span class="string">"username"</span> value=<span class="string">"我是测试文本，看一下能不能被选中"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">onclick</span>=<span class="string">"alertText()"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-剪贴板事件"><a href="#3-剪贴板事件" class="headerlink" title="3. 剪贴板事件"></a>3. 剪贴板事件</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">beforecopy</span><br><span class="line">copy</span><br><span class="line">cut</span><br><span class="line">beforepaste</span><br><span class="line">paste</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个公用方</span></span><br><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line"></span><br><span class="line">  getClipboardText:function(<span class="keyword">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData  = (<span class="keyword">event</span>.clipboardData || window.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">'text'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setClipboardText:function(<span class="keyword">event</span>,<span class="keyword">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">event</span>.clipboardData)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">event</span>.clipboardData.setData(<span class="string">"text/plain"</span>,<span class="keyword">value</span>);</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">window.clipboardData</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> window.clipboardData.setData(<span class="string">"txt"</span>,<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventUtil.addHander(txtbox,<span class="string">"paste"</span>,function(<span class="keyword">event</span>))&#123;</span><br><span class="line">  <span class="keyword">event</span>  = EventUtil.getEvent(<span class="keyword">event</span>);</span><br><span class="line">  <span class="keyword">var</span> text = EventUtil.getClipboardText(<span class="keyword">event</span>);</span><br><span class="line">  <span class="keyword">if</span>(!/^\d*$/.test(text))&#123;</span><br><span class="line">    EventUtil.preventDefault(<span class="keyword">event</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/hykun/p/EventUtil.html" target="_blank" rel="external">EventUtil</a></p>
<p>自动切换焦点</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>()&#123;</span><br><span class="line">  function tabForward(<span class="name">event</span>)&#123;</span><br><span class="line">    event = EventUtil.getEvent(<span class="name">event</span>)<span class="comment">;</span></span><br><span class="line">    var target = EventUtil.getTarget(<span class="name">event</span>)<span class="comment">;</span></span><br><span class="line">    if(<span class="name">target.value.length</span> = target.maxLength)&#123;</span><br><span class="line">      var form = target.form<span class="comment">;</span></span><br><span class="line">      for( var i =0<span class="comment">; len = form.elements.length;i&lt;len;i++)&#123;</span></span><br><span class="line">        if(<span class="name">form.elements</span>[<span class="name">i</span>]==target)&#123;</span><br><span class="line">          if(<span class="name">form.elements</span>[<span class="name">i+1</span>])&#123;</span><br><span class="line">            form.elements[<span class="name">i+1</span>].focus()<span class="comment">;</span></span><br><span class="line">          &#125;</span><br><span class="line">          return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  var text1 = document.getElementById(<span class="symbol">'text1</span>')<span class="comment">;</span></span><br><span class="line">  var text2 = document.getElementById(<span class="symbol">'text2</span>')<span class="comment">;</span></span><br><span class="line">  var text3 = document.getElementById(<span class="symbol">'text3</span>')<span class="comment">;</span></span><br><span class="line">  EventUtil.addHander(<span class="name">text1</span>,<span class="symbol">'keyup</span>',tabForward)<span class="comment">;</span></span><br><span class="line">  EventUtil.addHander(<span class="name">text2</span>,<span class="symbol">'keyup</span>',tabForward</span><br><span class="line">  EventUtil.addHander(<span class="name">text3</span>,<span class="symbol">'keyup</span>',tabForward</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure>
<h3 id="4-下拉框-select"><a href="#4-下拉框-select" class="headerlink" title="4. 下拉框 select"></a>4. 下拉框 select</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">add(newOption,relOption) 插入一个<span class="keyword">option</span></span><br><span class="line"><span class="comment">//最佳做法(在列表最后插入一个option)</span></span><br><span class="line">var newOption = new <span class="keyword">Option</span>(<span class="string">"text"</span>,<span class="string">"value"</span>);</span><br><span class="line">selectBox.add(newOption,undefined);</span><br><span class="line"></span><br><span class="line">multiple 是否允许多选</span><br><span class="line"><span class="keyword">options</span> 控件中所有<span class="keyword">options</span>的HTMLCollection</span><br><span class="line">remove(index) 移除指定位置的选项</span><br><span class="line"><span class="comment">//移除指定的选项(这里移除的是第一项)</span></span><br><span class="line">var index = <span class="number">0</span></span><br><span class="line">selectBox.remove(selectBox.<span class="keyword">options</span>[index])</span><br><span class="line">selectedIndex 基于<span class="number">0</span>的选中项的索引,没有选中项<span class="number">-1</span></span><br><span class="line">size 选择框中可见的行数</span><br><span class="line">text 选中项的文本内容</span><br><span class="line">value 选项的值</span><br><span class="line"><span class="comment">//移动一个选项到特定位置(将第2个选项移动到最后一个选项)</span></span><br><span class="line">var optionToMove = selectBox.<span class="keyword">options</span>[<span class="number">1</span>];</span><br><span class="line">selectBox.insertBefore(optionToMove,selectBox.<span class="keyword">options</span>[optionToMove.index<span class="number">-1</span>])</span><br><span class="line">/添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)</span><br><span class="line">selectBox.appendChind(selectBox.<span class="keyword">options</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="5-表单序列化"><a href="#5-表单序列化" class="headerlink" title="5. 表单序列化"></a>5. 表单序列化</h3><p>原则：<br>对表单字段的名字和值进行url编码,使用&amp;分割<br>不发送禁用的表单字段<br>只发送勾选的单选按钮和复选框<br>不发送type为reset和button的按钮<br>多选框中的每选中的值单独一个条目<br>submit的时候,本按钮也会被提交<br>select发送的时候如果有value就发value的值 没有就发text内容  </p>
<p><code>form.serialize()</code>  </p>
<h3 id="6-富文本编辑器"><a href="#6-富文本编辑器" class="headerlink" title="6. 富文本编辑器"></a>6. 富文本编辑器</h3><p>只要加上<code>contenteditable</code>就可以让div可以编辑<br><code>&lt;div id=&quot;richedit&quot; contenteditable&gt;&lt;/div&gt;</code><br>也可以用js控制</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var richedit = <span class="built_in">document</span>.getElementById(<span class="string">'richedit'</span>);</span><br><span class="line">richedit.contenteditable=<span class="string">"true"</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="literal">true</span> <span class="literal">false</span> inherit</span><br><span class="line"><span class="built_in">document</span>.exexCommand(命令,<span class="literal">false</span>,值);</span><br><span class="line"><span class="regexp">//</span><span class="built_in">document</span>.exexCommand(<span class="string">'bold'</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="十二、canvas"><a href="#十二、canvas" class="headerlink" title="十二、canvas"></a>十二、canvas</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个canvas   </span></span><br><span class="line">&lt;canvas id=<span class="string">"drawing"</span> <span class="built_in">width</span>=<span class="string">"200"</span> <span class="built_in">height</span>=<span class="string">"200"</span>&gt;</span><br><span class="line">    您的浏览器不支持canvas</span><br><span class="line">&lt;/canvas&gt;</span><br><span class="line"><span class="comment">//获取canvas</span></span><br><span class="line">document.getElementById(<span class="string">'drawing'</span>);</span><br><span class="line"><span class="built_in">if</span>(drawing.getContext)&#123;</span><br><span class="line">  var context = drawing.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  context.fillReact(<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>); <span class="comment">//画了一个正方形</span></span><br><span class="line">  context.fillStyle=<span class="string">'#fff'</span>; <span class="comment">//填充</span></span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>; <span class="comment">//描边</span></span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十三、html5脚本编程"><a href="#十三、html5脚本编程" class="headerlink" title="十三、html5脚本编程"></a>十三、html5脚本编程</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨文档消息传送</span></span><br><span class="line"><span class="selector-tag">EventUtil</span><span class="selector-class">.addHander</span>(window,<span class="string">"message"</span>,function(event)&#123;</span><br><span class="line">    <span class="selector-tag">if</span>(event.origin=<span class="string">"http://www.wrox.com"</span>)&#123;<span class="comment">//发送消息的文档所在的域</span></span><br><span class="line">      <span class="comment">//接受参数</span></span><br><span class="line">      processMessage(event<span class="selector-class">.data</span>);</span><br><span class="line">      <span class="comment">//可选:向窗口来源发送回执</span></span><br><span class="line">      event<span class="selector-class">.source</span><span class="selector-class">.postMessage</span>(<span class="string">"Receiived"</span>,<span class="string">"http://xiaomo.info"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="十四、本地存储"><a href="#十四、本地存储" class="headerlink" title="十四、本地存储"></a>十四、本地存储</h2><h3 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1. cookie"></a>1. cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CookieUtil = &#123;</span><br><span class="line"><span class="comment">//根据key读取cookie</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">         <span class="comment">//注意对键编码</span></span><br><span class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</span><br><span class="line">            cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</span><br><span class="line">            cookieValue = <span class="literal">null</span>,</span><br><span class="line">            cookieEnd;</span><br><span class="line">        <span class="comment">//找到cookie键</span></span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">             <span class="comment">//键后面第一个分号位置</span></span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>)&#123;</span><br><span class="line">                cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cookie值解码</span></span><br><span class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置cookie</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        <span class="comment">//失效时间，GMT时间格式</span></span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">            cookieText += <span class="string">"; expires="</span> + expires.toGMTString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookieText += <span class="string">"; path="</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">            cookieText += <span class="string">"; domain="</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">            cookieText += <span class="string">"; secure"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可</span></span><br><span class="line">    unset: <span class="function"><span class="keyword">function</span> (<span class="params">name, path, domain, secure</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用util方法   </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CookieUtil<span class="selector-class">.set</span>(<span class="string">'name'</span>,<span class="string">'xiaomo'</span>);</span><br><span class="line">CookieUtil<span class="selector-class">.set</span>(<span class="string">'age'</span>,<span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">console<span class="selector-class">.log</span>(CookieUtil.get(<span class="string">'name'</span>));</span><br><span class="line">console<span class="selector-class">.log</span>(CookieUtil.get(<span class="string">'age'</span>));</span><br><span class="line"></span><br><span class="line">CookieUtil<span class="selector-class">.unset</span>(<span class="string">'name'</span>);</span><br><span class="line">CookieUtil<span class="selector-class">.unset</span>(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-localStorage"><a href="#2-localStorage" class="headerlink" title="2. localStorage"></a>2. localStorage</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Window</span>.localStorage.setItem(<span class="built_in">key</span>,value);<span class="comment">//存储数据</span></span><br><span class="line"><span class="built_in">Window</span>.localStorage.getItem(<span class="built_in">key</span>);<span class="comment">//读取数据</span></span><br><span class="line"><span class="built_in">Window</span>.localStorage.removeItem(<span class="built_in">key</span>);<span class="comment">//删除数据项</span></span><br><span class="line"><span class="built_in">Window</span>.localStorage.<span class="keyword">clear</span>();<span class="comment">//删除所有数据</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[es6语法快速上手]]></title>
      <url>http://blog.xiaomo.info/2016/05/19/es6_syntax/</url>
      <content type="html"><![CDATA[<p>随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/es6.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、相关背景介绍"><a href="#一、相关背景介绍" class="headerlink" title="一、相关背景介绍"></a>一、相关背景介绍</h2><p>我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。</p>
<h2 id="二、babel-一个es6的解析器"><a href="#二、babel-一个es6的解析器" class="headerlink" title="二、babel 一个es6的解析器"></a>二、babel 一个es6的解析器</h2><p>在我们正式讲解ES6语法之前，我们得先了解下<a href="https://babeljs.io/" target="_blank" rel="external">Babel。</a></p>
<p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：</p>
<h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h2><p>最常用的ES6特性</p>
<p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code><br>这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。</p>
<h3 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1. let, const"></a>1. <code>let, const</code></h3><p>这两个的用途与<code>var</code>类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">name</span> = <span class="string">'zach'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    var <span class="keyword">name</span> = <span class="string">'obama'</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">name</span>)  <span class="comment">//obama</span></span><br><span class="line">    break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">name</span>)  <span class="comment">//obama</span></span><br></pre></td></tr></table></figure>
<p>使用<code>var</code> 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而<code>let</code>则实际上为<code>JavaScript</code>新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>
<p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clickBoxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; clickBoxs.length; i++)&#123;</span><br><span class="line">    clickBoxs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratorFactory</span><span class="params">(i)</span>&#123;</span></span><br><span class="line">    var onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span>&#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(<span class="built_in">i</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onclick;</span><br><span class="line">&#125;</span><br><span class="line">var clickBoxs = document.querySelectorAll(<span class="string">'.clickBox'</span>)</span><br><span class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; clickBoxs.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    clickBoxs[i].onclick = iteratorFactory(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>const</code>也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">PI</span> = Math.<span class="built_in">PI</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PI</span> = <span class="number">23</span> //<span class="keyword">Module</span> build failed: SyntaxError: /es6/app.js: <span class="string">"PI"</span> is read-only</span><br></pre></td></tr></table></figure>
<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-class-extends-super"><a href="#2-class-extends-super" class="headerlink" title="2. class, extends, super"></a>2. <code>class</code>, <code>extends</code>, <code>super</code></h3><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p>
<p>有了ES6我们不再烦恼！</p>
<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">type</span> = <span class="symbol">'anima</span>l'</span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>.<span class="keyword">type</span> + ' says ' + say)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let animal = <span class="keyword">new</span> <span class="type">Animal</span>()</span><br><span class="line">animal.says(<span class="symbol">'hell</span>o') <span class="comment">//animal says hello</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">type</span> = <span class="symbol">'ca</span>t'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let cat = <span class="keyword">new</span> <span class="type">Cat</span>()</span><br><span class="line">cat.says(<span class="symbol">'hell</span>o') <span class="comment">//cat says hello</span></span><br></pre></td></tr></table></figure>
<p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p>
<p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p>
<p><code>super</code>关键字，它指代父类的实例（即父类的this对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>
<p><code>ES6</code>的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用s<code>uper</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>
<p>P.S 如果你写react的话，就会发现以上三个东西在最新版<code>React</code>中出现得很多。创建的每个component都是一个继承<code>React.Component</code>的类。<a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank" rel="external">详见react文档</a></p>
<h3 id="3-arrow-function"><a href="#3-arrow-function" class="headerlink" title="3. arrow function"></a>3. <code>arrow function</code></h3><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(i)</span></span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></span><br><span class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure>
<p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用<code>{}</code>把代码包起来：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="keyword">x</span>, y) &#123;</span><br><span class="line">    <span class="keyword">x</span>++<span class="comment">;</span></span><br><span class="line">    y--<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">x</span> + y<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">x</span>, y) =&gt; &#123;<span class="keyword">x</span>++<span class="comment">; y--; return x+y&#125;</span></span><br></pre></td></tr></table></figure>
<p>除了看上去更简洁以外，<code>arrow function</code>还有一项超级无敌的功能！<br>长期以来，<code>JavaScript</code>语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//undefined says hi</span></span><br></pre></td></tr></table></figure>
<p>运行上面的代码会报错，这是因为<code>setTimeout</code>中的<code>this</code>指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>
<ol>
<li>第一种是将this传给self,再用self来指代this</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">says(say)&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>第二种方法是用bind(this),即</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">says(say)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout( () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></span><br></pre></td></tr></table></figure>
<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>
<h3 id="4-template-string"><a href="#4-template-string" class="headerlink" title="4. template string"></a>4. <code>template string</code></h3><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p>
<p>大家可以先看下面一段代码：</p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$(</span><span class="comment">"#result"</span>).append(</span><br><span class="line">  <span class="comment">"There are &lt;b&gt;"</span> + basket.count + <span class="comment">"&lt;/b&gt; "</span> +</span><br><span class="line">  <span class="comment">"items in your basket, "</span> +</span><br><span class="line">  <span class="comment">"&lt;em&gt;"</span> + basket.onSale +</span><br><span class="line">  <span class="comment">"&lt;/em&gt; are on sale!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).<span class="keyword">append</span>(`</span><br><span class="line">  There are &lt;b&gt;<span class="variable">$&#123;basket</span>.<span class="keyword">count</span>&#125;&lt;/b&gt; items</span><br><span class="line">   <span class="keyword">in</span> your basket, &lt;em&gt;<span class="variable">$&#123;basket</span>.onSale&#125;&lt;/em&gt;</span><br><span class="line">  are <span class="keyword">on</span> sale!</span><br><span class="line">`);</span><br></pre></td></tr></table></figure>
<p>用反引号（\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p>
<p>  <a href="https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js" target="_blank" rel="external">React Router</a>从第1.0.3版开始也使用ES6语法了，比如这个例子：</p>
<p><code>&lt;Link to={&#39;/taco/${taco.name}&#39;}&gt;{taco.name}&lt;/Link&gt;</code></p>
<h3 id="5-destructuring"><a href="#5-destructuring" class="headerlink" title="5. destructuring"></a>5. <code>destructuring</code></h3><p>  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<p>看下面的例子：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">cat</span> = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="keyword">cat</span>, <span class="keyword">do</span><span class="variable">g:</span> dog&#125;</span><br><span class="line">console.<span class="built_in">log</span>(zoo)  //Object &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="string">"ken"</span>, <span class="keyword">do</span><span class="variable">g:</span> <span class="string">"lili"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>用ES6完全可以像下面这么写：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">cat</span> = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="keyword">cat</span>, dog&#125;</span><br><span class="line">console.<span class="built_in">log</span>(zoo)  //Object &#123;<span class="keyword">ca</span><span class="variable">t:</span> <span class="string">"ken"</span>, <span class="keyword">do</span><span class="variable">g:</span> <span class="string">"lili"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>反过来可以这么写：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dog = &#123;<span class="class"><span class="keyword">type</span>: '<span class="title">animal</span>', <span class="title">many</span>: 2&#125;</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="class"><span class="keyword">type</span>, <span class="title">many</span>&#125; </span>= dog</span><br><span class="line">console.log(<span class="class"><span class="keyword">type</span>, <span class="title">many</span>)   //<span class="title">animal</span> 2</span></span><br></pre></td></tr></table></figure>
<h3 id="6-default-rest"><a href="#6-default-rest" class="headerlink" title="6. default, rest"></a>6. <code>default</code>, <code>rest</code></h3><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’ 来指定默认值。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> animal(<span class="class"><span class="keyword">type</span>)&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> </span>= <span class="class"><span class="keyword">type</span> || '<span class="title">cat</span>'  </span></span><br><span class="line">    console.log(<span class="class"><span class="keyword">type</span>)</span></span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure>
<p>如果用ES6我们而已直接这么写：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span><span class="params">(<span class="keyword">type</span> = <span class="string">'cat'</span>)</span><span class="comment">&#123;</span><br><span class="line">    console.log(type)</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="title">animal</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>最后一个rest语法也很简单，直接看例子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span><span class="params">(<span class="rest_arg">...types</span>)</span></span>&#123;</span><br><span class="line">    console.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure>
<p>而如果不用ES6的话，我们则得使用ES5的<code>arguments</code>。</p>
<h3 id="7-import-export"><a href="#7-import-export" class="headerlink" title="7. import export"></a>7. <code>import export</code></h3><p>这两个家伙对应的就是<code>es6</code>自己的<code>module</code>功能。</p>
<p>我们之前写的<code>Javascript</code>一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p>
<p>这有可能导致两个问题：</p>
<ol>
<li>一方面js代码变得很臃肿，难以维护;</li>
<li>另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;<br>在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</li>
</ol>
<p>如果想了解更多AMD，尤其是require.js，可以参看这个教程<br><a href="http://requirejs.org/docs/why.html" target="_blank" rel="external">why modules on the web are useful and the mechanisms that can be used on the web today to enable them</a></p>
<p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</p>
<blockquote>
<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>
</blockquote>
<p>上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码…</p>
<p> 传统的写法<br>首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p>
<p>首先定义:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line">define(<span class="string">'content.js'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'A cat'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后require:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'./content.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(animal);   <span class="comment">//A cat</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>那CommonJS是怎么写的呢？</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="selector-tag">var</span> animal = require(<span class="string">'./content.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line">module<span class="selector-class">.exports</span> = <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure>
<p> ES6的写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure>
<p>以上我把三者都列出来了，妈妈再也不用担心我写混淆了…</p>
<h3 id="8-ES6-module的其他高级用法"><a href="#8-ES6-module的其他高级用法" class="headerlink" title="8. ES6 module的其他高级用法"></a>8. ES6 module的其他高级用法</h3><p>输出\输入多个变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span>    </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = <span class="string">'dog'</span></span><br></pre></td></tr></table></figure>
<p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; say, type &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;type&#125;</span> says <span class="subst">$&#123;says&#125;</span>`</span>)  <span class="comment">//The dog says Hello</span></span><br></pre></td></tr></table></figure>
<p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。</p>
<p>如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> animal, &#123; say, type &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;type&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>
<h3 id="9-修改变量名"><a href="#9-修改变量名" class="headerlink" title="9. 修改变量名"></a>9. 修改变量名</h3><p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p>
<p>//index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> animal, &#123; say, type <span class="keyword">as</span> animalType &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;animalType&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure></p>
<h3 id="10-模块的整体加载"><a href="#10-模块的整体加载" class="headerlink" title="10. 模块的整体加载"></a>10. 模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> animal, * <span class="keyword">as</span> content <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = content.say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;content.type&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>
<p>通常星号*结合as一起使用比较合适。</p>
<ol>
<li>终极秘籍</li>
</ol>
<p>考虑下面的场景：<br>上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：</p>
<p><code>import { type } from &#39;./content&#39;</code></p>
<p>由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。</p>
<p>ES6帮我们实现了！</p>
<p>不过，目前无论是webpack还是browserify都还不支持这一功能…</p>
<p>如果你现在就想实现这一功能的话，可以尝试使用rollup.js</p>
<p>他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。</p>
<p>看看他们官方的解释吧：</p>
<blockquote>
<p>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It’s a revolution in how we use libraries in JavaScript, and it’s happening right now.</p>
</blockquote>
<p>希望更全面了解es6伙伴们可以去看阮一峰所著的电子书<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack进阶之loader篇]]></title>
      <url>http://blog.xiaomo.info/2016/05/17/webpack_link/</url>
      <content type="html"><![CDATA[<p>webpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/webpack.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、loaders之-预处理"><a href="#一、loaders之-预处理" class="headerlink" title="一、loaders之 预处理"></a>一、loaders之 预处理</h2><ul>
<li>css-loader 处理css中路径引用等问题</li>
<li>style-loader 动态把样式写入css</li>
<li>sass-loader scss编译器</li>
<li>less-loader less编译器</li>
<li>postcss-loader scss再处理</li>
</ul>
<p><code>npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader</code>  </p>
<p>栗子:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.css$/, loader: <span class="string">"style!css?sourceMap!postcss"</span>&#125;,</span><br><span class="line">    &#123;<span class="attribute">test</span>: /\.less$/, loader: <span class="string">"style!css!less|postcss"</span>&#125;,</span><br><span class="line">    &#123;<span class="attribute">test</span>: /\.scss$/, loader: <span class="string">"style!css!sass|postcss"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、loaders之-js处理"><a href="#二、loaders之-js处理" class="headerlink" title="二、loaders之 js处理"></a>二、loaders之 js处理</h2><ul>
<li>babel-loader</li>
<li>jsx-loader</li>
</ul>
<p><code>npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader</code></p>
<p>栗子  </p>
<p>新建一个名字为<code>.babelrc</code>的文件</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"react"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>:[<span class="string">"antd"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个名字为<code>webpack.config.js</code>文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports =&#123;</span><br><span class="line"><span class="symbol"> entry:</span> <span class="string">'./entry.js'</span>,</span><br><span class="line"><span class="symbol"> output:</span> &#123; <span class="string">path:</span> __dirname,</span><br><span class="line"><span class="symbol"> filename:</span> <span class="string">'bundle.js'</span></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="symbol"> module:</span> &#123;</span><br><span class="line"><span class="string">loaders:</span> [</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/\.js$/</span>, <span class="string">loader:</span> <span class="string">"babel"</span>, <span class="string">exclude:</span> <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/\.jsx$/</span>, <span class="string">loader:</span> <span class="string">"jsx-loader"</span>&#125;</span><br><span class="line">  &#123;<span class="string">test:</span> <span class="regexp">/.css$/</span>, <span class="string">loader:</span> <span class="string">'style!css'</span>&#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="三、loaders之-图片处理"><a href="#三、loaders之-图片处理" class="headerlink" title="三、loaders之 图片处理"></a>三、loaders之 图片处理</h2><ul>
<li>url-loader</li>
</ul>
<p><code>npm install --save-dev url-loadr</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.(jpg|png)$/, loader: <span class="string">"url?limit=8192"</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、loaders之-文件处理"><a href="#四、loaders之-文件处理" class="headerlink" title="四、loaders之 文件处理"></a>四、loaders之 文件处理</h2><ul>
<li>file-loader</li>
</ul>
<p><code>npm install --save-dev file-loader</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span>: &#123;</span></span><br><span class="line">  <span class="symbol">loaders:</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="symbol">test:</span> /\.(png<span class="params">|jpg|</span>jpeg<span class="params">|gif|</span>svg<span class="params">|woff|</span>woff2<span class="params">|ttf|</span>eot)$/,</span><br><span class="line">      <span class="symbol">loader:</span> <span class="string">'file'</span></span><br><span class="line">      &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、loaders之-json处理"><a href="#五、loaders之-json处理" class="headerlink" title="五、loaders之 json处理"></a>五、loaders之 json处理</h2><ul>
<li>json-loader</li>
</ul>
<p><code>npm install --save-dev json-loader</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123;test: /\.json$/,loader: <span class="string">'json'</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六、loaders之-html处理"><a href="#六、loaders之-html处理" class="headerlink" title="六、loaders之 html处理"></a>六、loaders之 html处理</h2><ul>
<li>raw-loader</li>
</ul>
<p><code>npm install --save-dev raw-loader</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>: &#123;</span><br><span class="line">  <span class="attribute">loaders</span>: [</span><br><span class="line">    &#123; test: /\.html$/,loader: <span class="string">'raw'</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack进阶之插件篇]]></title>
      <url>http://blog.xiaomo.info/2016/05/17/webpack_plugins/</url>
      <content type="html"><![CDATA[<p>上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/webpack.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、插件篇"><a href="#一、插件篇" class="headerlink" title="一、插件篇"></a>一、插件篇</h2><h3 id="1-自动补全css3前缀"><a href="#1-自动补全css3前缀" class="headerlink" title="1. 自动补全css3前缀"></a>1. 自动补全css3前缀</h3><p> autoprefixer  </p>
<blockquote>
<p>官方是这样说的：<code>Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website</code><br>，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  </p>
</blockquote>
<p>举个栗子：最新的弹性盒模型flux<br>实际代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:fullscreen</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>插件自动补充后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。</p>
<p>使用方法:</p>
<p><code>cnpm install --save-dev autoprefixer postcss-loader</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">module</span>.exports=&#123;</span><br><span class="line">  <span class="comment">//其他配置这里就不写了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">module</span>:&#123;</span><br><span class="line">    loaders:[</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">//在原有基础上加上一个postcss的loader就可以了</span></span><br><span class="line">      loaders:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss:[autoprefixer(&#123;browsers:[<span class="string">'last 2 versions'</span>]&#125;)]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-自动生成html插件"><a href="#2-自动生成html插件" class="headerlink" title="2. 自动生成html插件"></a>2. 自动生成html插件</h3><p>html-webpack-plugin</p>
<p><code>cnpm install html-webpack-plugin --save-dev</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">module</span>.exports=&#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用:它会在dist目录下自动生成一个index.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他配置参数:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">entry</span>: <span class="string">'index.js'</span>,</span><br><span class="line">  <span class="attribute">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: <span class="string">'dist'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">plugins</span>: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attribute">title</span>: <span class="string">'My App'</span>,</span><br><span class="line">      <span class="attribute">filename</span>: <span class="string">'admin.html'</span>,</span><br><span class="line">      <span class="attribute">template</span>:<span class="string">'header.html'</span>,</span><br><span class="line">      <span class="attribute">inject</span>: <span class="string">'body'</span>,</span><br><span class="line">      <span class="attribute">favicon</span>:<span class="string">'./images/favico.ico'</span>,</span><br><span class="line">      <span class="attribute">minify</span>:true,</span><br><span class="line">      <span class="attribute">hash</span>:true,</span><br><span class="line">      <span class="attribute">cache</span>:false,</span><br><span class="line">      <span class="attribute">showErrors</span>:false,</span><br><span class="line">      <span class="string">"chunks"</span>: &#123;</span><br><span class="line">      <span class="string">"head"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"assets/head_bundle.js"</span>,</span><br><span class="line">        <span class="string">"css"</span>: [ <span class="string">"main.css"</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">xhtml</span>:false</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">--- header.html ---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>作用：   </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title:</span> 设置title的名字   </span><br><span class="line"><span class="string">filename:</span> 设置这个html的文件名   </span><br><span class="line"><span class="string">template:</span>要使用的模块的路径  </span><br><span class="line"><span class="string">inject:</span> 把模板注入到哪个标签后 <span class="string">'body'</span>,   </span><br><span class="line"><span class="string">favicon:</span> 给html添加一个favicon  <span class="string">'./images/favico.ico'</span>,   </span><br><span class="line"><span class="string">minify:</span>是否压缩  <span class="literal">true</span> <span class="literal">false</span>   </span><br><span class="line"><span class="string">hash:</span>是否hash化 <span class="literal">true</span> <span class="literal">false</span> ,     </span><br><span class="line"><span class="string">cache:</span>是否缓存,   </span><br><span class="line"><span class="string">showErrors:</span>是否显示错误,  </span><br><span class="line"><span class="string">chunks:</span>目前没太明白  </span><br><span class="line"><span class="string">xhtml:</span>是否自动毕业标签 默认<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="3-提取样式插件"><a href="#3-提取样式插件" class="headerlink" title="3. 提取样式插件"></a>3. 提取样式插件</h3><p>extract-text-webpack-plugin  </p>
<blockquote>
<p>官网是这么解释的<code>Extract text from bundle into a file.</code>,把额外的数据加到编译好的文件中</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: <span class="regexp">/\.css$/</span>, loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>) &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                template: <span class="string">'./src/public/index.html'</span>,</span><br><span class="line">                inject: <span class="string">'body'</span></span><br><span class="line">            &#125;),</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].[hash].css"</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：将css放到index.html的body上面</p>
<h3 id="4-拷贝资源插件"><a href="#4-拷贝资源插件" class="headerlink" title="4. 拷贝资源插件"></a>4. 拷贝资源插件</h3><p> copy-webpack-plugin   </p>
<blockquote>
<p>官方这样解释 <code>Copy files and directories in webpack</code>,在webpack中拷贝文件和文件夹</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> <span class="comment">--save-dev copy-webpack-plugin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">    <span class="keyword">from</span>: __dirname + <span class="string">'/src/public'</span></span><br><span class="line">&#125;]),</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用：把public 里面的内容全部拷贝到编译目录</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">其他说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">from</td>
<td style="text-align:center">定义要拷贝的源目录</td>
<td style="text-align:center">from: __dirname + ‘/src/public’</td>
</tr>
<tr>
<td style="text-align:center">to</td>
<td style="text-align:center">定义要烤盘膛的目标目录</td>
<td style="text-align:center">from: __dirname + ‘/dist’</td>
</tr>
<tr>
<td style="text-align:center">toType</td>
<td style="text-align:center"><code>file</code> 或者 <code>dir</code></td>
<td style="text-align:center">可选，默认是文件</td>
</tr>
<tr>
<td style="text-align:center">force</td>
<td style="text-align:center">强制覆盖先前的插件</td>
<td style="text-align:center">可选 默认false</td>
</tr>
<tr>
<td style="text-align:center">context</td>
<td style="text-align:center">不知道作用</td>
<td style="text-align:center">可选 默认 base context 可用  specific context</td>
</tr>
<tr>
<td style="text-align:center">flatten</td>
<td style="text-align:center">只拷贝文件不管文件夹</td>
<td style="text-align:center">默认是false</td>
</tr>
<tr>
<td style="text-align:center">ignore</td>
<td style="text-align:center">忽略拷贝指定的文件</td>
<td style="text-align:center">可以用模糊匹配</td>
</tr>
</tbody>
</table>
<h3 id="5-全局挂载插件"><a href="#5-全局挂载插件" class="headerlink" title="5. 全局挂载插件"></a>5. 全局挂载插件</h3><p>webpack.ProvidePlugin [webpack内置插件 ]    </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new webpack.ProvidePlugin(&#123;</span><br><span class="line">    $: <span class="string">"jquery"</span>,</span><br><span class="line">    jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">    <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">&#125;))</span><br><span class="line">new webpack.NoErrorsPlugin(),</span><br><span class="line">new webpack<span class="selector-class">.optimize</span><span class="selector-class">.DedupePlugin</span>(),</span><br><span class="line">new webpack<span class="selector-class">.optimize</span><span class="selector-class">.UglifyJsPlugin</span>(),</span><br><span class="line">new webpack<span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(<span class="string">'common.js'</span>)</span><br></pre></td></tr></table></figure>
<p>作用: 和上面5个一一对应  </p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把一些需要的东西绑定到<span class="built_in">window</span>上，暴露出来 成为全局变量</span><br><span class="line">不显示错误插件</span><br><span class="line">具体不是太清楚，先记录着</span><br><span class="line">丑化js 混淆代码而用</span><br><span class="line">提取公共代码的插件</span><br></pre></td></tr></table></figure>
<h2 id="二、一个完整的栗子"><a href="#二、一个完整的栗子" class="headerlink" title="二、一个完整的栗子"></a>二、一个完整的栗子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modules</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Env</span><br><span class="line"> * Get npm lifecycle event to identify the environment</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> ENV = process.env.npm_lifecycle_event;</span><br><span class="line"><span class="keyword">var</span> isTest = ENV === <span class="string">'test'</span> || ENV === <span class="string">'test-watch'</span>;</span><br><span class="line"><span class="keyword">var</span> isProd = ENV === <span class="string">'build'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">makeWebpackConfig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    config.entry = isTest ? &#123;&#125; : &#123;</span><br><span class="line">        app: <span class="string">'./src/app/app.js'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    config.output = isTest ? &#123;&#125; : &#123;</span><br><span class="line">        <span class="comment">// Absolute output directory</span></span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line"></span><br><span class="line">        publicPath: isProd ? <span class="string">'/'</span> : <span class="string">'http://localhost:8080/'</span>,</span><br><span class="line"></span><br><span class="line">        filename: isProd ? <span class="string">'[name].[hash].js'</span> : <span class="string">'[name].bundle.js'</span>,</span><br><span class="line"></span><br><span class="line">        chunkFilename: isProd ? <span class="string">'[name].[hash].js'</span> : <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTest) &#123;</span><br><span class="line">        config.devtool = <span class="string">'inline-source-map'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">        config.devtool = <span class="string">'source-map'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config.devtool = <span class="string">'eval-source-map'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.module = &#123;</span><br><span class="line">        preLoaders: [],</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'babel'</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css/</span>,</span><br><span class="line">            loader: isTest ? <span class="string">'null'</span> : ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?sourceMap!postcss'</span>)</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/</span>,</span><br><span class="line">            loader: <span class="string">'file'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">            loader: <span class="string">'json'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">            loader: <span class="string">'style!css!sass'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">            loader: <span class="string">'raw'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (isTest) &#123;</span><br><span class="line">        config.module.preLoaders.push(&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: [</span><br><span class="line">                <span class="regexp">/node_modules/</span>,</span><br><span class="line">                <span class="regexp">/\.spec\.js$/</span></span><br><span class="line">            ],</span><br><span class="line">            loader: <span class="string">'isparta-instrumenter'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.postcss = [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            browsers: [<span class="string">'last 2 version'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    config.plugins = [];</span><br><span class="line">    <span class="keyword">if</span> (!isTest) &#123;</span><br><span class="line">        config.plugins.push(</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                template: <span class="string">'./src/public/index.html'</span>,</span><br><span class="line">                inject: <span class="string">'body'</span></span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[hash].css'</span>, &#123;disable: !isProd&#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">        config.plugins.push(</span><br><span class="line">            <span class="keyword">new</span> webpack.NoErrorsPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.DedupePlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">                <span class="keyword">from</span>: __dirname + <span class="string">'/src/public'</span></span><br><span class="line">            &#125;]),</span><br><span class="line">            <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">                $: <span class="string">"jquery"</span>,</span><br><span class="line">                jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">                <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">            &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.devServer = &#123;</span><br><span class="line">        contentBase: <span class="string">'./src/public'</span>,</span><br><span class="line">        stats: <span class="string">'minimal'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h2 id="三、调试技巧"><a href="#三、调试技巧" class="headerlink" title="三、调试技巧"></a>三、调试技巧</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">if</span> (isTest) &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'inline-source-map'</span>;</span><br><span class="line">&#125; <span class="built_in">else</span> <span class="built_in">if</span> (isProd) &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'source-map'</span>;</span><br><span class="line">&#125; <span class="built_in">else</span> &#123;</span><br><span class="line">    <span class="built_in">config</span>.devtool = <span class="string">'eval-source-map'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用: 使用source-map可以在debug的时候看到源代码，方便 查错</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack相关命令参数]]></title>
      <url>http://blog.xiaomo.info/2016/05/17/webpack_params/</url>
      <content type="html"><![CDATA[<p>使用webpack的同学，你真的熟练应用webpack么？其实直接<code>webpack --help</code>就可以看到，但是有很多人还是在网上到处搜相关参数<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/webpack.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、webpack相关参数"><a href="#一、webpack相关参数" class="headerlink" title="一、webpack相关参数"></a>一、webpack相关参数</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">webpack --config webpack.config.dev.js   <span class="comment">//使用另一份配置文件（比如webpack.config2.js）来打包</span></span><br><span class="line">webpack --watch   <span class="comment">//监听变动并自动打包</span></span><br><span class="line">webpack <span class="comment">//执行一次开发时的编译</span></span><br><span class="line">webpack -p <span class="comment">//执行一次生成环境的编译（压缩）</span></span><br><span class="line">webpack --watch <span class="comment">//在开发时持续监控增量编译（很快）</span></span><br><span class="line">webpack -<span class="keyword">d</span> <span class="comment">//让他生成SourceMaps</span></span><br><span class="line">webpack --progress <span class="comment">//显示编译进度</span></span><br><span class="line">webpack --colors <span class="comment">//显示静态资源的颜色</span></span><br><span class="line">webpack --<span class="keyword">sort</span>-modules-<span class="keyword">by</span>, --<span class="keyword">sort</span>-chunks-<span class="keyword">by</span>, --<span class="keyword">sort</span>-assets-<span class="keyword">by</span> <span class="comment">//将modules/chunks/assets进行列表排序</span></span><br><span class="line">webpack --<span class="keyword">display</span>-chunks <span class="comment">//展示编译后的分块</span></span><br><span class="line">webpack --<span class="keyword">display</span>-reasons <span class="comment">//显示更多引用模块原因</span></span><br><span class="line">webapck --<span class="keyword">display</span>-<span class="keyword">error</span>-details <span class="comment">//显示更多报错信息</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用 Excel 生成和管理 Markdown 表格]]></title>
      <url>http://blog.xiaomo.info/2016/05/16/excel_markdown_table/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2>Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。<p></p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/markdown.png" alt="点击访问小莫的github"></a></p>
<h2 id="填写表格"><a href="#填写表格" class="headerlink" title="填写表格"></a>填写表格</h2><p>在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 <strong><code>:-:</code></strong>，要右对齐的填<strong><code>-:</code></strong>，其它全部填上<strong><code>-</code></strong>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>:-:</strong></td>
<td><strong>-</strong></td>
<td style="text-align:center"><strong>:-:</strong></td>
<td style="text-align:right"><strong>-</strong>:</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
<ul>
<li>如图左上角，表头也不要留空，填上<code>-</code>提高兼容性。</li>
</ul>
<h2 id="生成表格"><a href="#生成表格" class="headerlink" title="生成表格"></a>生成表格</h2><p>选中表格，复制，然后粘贴到 Markdown 编辑器中</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-	</span>左对齐	居中对齐	右对齐</span><br><span class="line"><span class="meta">:-:</span>	:-	:-:	-:</span><br><span class="line">1	Left	Center	Right</span><br><span class="line">2	Left	Center	Right</span><br><span class="line">3	Left	Center	Right</span><br></pre></td></tr></table></figure>
<p>复制出来的 Excel 默认以<code>tab</code>作为单元格分隔符，而 Markdown 则以<code>|</code>为分隔符。顺理成章，当我们使用 <code>|</code> 对原<code>tab</code>分隔符进行替换后，即可生成 Markdown 化的表格。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-|<span class="string">默认左对齐</span>|<span class="string">居中对齐</span>|<span class="string">内容右对齐</span><br><span class="line">:-:</span>|<span class="string">-</span>|<span class="string">:-:</span>|<span class="string">-:</span><br><span class="line">1</span>|<span class="string">Left</span>|<span class="string">Center</span>|Right</span><br><span class="line">2|<span class="string">Left</span>|<span class="string">Center</span>|Right</span><br><span class="line">3|<span class="string">Left</span>|<span class="string">Center</span>|Right</span><br></pre></td></tr></table></figure>
<p>表格效果大致如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
<h2 id="处理表格"><a href="#处理表格" class="headerlink" title="处理表格"></a>处理表格</h2><p>在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。</p>
<ul>
<li>可以对表格进行快速拖拽排序；</li>
<li>可以用公式 <code>=row()</code> 给表格添加自动序号；</li>
<li>当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等；</li>
</ul>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><ul>
<li>Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中；</li>
<li>这种写法的表格，目前已知在 GitHub 上不能正确解析；</li>
<li><a href="/2015/09/20/windows-mac-software/">自用 Windows 和 Mac 软件推荐</a>，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。</li>
<li>顺便推荐一个在线表格生成网站，<a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">Tables Generator.com</a>，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs的process模块]]></title>
      <url>http://blog.xiaomo.info/2016/05/16/node_process/</url>
      <content type="html"><![CDATA[<p>我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、process属性。"><a href="#一、process属性。" class="headerlink" title="一、process属性。"></a>一、process属性。</h2><ul>
<li>process.pid：当前进程的进程号。</li>
<li>process.version：Node的版本，比如v0.10.18。</li>
<li>process.platform：当前系统平台，比如Linux。</li>
<li>process.title：默认值为“node”，可以自定义该值。</li>
<li>process.argv：当前进程的命令行参数数组。</li>
<li>process.env：指向当前shell的环境变量，比如process.env.HOME。</li>
<li>process.execPath：运行当前进程的可执行文件的绝对路径。</li>
<li>process.stdout：指向标准输出。</li>
<li>process.stdin：指向标准输入。</li>
<li>process.stderr：指向标准错误。</li>
</ul>
<p>下面是主要属性的介绍。</p>
<h3 id="1-stdout"><a href="#1-stdout" class="headerlink" title="1. stdout"></a>1. stdout</h3><p>process.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.<span class="built_in">log</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">    process.stdout.<span class="built_in">write</span>(<span class="keyword">format</span>.apply(this, arguments) + <span class="string">'\n'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-argv"><a href="#2-argv" class="headerlink" title="2. argv"></a>2. argv</h3><p>process.argv返回命令行脚本的各个参数组成的数组。</p>
<p>先新建一个脚本文件argv.js。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argv.js</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="string">"argv: "</span>,process.argv);</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="string">"argc: "</span>,process.argc);</span><br></pre></td></tr></table></figure>
<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node argv.js a b c</span><br><span class="line"><span class="meta"># [ <span class="string">'node'</span>, <span class="string">'/path/to/argv.js'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argv.js</span></span><br><span class="line"><span class="keyword">var</span> myArgs = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArgs);</span><br></pre></td></tr></table></figure>
<h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><ul>
<li>process对象提供以下方法：</li>
<li>process.cwd()：返回运行当前脚本的工作目录的路径。_</li>
<li>process.chdir()：改变工作目录。</li>
<li>process.exit()：退出当前进程。</li>
<li>process.nextTick()：将一个回调函数放在下次事件循环的顶部。</li>
</ul>
<p>process.chdir()改变工作目录的例子。  </p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"># <span class="string">'/home/aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">process</span>.chdir(<span class="string">'/home/bbb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"># <span class="string">'/home/bbb'</span></span><br></pre></td></tr></table></figure>
<p>process.nextTick()的例子，指定下次事件循环首先运行的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Next event loop!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'Next event loop!'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-事件"><a href="#4-事件" class="headerlink" title="4. 事件"></a>4. 事件</h3><p>（1）exit事件<br>当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">process</span><span class="selector-class">.on</span>(<span class="string">'exit'</span>, function () &#123;</span><br><span class="line">  fs<span class="selector-class">.writeFileSync</span>(<span class="string">'/tmp/myfile'</span>, <span class="string">'This MUST be saved on exit.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>（2）uncaughtException事件<br>当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">process</span><span class="selector-class">.on</span>(<span class="string">'uncaughtException'</span>, function (err) &#123;</span><br><span class="line">  console<span class="selector-class">.error</span>(<span class="string">'An uncaught error occurred!'</span>);</span><br><span class="line">  console<span class="selector-class">.error</span>(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>摘自阮老师博客   <a href="http://javascript.ruanyifeng.com/nodejs/basic.html#toc22" target="_blank" rel="external">Node.js 概述</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的个人简历]]></title>
      <url>http://blog.xiaomo.info/2016/05/14/about_me/</url>
      <content type="html"><![CDATA[<p>我的简历<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a><br><a href="http://static.xiaomo.info/images/aboutMe.doc" target="_blank" rel="external">点击下载简历</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack使用之基础篇]]></title>
      <url>http://blog.xiaomo.info/2016/05/14/webpack_basic_use/</url>
      <content type="html"><![CDATA[<p>说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/webpack.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、基本简介"><a href="#一、基本简介" class="headerlink" title="一、基本简介"></a>一、基本简介</h2><p>webpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比</p>
<h3 id="1-requirejs"><a href="#1-requirejs" class="headerlink" title="1. requirejs"></a>1. requirejs</h3><p>很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，<br>不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。</p>
<h3 id="2-browserify"><a href="#2-browserify" class="headerlink" title="2. browserify"></a>2. browserify</h3><p>是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。<br>并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。</p>
<h3 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3. webpack"></a>3. webpack</h3><p>支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，<br>包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？</p>
<h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="1-IDE推荐"><a href="#1-IDE推荐" class="headerlink" title="1. IDE推荐"></a>1. IDE推荐</h3><p> <code>IDEA</code>、<code>webstrom</code>、<code>sublime</code>、<code>atom</code>  都是很不错的编辑工具，<code>idea</code>大而全，<code>webstrom</code>是<code>idea</code>的简化版、<code>sublime</code>轻量但不失稳重、<code>atom</code>新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用<code>IDEA</code>、辅助<code>atom</code>。因为我是一个<code>java</code>党啊，少不了<code>IDEA</code>，<code>atom</code>的界面是我最喜欢的。</p>
<h3 id="2-开始建项目写配置"><a href="#2-开始建项目写配置" class="headerlink" title="2. 开始建项目写配置"></a>2. 开始建项目写配置</h3><p> a.新建项目 <code>mkdir webpack-study &amp;&amp; cd webpack-study</code><br> b.初始化环境 <code>npm init -y</code><br> c.安装工具(如果你没安装taobao源，把cnpm换成npm)  <code>npm install --save-dev webpack webpack-dev-server</code><br>说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server<br>d.新建配置文件  (名字一定不能换) <code>touch webpack.config.js</code><br>e. 配置webpack</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.exprots=&#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>
<h2 id="三、-写一个小测试"><a href="#三、-写一个小测试" class="headerlink" title="三、 写一个小测试"></a>三、 写一个小测试</h2><h3 id="1-新建入口文件并写入文件"><a href="#1-新建入口文件并写入文件" class="headerlink" title="1. 新建入口文件并写入文件"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code><br><code>document.write(&#39;Hello world&#39;);</code>  </p>
<h3 id="2-新建一个css"><a href="#2-新建一个css" class="headerlink" title="2. 新建一个css"></a>2. 新建一个css</h3><p><code>touch style.css</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-新建一个html"><a href="#3-新建一个html" class="headerlink" title="3.新建一个html"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>
<h2 id="三、-写一个小测试-1"><a href="#三、-写一个小测试-1" class="headerlink" title="三、 写一个小测试"></a>三、 写一个小测试</h2><h3 id="1-新建入口文件并写入文件-1"><a href="#1-新建入口文件并写入文件-1" class="headerlink" title="1. 新建入口文件并写入文件"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code>  <code>document.write(&#39;Hello world&#39;);</code>  </p>
<h3 id="2-新建一个css-1"><a href="#2-新建一个css-1" class="headerlink" title="2. 新建一个css"></a>2. 新建一个css</h3><p><code>touch style.css</code>  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-新建一个html-1"><a href="#3-新建一个html-1" class="headerlink" title="3.新建一个html"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-webpack的重头戏"><a href="#4-webpack的重头戏" class="headerlink" title="4.webpack的重头戏"></a>4.webpack的重头戏</h3><p>那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件<br>a.安装loaders<br><code>npm install style-loader css-loader</code><br>b.打开<code>webpack.config.js</code><br>添加模块<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">module</span>:&#123;</span><br><span class="line">  <span class="attribute">loaders</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    test:/\.css$/,</span><br><span class="line">    loaders:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明：<br>模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个<br>一个对象就是一个loader，<code>test</code>用正则匹配文件后缀<br>loaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader<br><code>css-loader</code>处理css的一些url，包括相对的绝对的之类的东西<br><code>style-loader</code> 是将css文件采用js动态写入html页面<br>c.使用css<br>打开<code>index.js</code>  (因为我们这里没有用babel,所以就用es5来写)<br><code>require(&#39;./style.css&#39;);</code></p>
<h2 id="四、查看效果"><a href="#四、查看效果" class="headerlink" title="四、查看效果"></a>四、查看效果</h2><p>我们现在可以使用<code>webpack-dev-server</code>这个东西了<br>如果你己经全局安装了(<code>cnpm install -g webpack-dev-server</code>),直接命令<code>webpack-dev-server</code>就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"webpack-study"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line"><span class="attr">"start"</span>:<span class="string">"webpack-dev-server --progcess"</span>,</span><br><span class="line"><span class="attr">"build"</span>:<span class="string">"webpack --progress"</span>,</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"keywords"</span>: [],</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line"><span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line"><span class="attr">"css-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line"><span class="attr">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</span><br><span class="line"><span class="attr">"webpack"</span>: <span class="string">"^1.13.0"</span>,</span><br><span class="line"><span class="attr">"webpack-dev-server"</span>: <span class="string">"^1.14.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们就可以使用<code>npm run build</code>来编译，使用<code>npm run start</code>来开启服务器  </p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  webpack-study git:(master) ✗ npm run build</span><br><span class="line"></span><br><span class="line">&gt; webpack-study@<span class="number">1.0</span><span class="number">.0</span> build /Users<span class="meta-keyword">/xiaomo/</span>workspace/webpack-study</span><br><span class="line">&gt; webpack --progress</span><br><span class="line"><span class="symbol">Hash:</span> <span class="number">11f</span>fef2911f2436a3948</span><br><span class="line"><span class="symbol">Version:</span> webpack <span class="number">1.13</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">Time:</span> <span class="number">64</span>ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  <span class="number">1.42</span> kB       <span class="number">0</span>  [emitted]  main</span><br><span class="line">   [<span class="number">0</span>] ./index.js <span class="number">30</span> <span class="class">bytes </span>&#123;<span class="number">0</span>&#125; [built]</span><br><span class="line">   ➜  webpack-study git:(master) ✗ npm run start</span><br><span class="line"></span><br><span class="line">   &gt; webpack-study@<span class="number">1.0</span><span class="number">.0</span> start /Users<span class="meta-keyword">/xiaomo/</span>workspace/webpack-study</span><br><span class="line">   &gt; webpack-dev-server --progcess</span><br><span class="line"><span class="symbol"></span><br><span class="line">   http:</span><span class="comment">//localhost:8080/webpack-dev-server/</span></span><br><span class="line">   webpack result is served from /</span><br><span class="line">   content is served from /Users<span class="meta-keyword">/xiaomo/</span>workspace/webpack-study</span><br><span class="line"><span class="symbol">   Hash:</span> <span class="number">11f</span>fef2911f2436a3948</span><br><span class="line"><span class="symbol">   Version:</span> webpack <span class="number">1.13</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">   Time:</span> <span class="number">80</span>ms</span><br><span class="line">       Asset     Size  Chunks             Chunk Names</span><br><span class="line">   bundle.js  <span class="number">1.42</span> kB       <span class="number">0</span>  [emitted]  main</span><br><span class="line">   chunk    &#123;<span class="number">0</span>&#125; bundle.js (main) <span class="number">30</span> bytes [rendered]</span><br><span class="line">       [<span class="number">0</span>] ./index.js <span class="number">30</span> <span class="class">bytes </span>&#123;<span class="number">0</span>&#125; [built]</span><br><span class="line"><span class="symbol">   webpack:</span> bundle is now VALID.</span><br></pre></td></tr></table></figure>
<p>b.然后访问 <a href="http://locahost:8080" target="_blank" rel="external">http://locahost:8080</a> 就可以看到效果了</p>
<h2 id="五、动态效果展示和总结"><a href="#五、动态效果展示和总结" class="headerlink" title="五、动态效果展示和总结"></a>五、动态效果展示和总结</h2><h3 id="1-总共有5个文件"><a href="#1-总共有5个文件" class="headerlink" title="1. 总共有5个文件"></a>1. 总共有5个文件</h3><p><code>webpack.config.ks</code>、<code>index.js</code>、<code>index.html</code>、<code>style.css</code>、<code>package.json</code>，编译好要使用的只有<code>index.html</code>和<code>dist/bundle.js</code>两个文件</p>
<h3 id="2-gif动画"><a href="#2-gif动画" class="headerlink" title="2. gif动画"></a>2. gif动画</h3><p>会展示一下5个文件的内容</p>
<h3 id="3-演示一下效果"><a href="#3-演示一下效果" class="headerlink" title="3. 演示一下效果"></a>3. 演示一下效果</h3><p><img src="http://static.xiaomo.info/images/webpack.gif" alt="webpack的简单使用"><br>如果觉得图小可以点击下面链接查看大图<br><a href="http://static.xiaomo.info/images/webpack.gif" target="_blank" rel="external">webpack的简单使用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用nodejs搭建一个简易的即时聊天软件]]></title>
      <url>http://blog.xiaomo.info/2016/05/13/node_online_chat/</url>
      <content type="html"><![CDATA[<p>最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/nodejs.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、搭建简易的服务器"><a href="#一、搭建简易的服务器" class="headerlink" title="一、搭建简易的服务器"></a>一、搭建简易的服务器</h2><p><code>vim server.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入node的net模块</span></span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"><span class="comment">//创建一个服务器</span></span><br><span class="line"><span class="keyword">var</span> chatServer = net.createServer();</span><br><span class="line"><span class="comment">//定义一个客户端列表</span></span><br><span class="line"><span class="keyword">var</span> clientList = [];</span><br><span class="line"><span class="comment">//监听连接...</span></span><br><span class="line">chatServer.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line"><span class="comment">//给客户端反馈</span></span><br><span class="line">client.name = client.remoteAddress+<span class="string">':'</span>+client.remotePort;</span><br><span class="line">client.write(<span class="string">'Hi!'</span>+client.name+<span class="string">',您己成功连接服务器，可以正常通讯了..\n'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(client.name+<span class="string">'加入了聊天...'</span>)</span><br><span class="line"><span class="comment">//将客户端放到客户端列表中</span></span><br><span class="line">clientList.push(client);</span><br><span class="line"><span class="comment">//监听客户端信信息并给出反馈</span></span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 把数据发送给所有客户端</span></span><br><span class="line">      broadcast(data,client);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听离线事件</span></span><br><span class="line">client.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(client.name+<span class="string">'quit...'</span>)</span><br><span class="line">    clientList.splice(clientList.indexOf(client),<span class="number">1</span>);</span><br><span class="line">    client.write(<span class="string">'用户:'</span>+client.name+<span class="string">'退出了当前服务\n'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//监听错误事件</span></span><br><span class="line">client.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  广播消息</span><br><span class="line"> **/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">message,client</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> cleanUp=[];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;clientList.length;i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(clientList[i]!==client[i])&#123;</span><br><span class="line">             <span class="keyword">if</span>(clientList[i].writable)&#123;</span><br><span class="line">             clientList[i].write(client.name+<span class="string">'说:'</span>+message);</span><br><span class="line">             &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                 cleanUp.push(clientList[i]);</span><br><span class="line">                 clientList[i].destroy();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//在写入循环中删除死节点，消除垃圾索引</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;cleanUp.length;i++)&#123;</span><br><span class="line">         clientList.splice(clientList.indexOf(cleanUp[i],i));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>开启服务器<br><code>node server.js</code><br><code>chatServer is running at port 9000...</code><br>此时服务己经成功开启</p>
<h2 id="二、客户端连接"><a href="#二、客户端连接" class="headerlink" title="二、客户端连接"></a>二、客户端连接</h2><p>格式： <code>telnet host port</code><br>例如我在本地再开启一个shell窗口<br> <code>telnet localhost 9000</code><br> Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..</p>
<h2 id="三、测试效果"><a href="#三、测试效果" class="headerlink" title="三、测试效果"></a>三、测试效果</h2><h3 id="1-开启服务器"><a href="#1-开启服务器" class="headerlink" title="1. 开启服务器"></a>1. 开启服务器</h3><h3 id="2-客户端连接"><a href="#2-客户端连接" class="headerlink" title="2. 客户端连接"></a>2. 客户端连接</h3><h3 id="3-测试通讯"><a href="#3-测试通讯" class="headerlink" title="3. 测试通讯"></a>3. 测试通讯</h3><p>下面是gif效果图<br><img src="http://static.xiaomo.info/images/tcpServer.gif" alt="tcp在线聊天服务器"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下使用定时器跑任务]]></title>
      <url>http://blog.xiaomo.info/2016/05/12/linux_crontab/</url>
      <content type="html"><![CDATA[<p>我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/linux.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>选好一个目录放shell脚本</li>
<li>写一个shell,注意最好是echo一句话，方便测试</li>
<li>确保你的机器上装了crontab服务且处于开启状态</li>
</ol>
<h2 id="二、正式开工"><a href="#二、正式开工" class="headerlink" title="二、正式开工"></a>二、正式开工</h2><h3 id="1-检查crontab服务"><a href="#1-检查crontab服务" class="headerlink" title="1. 检查crontab服务"></a>1. 检查crontab服务</h3><p>键入命令 <code>/sbin/service crond status</code><br>返回结果:  <code>crond (pid  6621) is running...</code>  如果是运行状态就是可以的    </p>
<h3 id="2-写shell的目录"><a href="#2-写shell的目录" class="headerlink" title="2. 写shell的目录"></a>2. 写shell的目录</h3><p>切换到目标目录 <code>cd /data2/xiaomo.info/java/bin</code></p>
<h3 id="3-开始写shell"><a href="#3-开始写shell" class="headerlink" title="3. 开始写shell"></a>3. 开始写shell</h3><p>创建文件：<code>$: touch gitpull.sh</code><br>打开文件：<code>$: vim gitpull.sh</code><br>粘入以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /data2/xiaomo.info/myB<span class="built_in">log</span></span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'当前时间'</span>`date <span class="string">'+%Y-%m-%d %H:%M:%S'</span>`<span class="string">'执行git clone 命令'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-写定时任务"><a href="#4-写定时任务" class="headerlink" title="4. 写定时任务"></a>4. 写定时任务</h3><p>查看定时任务 <code>$: crontab -l</code><br>创建定时任务 <code>$: crontab -e</code><br>粘入下面的内容<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#每分钟 执行git clone 命令</span></span><br><span class="line">*/<span class="number">1</span> * * * * <span class="meta-keyword">/bin/</span>sh <span class="meta-keyword">/data2/</span>xiaomo.info<span class="meta-keyword">/java/</span>bin/gitpull.sh &gt;&gt;<span class="meta-keyword">/data2/</span>xiaomo.info<span class="meta-keyword">/java/</span>bin/git.log &amp;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、验证设置的定时任务是否生效"><a href="#三、验证设置的定时任务是否生效" class="headerlink" title="三、验证设置的定时任务是否生效"></a>三、验证设置的定时任务是否生效</h2><p>说明：在定时任务中 使用 <code>&gt;&gt;</code> 可以将<code>echo</code>的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   </p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f <span class="meta-keyword">/data2/</span>xiaomo.info<span class="meta-keyword">/java/</span>bin/git.log</span><br></pre></td></tr></table></figure>
<p>观察一下一分钟后是否有日志打出，有的话就代表执行成功！！</p>
<h2 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h2><blockquote>
<p><a href="http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html" target="_blank" rel="external">定时任务参考文档</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularjs复选框]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/ng-checkbox/</url>
      <content type="html"><![CDATA[<p>使用angularjs做复选框，这也是一个常见的需求。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h2><h3 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"tag in tags.content track by $index "</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span><br><span class="line">               <span class="attr">title</span>=<span class="string">"标签"</span></span><br><span class="line">               <span class="attr">class</span>=<span class="string">"btn "</span></span><br><span class="line">               <span class="attr">id</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tag.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span><br><span class="line">               <span class="attr">name</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;tag.name&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span><br><span class="line">               <span class="attr">ng-checked</span>=<span class="string">"isSelected(tag.id)"</span> //动态 <span class="attr">true</span> <span class="attr">false</span></span><br><span class="line">               <span class="attr">ng-click</span>=<span class="string">"updateSelection($event,tag.id)"</span> //将<span class="attr">id</span>添加到<span class="attr">Array</span>中</span><br><span class="line">               <span class="attr">ng-model</span>=<span class="string">"tags"</span>&gt;</span></span><br><span class="line">        </span><span class="template-variable">&#123;&#123;tag.name&#125;&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-controller"><a href="#2-controller" class="headerlink" title="2. controller"></a>2. controller</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$scope.selected = [];</span><br><span class="line">$scope.selectedTags = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际操作数组的方法</span></span><br><span class="line"><span class="keyword">var</span> updateSelected = <span class="function"><span class="keyword">function</span> <span class="params">(action, id, name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'add'</span> &amp;&amp; $scope.selected.indexOf(id) == <span class="number">-1</span>) &#123;</span><br><span class="line">        $scope.selected.push(id);</span><br><span class="line">        $scope.selectedTags.push(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'remove'</span> &amp;&amp; $scope.selected.indexOf(id) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> idx = $scope.selected.indexOf(id);</span><br><span class="line">        $scope.selected.splice(idx, <span class="number">1</span>);</span><br><span class="line">        $scope.selectedTags.splice(idx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log($scope.selected);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据传入的动作和要操作的id更新Array</span></span><br><span class="line">$scope.updateSelection = <span class="function"><span class="keyword">function</span> <span class="params">($event, id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> checkbox = $event.target;</span><br><span class="line">    <span class="keyword">var</span> action = (checkbox.checked ? <span class="string">'add'</span> : <span class="string">'remove'</span>);</span><br><span class="line">    updateSelected(action, id, checkbox.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回true false</span></span><br><span class="line">$scope.isSelected = <span class="function"><span class="keyword">function</span> <span class="params">(id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $scope.selected.indexOf(id) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h2><p><img src="http://static.xiaomo.info/images/checkbox.gif" alt="checkbox效果图"></p>
<h2 id="三、参考文档"><a href="#三、参考文档" class="headerlink" title="三、参考文档"></a>三、参考文档</h2><blockquote>
<p><a href="http://www.cnblogs.com/CheeseZH/p/4517701.html" target="_blank" rel="external">ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示</a></p>
</blockquote>
<h2 id="四、-附上我github的地址"><a href="#四、-附上我github的地址" class="headerlink" title="四、 附上我github的地址"></a>四、 附上我github的地址</h2><p>   <a href="https://github.com/qq83387856" target="_blank" rel="external">https://github.com/qq83387856</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用angularjs的$http异步删除数据]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/angular_http/</url>
      <content type="html"><![CDATA[<p>因为我在使用angularjs做异步删除数据的时候遇到了一些问题，所以把这些问题记录下面供大家参考，也加深自己的印象。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>有人会说删除这东西有什么可讲的，写个删除的service，controller调用一下不就完了。<br>嗯…看起来是这样，但是具体实现起来真的有这么简单吗？首先有以下几个坑</p>
<ul>
<li>怎么确定数据是否删除成功？</li>
<li>怎么同步视图的数据库的内容？</li>
</ul>
<h2 id="二、-思路"><a href="#二、-思路" class="headerlink" title="二、 思路"></a>二、 思路</h2><h3 id="1-实现方式一"><a href="#1-实现方式一" class="headerlink" title="1.实现方式一"></a>1.实现方式一</h3><p>删除数据库中对应的内容,然后将$scope中的对应的内容splice</p>
<h3 id="2-实现方式二"><a href="#2-实现方式二" class="headerlink" title="2.实现方式二"></a>2.实现方式二</h3><p>删除数据库中对应的内容，然后再reload一下数据(也就是再调用一次查询方法，这种消耗可想而知，并且还要保证先删除数据再查询)</p>
<h2 id="三、-具体实现方式"><a href="#三、-具体实现方式" class="headerlink" title="三、 具体实现方式"></a>三、 具体实现方式</h2><blockquote>
<p>删除数据的service：用异步，返回promise<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">service(<span class="string">'deleteBlogService'</span>,<span class="comment">//删除博客</span></span><br><span class="line">        [<span class="string">'$rootScope'</span>,</span><br><span class="line">            <span class="string">'$http'</span>,</span><br><span class="line">            <span class="string">'$q'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="params">($rootScope, $http, $q)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">                result.operate = <span class="function"><span class="keyword">function</span> <span class="params">(blogId)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">                    $http(&#123;</span><br><span class="line">                        headers: &#123;</span><br><span class="line">                            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        url: $rootScope.$baseUrl + <span class="string">"/admin/blog/deleteBlogById"</span>,</span><br><span class="line">                        method: <span class="string">'GET'</span>,</span><br><span class="line">                        dataType: <span class="string">'json'</span>,</span><br><span class="line">                        params: &#123;</span><br><span class="line">                            id: blogId</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                        .success(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span><br><span class="line">                            deferred.resolve(data);</span><br><span class="line">                            console.log(<span class="string">"删除成功！"</span>);</span><br><span class="line">                        &#125;)</span><br><span class="line">                        .error(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                            deferred.reject();</span><br><span class="line">                            alert(<span class="string">"删除失败！"</span>)</span><br><span class="line">                        &#125;);</span><br><span class="line">                    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;])</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>controller里面注意事项</p>
<blockquote>
<p>要特别注意执行顺序：确保己经删除完成之后再去reload数据，不然会出来视图不更新</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 删除博客</span><br><span class="line"> */</span></span><br><span class="line">$scope.deleteBlog = <span class="function"><span class="keyword">function</span> <span class="params">(blogId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deletePromise = deleteBlogService.operate(blogId);</span><br><span class="line">    deletePromise.then(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.status == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> promise = getBlogListService.operate($scope.currentPage);</span><br><span class="line">            promise.then(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span><br><span class="line">                $scope.blogs = data.blogs;</span><br><span class="line">                $scope.pageCount = $scope.blogs.totalPages;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第三方组件ui-router的简单使用]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/angular_ui_router/</url>
      <content type="html"><![CDATA[<p>因为1.x的angularjs自带的ng-router功能比较弱，不支持路由嵌套。因些我们要使用到ui-router这个组件<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、ui-router基本思路"><a href="#一、ui-router基本思路" class="headerlink" title="一、ui-router基本思路"></a>一、ui-router基本思路</h2><ol>
<li>多视图用@，嵌套用parent.child这种子路由</li>
<li>要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由  </li>
<li>要切换的路由ui-sref用子路由   </li>
</ol>
<ul>
<li>main.a</li>
<li>main.b</li>
<li>main.c</li>
<li>main.d</li>
<li>….</li>
</ul>
<h2 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h2><p><img src="http://static.xiaomo.info/images/uirouter.gif" alt="uirouter效果"></p>
<h2 id="三、代码实例"><a href="#三、代码实例" class="headerlink" title="三、代码实例"></a>三、代码实例</h2><h3 id="1-html-使用ui-sref"><a href="#1-html-使用ui-sref" class="headerlink" title="1. html 使用ui-sref"></a>1. html 使用ui-sref</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1 list-group"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.authority"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.blog"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>博客管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.user"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.tag"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>标签管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.changeLog"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>更新日志<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.links"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>友情连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"main.systemSet"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-app-js-路由配置"><a href="#2-app-js-路由配置" class="headerlink" title="2. app.js 路由配置"></a>2. app.js 路由配置</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">    <span class="selector-tag">myApp</span><span class="selector-class">.config</span>(function ($stateProvider, $urlRouterProvider) &#123;</span><br><span class="line">    $urlRouterProvider<span class="selector-class">.otherwise</span>(<span class="string">'/login'</span>);</span><br><span class="line">    $<span class="selector-tag">stateProvider</span></span><br><span class="line">    <span class="comment">/* ===========================================================登录===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'login'</span>, &#123;<span class="comment">//登录</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/login'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./login.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'AdminLoginController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main'</span>, &#123;<span class="comment">//主界面</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/main'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/common/home.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'BasicInfoController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================博客===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.blog'</span>, &#123;<span class="comment">//博客列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/blog'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/blog/blogList.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'BlogListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addBlog'</span>, &#123;<span class="comment">//添加博客</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addBlog'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/blog/addBlog.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'BlogAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editBlog'</span>, &#123;<span class="comment">//编辑博客</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editBlog/:id'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/blog/editBlog.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'BlogEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================权限===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.authority'</span>, &#123;<span class="comment">//权限列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/authority'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/authority/authorityList.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'AdminListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addAuthority'</span>, &#123;<span class="comment">//添加权限</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addAuthority'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/authority/AddAuthority.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'AdminAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editAuthority'</span>, &#123;<span class="comment">//编辑权限</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editAuthority/:id'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/authority/authorityEdit.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'AdminEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================用户===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.user'</span>, &#123;<span class="comment">//用户列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/user'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/user/userList.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'UserListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addUser'</span>, &#123;<span class="comment">//添加用户</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addUser'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/user/addUser.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'UserAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editUser'</span>, &#123;<span class="comment">//编辑用户</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editUser/:id'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/user/editUser.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'UserEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================标签===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.tag'</span>, &#123;<span class="comment">//标签列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/tag'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/tag/tagList.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'TagListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addTag'</span>, &#123;<span class="comment">//添加标签</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addTag'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/tag/addTag.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'TagAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editTag'</span>, &#123;<span class="comment">//编辑标签</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editTag'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/tag/editTag.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'TagEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================日志===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.changeLog'</span>, &#123;<span class="comment">//更新日志列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/changeLog'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/changeLog/changeLog.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'ChangeLogListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addChangeLog'</span>, &#123;<span class="comment">//添加更新日志</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addChangeLog'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/changeLog/addChangeLog.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'ChangeLogAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editChangeLog'</span>, &#123;<span class="comment">//编辑更新日志</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editChangeLog'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/changeLog/editChangeLog.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'ChangeLogEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================友链===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.links'</span>, &#123;<span class="comment">//友情链接列表</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/links'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/links/linkList.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'LinkListController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.addLink'</span>, &#123;<span class="comment">//添加友情链接</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/addLink'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/links/addLink.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'LinkAddController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.editLink'</span>, &#123;<span class="comment">//编辑友情链接</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/editLink'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/links/editLink.html'</span>,</span><br><span class="line">            <span class="attribute">controller</span>: <span class="string">'LinkEditController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* ===========================================================系统===========================================================================*/</span></span><br><span class="line">        <span class="selector-class">.state</span>(<span class="string">'main.systemSet'</span>, &#123;<span class="comment">//系统设置</span></span><br><span class="line">            <span class="attribute">url</span>: <span class="string">'/systemSet'</span>,</span><br><span class="line">            <span class="attribute">templateUrl</span>: <span class="string">'./src/tpls/systemSet/systemSet.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="四、-github"><a href="#四、-github" class="headerlink" title="四、 github"></a>四、 github</h2><p>附上我github的地址<br>   <a href="https://github.com/qq83387856" target="_blank" rel="external">https://github.com/qq83387856</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[表单添加之ng-options]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/ng-options/</url>
      <content type="html"><![CDATA[<p>我们在使用select&gt;option的时候经常会遇到一些问题，这里是对ng-options使用的一些总结。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>这个ng-options感觉略坑啊，跟原生的select、option不太一样</p>
<h2 id="二、-要解决的几个问题"><a href="#二、-要解决的几个问题" class="headerlink" title="二、 要解决的几个问题"></a>二、 要解决的几个问题</h2><h3 id="1-select下拉框的默认值"><a href="#1-select下拉框的默认值" class="headerlink" title="1. select下拉框的默认值"></a>1. select下拉框的默认值</h3><h3 id="2-通过选择不同的值传给后台"><a href="#2-通过选择不同的值传给后台" class="headerlink" title="2. 通过选择不同的值传给后台"></a>2. 通过选择不同的值传给后台</h3><h3 id="3-ng-options的值要设置在-scope中"><a href="#3-ng-options的值要设置在-scope中" class="headerlink" title="3. ng-options的值要设置在$scope中"></a>3. ng-options的值要设置在$scope中</h3><h2 id="三、-代码实例"><a href="#三、-代码实例" class="headerlink" title="三、 代码实例"></a>三、 代码实例</h2><h3 id="1-html中的展示"><a href="#1-html中的展示" class="headerlink" title="1.html中的展示"></a>1.html中的展示</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-md-2 control-label"</span>&gt;</span></span><br><span class="line">        权限：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">title</span>=<span class="string">"权限"</span> <span class="attr">ng-model</span>=<span class="string">"adminUser.authLevel"</span></span><br><span class="line">                <span class="attr">ng-options</span>=<span class="string">"authLevel.name for authLevel in adminUser.authLevels"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        </span><span class="template-variable">&#123;&#123;adminUser.authLevel&#125;&#125;</span><span class="xml"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码解释：ng-options类似于ng-repeat,把$scope中的内容循环展示出来,设置一个ng-model</p>
</blockquote>
<h3 id="2-controller"><a href="#2-controller" class="headerlink" title="2. controller"></a>2. controller</h3><p> controller中设置ng-options的默认值</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$scope.adminUser = &#123;&#125;;</span><br><span class="line">$scope.adminUser.authLevels = [&#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'超级管理员'</span>&#125;, &#123;<span class="string">'id'</span>: <span class="number">2</span>, <span class="string">'name'</span>: <span class="string">'普通管理员'</span>&#125;];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>controller中接收设置的ng-model,就可以解决html和controller之间的通讯了</p>
</blockquote>
<h2 id="三、参考文档"><a href="#三、参考文档" class="headerlink" title="三、参考文档"></a>三、参考文档</h2><p>参考自 ：<a href="http://runjs.cn/code/nhi8ubrb" target="_blank" rel="external">runjs源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[atom的使用和插件的安装]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/atom_plugins/</url>
      <content type="html"><![CDATA[<p>由于生活在天朝这个神奇的国度，因此任何网站都会被强。因此安装插件就会很困扰，那么我们除了翻墙要怎么去解决这个问题呢？<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/atom.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、在讲插件之前，插入一个小知识"><a href="#一、在讲插件之前，插入一个小知识" class="headerlink" title="一、在讲插件之前，插入一个小知识"></a>一、在讲插件之前，插入一个小知识</h2><p>怎么使用atom实时预览markdown效果</p>
<blockquote>
<p>windows下 <code>ctrl+shit+p</code>打开搜索框，输入 <code>mdpt</code> 之后<code>enter</code>就可以看到实时效果了</p>
</blockquote>
<h2 id="二、-插件安装"><a href="#二、-插件安装" class="headerlink" title="二、 插件安装"></a>二、 插件安装</h2><p><code>file -&gt; Settings -&gt; install</code>即可打开插件安装列表。</p>
<blockquote>
<p>注意！！注意！但是你会发现99%的插件安装都不成功。所以 这就是问题所在</p>
</blockquote>
<p>但是不要气馁，我们有的是办法。虽然<code>install</code>页不能安装，但是可以搜索啊。</p>
<p>我们搜索想要的插件，他会有一个issues界面，我们打开这个界面就可以找到他github的仓库地址。</p>
<blockquote>
<p>好了，正戏开始！！！！</p>
</blockquote>
<h3 id="1-搜索插件"><a href="#1-搜索插件" class="headerlink" title="1. 搜索插件"></a>1. 搜索插件</h3><p><code>preferences-&gt;update</code>可以搜索插件,然后找到github地址</p>
<h3 id="2-下载插件"><a href="#2-下载插件" class="headerlink" title="2. 下载插件"></a>2. 下载插件</h3><p>在atom的插件配置文件目录下把该插件clone下来。</p>
<h3 id="3-下载依赖"><a href="#3-下载依赖" class="headerlink" title="3. 下载依赖"></a>3. 下载依赖</h3><p>cd到插件根目录，然后cnpm install 或者npm install</p>
<h3 id="4-插件生效"><a href="#4-插件生效" class="headerlink" title="4. 插件生效"></a>4. 插件生效</h3><p>重启atom,你就会发现你想要的插件装好了。</p>
<hr>
<p>总结：虽然我们折腾了这么多东西，但是终究是实现了我们的目的不是么？谁让我们生在天朝这个神奇的国度呢。</p>
<h2 id="三-插件卸载"><a href="#三-插件卸载" class="headerlink" title="三. 插件卸载"></a>三. 插件卸载</h2><p>这个就不用多说了吧，直接删除插件目录下对应的文件夹就好了</p>
<h2 id="四、-最后给个gif的教程"><a href="#四、-最后给个gif的教程" class="headerlink" title="四、 最后给个gif的教程"></a>四、 最后给个gif的教程</h2><p>配着文字版看 真是爽歪歪有木有！！！<br><img src="http://static.xiaomo.info/images/atomPlugins.gif" alt="atom插件安装分享"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/markdown_syntax/</url>
      <content type="html"><![CDATA[<p>markdown的一些基本语法，大致够用了<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/markdown.png" alt="点击访问小莫的github"></a></p>
<h2 id="1-标题-h标签"><a href="#1-标题-h标签" class="headerlink" title="1.标题(h标签)"></a>1.标题(h标签)</h2><p>h1-h6对应1-6个#</p>
<h2 id="2-列表-li-gt-li"><a href="#2-列表-li-gt-li" class="headerlink" title="2.列表(li&gt;li)"></a>2.列表(li&gt;li)</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>1</span><br><span class="line"><span class="bullet">* </span>2</span><br><span class="line"><span class="bullet">* </span>3</span><br></pre></td></tr></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>1</span><br><span class="line"><span class="bullet">2. </span>2</span><br><span class="line"><span class="bullet">3. </span>3</span><br></pre></td></tr></table></figure>
<h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><ol>
<li>1</li>
<li>2</li>
<li>3</li>
</ol>
<h2 id="3-引用-blockquote"><a href="#3-引用-blockquote" class="headerlink" title="3.引用(blockquote)"></a>3.引用(blockquote)</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这个是引用的内容</span><br></pre></td></tr></table></figure>
<h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><blockquote>
<p>这个是引用的内容</p>
</blockquote>
<h2 id="4-图片与链接"><a href="#4-图片与链接" class="headerlink" title="4.图片与链接"></a>4.图片与链接</h2><h3 id="1-图片"><a href="#1-图片" class="headerlink" title="1. 图片"></a>1. 图片</h3><p>名字、url</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">小莫</span>](<span class="link">http://mouapp.com/Mou_128.png</span>)</span><br></pre></td></tr></table></figure>
<h4 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h4><p><img src="http://mouapp.com/Mou_128.png" alt="小莫"></p>
<h3 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h3><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">小莫的主页</span>](<span class="link">http://www.xiaomo.info</span>)</span><br></pre></td></tr></table></figure>
<h4 id="效果图-4"><a href="#效果图-4" class="headerlink" title="效果图"></a>效果图</h4><p><a href="http://www.xiaomo.info" target="_blank" rel="external">小莫的主页</a></p>
<h2 id="5-粗体与斜体"><a href="#5-粗体与斜体" class="headerlink" title="5.粗体与斜体"></a>5.粗体与斜体</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*这里是粗体*</span>*</span><br><span class="line"><span class="strong">*这里是斜体*</span></span><br></pre></td></tr></table></figure>
<h4 id="效果图-5"><a href="#效果图-5" class="headerlink" title="效果图"></a>效果图</h4><p><strong>这里是粗体</strong><br><em>这里是斜体</em></p>
<h2 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h2><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">冒号控制居中样式 连续三根短横线表格</span><br><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| <span class="symbol">:-----------</span>: |<span class="symbol">:--------</span>:  | <span class="symbol">:---</span><span class="symbol">:|</span></span><br><span class="line">| col <span class="number">3</span> is      | right-aligned | <span class="variable">$1600</span> |</span><br><span class="line">| col <span class="number">2</span> is      | centered      |   <span class="variable">$12</span> |</span><br><span class="line">| zebra stripes | are neat      |    <span class="variable">$1</span> |</span><br></pre></td></tr></table></figure>
<h4 id="效果图-6"><a href="#效果图-6" class="headerlink" title="效果图"></a>效果图</h4><p>冒号控制居中样式 连续三根短横线表格<br>| Tables        | Are           | Cool  |<br>| :———–: |:——–:  | :—:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>
<h2 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7.代码框"></a>7.代码框</h2><p>（一个tab即可,如果没效果用3个飘号[esc下面那个]）</p>
<pre><code>function Hello(){
        console.log(&quot;hello&quot;);
    }
</code></pre><h2 id="8-分割线-hr"><a href="#8-分割线-hr" class="headerlink" title="8.分割线(hr)"></a>8.分割线(hr)</h2><p>三个或三个以上的星号、减号或者下划线</p>
<h2 id="9-换行、分段"><a href="#9-换行、分段" class="headerlink" title="9.换行、分段"></a>9.换行、分段</h2><p>行末加两个或以上个空格<br>分段：两个回车</p>
<h2 id="10-带url的目录"><a href="#10-带url的目录" class="headerlink" title="10. 带url的目录"></a>10. 带url的目录</h2><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">1. 安装</span>][<span class="symbol">1</span>]  </span><br><span class="line">[<span class="string">2. 目录结构</span>][<span class="symbol">2</span>]  </span><br><span class="line">[<span class="string">3. 配置说明</span>][<span class="symbol">3</span>]  </span><br><span class="line">[<span class="string">4. 编写博客</span>][<span class="symbol">4</span>]  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/install.html</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/config.html</span></span><br><span class="line">[<span class="symbol">4</span>]:<span class="link">http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html</span></span><br></pre></td></tr></table></figure>
<h3 id="效果图-7"><a href="#效果图-7" class="headerlink" title="效果图"></a>效果图</h3><p><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/install.html" target="_blank" rel="external">1. 安装</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html" target="_blank" rel="external">2. 目录结构</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/config.html" target="_blank" rel="external">3. 配置说明</a><br><a href="http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html" target="_blank" rel="external">4. 编写博客</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularjs键盘事件]]></title>
      <url>http://blog.xiaomo.info/2016/05/11/angularjs_keyboard_event/</url>
      <content type="html"><![CDATA[<p> 使用angularjs的键盘事件来增强用户体验。<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、绑定键盘事件"><a href="#一、绑定键盘事件" class="headerlink" title="一、绑定键盘事件"></a>一、绑定键盘事件</h2><p>（尤其注意：不能用a标签，不然会失效）</p>
<blockquote>
<p>推荐button</p>
<h3 id="方法一：ng内置指令"><a href="#方法一：ng内置指令" class="headerlink" title="方法一：ng内置指令"></a>方法一：ng内置指令</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button ng-<span class="built_in">click</span>=<span class="string">"login()"</span> ng-keypress=<span class="string">"todoSomething($event)"</span> <span class="keyword">class</span>=<span class="string">"btn btn-success btn-lg"</span> ng-disabled=<span class="string">"loginForm.$invalid"</span>&gt;</span><br><span class="line">    登录</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>说明：在对应的控制器中的$scope上绑定一个todoSomething方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$scope.todoSomething=<span class="function"><span class="keyword">function</span><span class="params">($event)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($event.keyCode==<span class="number">13</span>)&#123;<span class="comment">//回车</span></span><br><span class="line">        login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="方法二：自定义指令"><a href="#方法二：自定义指令" class="headerlink" title="方法二：自定义指令"></a>方法二：自定义指令</h3><blockquote>
<p>html<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button ng-<span class="built_in">click</span>=<span class="string">"login()"</span> ng-enter=<span class="string">"login()"</span> <span class="keyword">class</span>=<span class="string">"btn btn-success btn-lg"</span> ng-disabled=<span class="string">"loginForm.$invalid"</span>&gt;</span><br><span class="line">    登录</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<p>指令<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">myApp.directive(<span class="string">'ngEnter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(scope, element, attrs)</span> </span>&#123;</span><br><span class="line">            element.bind(<span class="string">"keydown keypress"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.which === <span class="number">13</span>) &#123;</span><br><span class="line">                    scope.$apply(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                        scope.$eval(attrs.ngEnter);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    event.preventDefault();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><p>两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低</p>
<blockquote>
<p>参考文档：<a href="https://segmentfault.com/a/1190000002634554#articleHeader8" target="_blank" rel="external">angularjs学习笔记—事件指令</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularjs的验证系统]]></title>
      <url>http://blog.xiaomo.info/2016/05/10/angular_validate/</url>
      <content type="html"><![CDATA[<p>使用angularjs的验证系统来做前端验证需要注意的一些地方<br><a id="more"></a><br><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/angular.png" alt="点击访问小莫的github"></a></p>
<h2 id="一、-效果图"><a href="#一、-效果图" class="headerlink" title="一、 效果图"></a>一、 效果图</h2><p> <img src="http://static.xiaomo.info/images/validate.gif" alt="angularjs验证效果图"></p>
<h2 id="二、-要点"><a href="#二、-要点" class="headerlink" title="二、 要点"></a>二、 要点</h2><h3 id="1：form"><a href="#1：form" class="headerlink" title="1：form"></a>1：form</h3><p>给form起一个名字,并禁掉原生的验证</p>
<h3 id="2-显示时机"><a href="#2-显示时机" class="headerlink" title="2. 显示时机"></a>2. 显示时机</h3><p>这个div是要在内容发生变化且不合法才会显示</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"error"</span> ng-show=<span class="string">"addBlogForm.title.$dirty &amp;&amp; addBlogForm.title.$invalid"</span>&gt;</span><br><span class="line">                 &lt;<span class="keyword">small</span> <span class="keyword">class</span>=<span class="string">"error"</span> ng-show=<span class="string">"addBlogForm.title.$error.required"</span>&gt;请输入标题内容&lt;/<span class="keyword">small</span>&gt;</span><br><span class="line">                 &lt;<span class="keyword">small</span> <span class="keyword">class</span>=<span class="string">"error"</span> ng-show=<span class="string">"addBlogForm.title.$error.minlength"</span>&gt;标题内容最少长度为<span class="number">3</span>&lt;/<span class="keyword">small</span>&gt;</span><br><span class="line">                 &lt;<span class="keyword">small</span> <span class="keyword">class</span>=<span class="string">"error"</span> ng-show=<span class="string">"addBlogForm.title.$error.maxlength"</span>&gt;标题最大长度为<span class="number">64</span>&lt;/<span class="keyword">small</span>&gt;</span><br><span class="line">                 &lt;<span class="keyword">small</span> <span class="keyword">class</span>=<span class="string">"error"</span> ng-show=<span class="string">"addBlogForm.title.$error.unique"</span>&gt;</span><br><span class="line">                     这个标题己经被用过了，请换一个标题吧</span><br><span class="line">                 &lt;/<span class="keyword">small</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-格式"><a href="#3-格式" class="headerlink" title="3. 格式"></a>3. 格式</h3><p>格式为fromName.inputName.$error.xxx   例子如上</p>
<h3 id="4-判断"><a href="#4-判断" class="headerlink" title="4. 判断"></a>4. 判断</h3><p>将提交按钮是否可用交给ng来判断:合法的时候才可用</p>
<blockquote>
<p>代码示例</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button ng-<span class="built_in">click</span>=<span class="string">"addBlog()"</span> <span class="keyword">class</span>=<span class="string">"btn btn-info"</span> ng-disabled=<span class="string">"addBlogForm.$invalid"</span>&gt;添加博客</span><br></pre></td></tr></table></figure>
<h2 id="三、插件"><a href="#三、插件" class="headerlink" title="三、插件"></a>三、插件</h2><p> 以上介绍的是angularjs的原生的验证，下面是一些关于验证的扩展插件</p>
<table>
<thead>
<tr>
<th style="text-align:center">所属</th>
<th style="text-align:center">名字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">angular-ui</td>
<td style="text-align:center">ng-messages</td>
</tr>
<tr>
<td style="text-align:center">第三方扩展</td>
<td style="text-align:center">w5cValidator</td>
</tr>
<tr>
<td style="text-align:center">jquery-validate</td>
<td style="text-align:center">JQ的插件</td>
</tr>
</tbody>
</table>
<h2 id="四、-github"><a href="#四、-github" class="headerlink" title="四、 github"></a>四、 github</h2><p>附上我github的地址<br>   <a href="https://github.com/qq83387856" target="_blank" rel="external">https://github.com/qq83387856</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 3 使用配置与插件安装]]></title>
      <url>http://blog.xiaomo.info/2015/11/30/sublime_config/</url>
      <content type="html"><![CDATA[<p>　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><ul>
<li>一直使用的是 Sublime 3，直接转到 3 的 <a href="http://www.sublimetext.com/3" target="_blank" rel="external">下载页面</a> 好了。</li>
</ul>
<h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><ul>
<li><code>Preferences/Settings - User</code>，设置字体为 <a href="http://pan.baidu.com/s/1mglgkSK" target="_blank" rel="external">Consolas 雅黑混合体</a> yx5g，字号11，tab 转空格，显示空格和制表符。</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"font_face"</span>: <span class="string">"Yahei Consolas Hybrid"</span>,</span><br><span class="line"><span class="string">"font_size"</span>: <span class="number">11</span>,</span><br><span class="line"><span class="string">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"draw_white_space"</span>: <span class="string">"all"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/</span></span><br><span class="line"><span class="string">"default_line_ending"</span>: <span class="string">"unix"</span>,</span><br><span class="line"><span class="string">"default_encoding"</span>: <span class="string">"UTF-8"</span>,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他设置参考 <code>Preferences/Settings - Default</code>。</p>
</blockquote>
<h2 id="基础插件"><a href="#基础插件" class="headerlink" title="基础插件"></a>基础插件</h2><h3 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a><a href="https://packagecontrol.io/" target="_blank" rel="external">Package Control</a></h3><ul>
<li>用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。<blockquote>
<p>插件使用与安装: <a href="https://packagecontrol.io/installation" target="_blank" rel="external">https://packagecontrol.io/installation</a></p>
</blockquote>
</li>
</ul>
<h3 id="Convert​To​UTF8"><a href="#Convert​To​UTF8" class="headerlink" title="Convert​To​UTF8"></a><a href="https://packagecontrol.io/packages/ConvertToUTF8" target="_blank" rel="external">Convert​To​UTF8</a></h3><ul>
<li>文本编码自动转换，减少中日韩文乱码问题。<blockquote>
<p>插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8</p>
</blockquote>
</li>
</ul>
<h3 id="IMESupport"><a href="#IMESupport" class="headerlink" title="IMESupport"></a><a href="https://packagecontrol.io/packages/IMESupport" target="_blank" rel="external">IMESupport</a></h3><ul>
<li>解决输入法选字框不跟随问题。</li>
</ul>
<h3 id="Side​Bar​Enhancements"><a href="#Side​Bar​Enhancements" class="headerlink" title="Side​Bar​Enhancements"></a><a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="external">Side​Bar​Enhancements</a></h3><ul>
<li>自带边栏功能太少，必须安装此插件增强一下。</li>
</ul>
<h2 id="主题配色"><a href="#主题配色" class="headerlink" title="主题配色"></a>主题配色</h2><h3 id="Theme-Spacegray"><a href="#Theme-Spacegray" class="headerlink" title="Theme - Spacegray"></a><a href="https://packagecontrol.io/packages/Theme%20-%20Spacegray" target="_blank" rel="external">Theme - Spacegray</a></h3><ul>
<li>Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。<br><img src="http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg" alt="Base16 Eighties Dark color scheme"></li>
</ul>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="Sublime​Linter"><a href="#Sublime​Linter" class="headerlink" title="Sublime​Linter"></a><a href="https://packagecontrol.io/packages/SublimeLinter" target="_blank" rel="external">Sublime​Linter</a></h3><ul>
<li>用于管理其他 code linting 代码规范插件。<blockquote>
<p>使用说明: <a href="http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc" target="_blank" rel="external">http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc</a></p>
</blockquote>
</li>
</ul>
<h3 id="Sublime​Linter-jshint"><a href="#Sublime​Linter-jshint" class="headerlink" title="Sublime​Linter-jshint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-jshint" target="_blank" rel="external">Sublime​Linter-jshint</a></h3><ul>
<li>基于 <a href="http://jshint.com/" target="_blank" rel="external">JSHint</a>，用于检查规范 JavaScript 代码。<blockquote>
<p>NPM 依赖包: <code>npm install -g jshint</code><br>使用说明: <a href="https://github.com/SublimeLinter/SublimeLinter-jshint" target="_blank" rel="external">https://github.com/SublimeLinter/SublimeLinter-jshint</a></p>
</blockquote>
</li>
</ul>
<h3 id="Sublime​Linter-csslint"><a href="#Sublime​Linter-csslint" class="headerlink" title="Sublime​Linter-csslint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-csslint" target="_blank" rel="external">Sublime​Linter-csslint</a></h3><ul>
<li>基于 <a href="https://github.com/CSSLint/csslint" target="_blank" rel="external">CSSLint</a>，用于检查规范 CSS 代码。<blockquote>
<p>NPM 依赖包: <code>npm install -g csslint</code><br>使用说明: <a href="https://github.com/SublimeLinter/SublimeLinter-csslint" target="_blank" rel="external">https://github.com/SublimeLinter/SublimeLinter-csslint</a></p>
</blockquote>
</li>
</ul>
<h3 id="Sublime​Linter-contrib-htmlhint"><a href="#Sublime​Linter-contrib-htmlhint" class="headerlink" title="Sublime​Linter-contrib-htmlhint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint" target="_blank" rel="external">Sublime​Linter-contrib-htmlhint</a></h3><ul>
<li>基于 <a href="http://htmlhint.com/" target="_blank" rel="external">HTMLHint</a>，用于检查规范 HTML 代码。<blockquote>
<p>NPM 依赖包: <code>npm install -g htmlhint@latest</code><br>使用说明: <a href="https://github.com/mmaday/SublimeLinter-contrib-htmlhint" target="_blank" rel="external">https://github.com/mmaday/SublimeLinter-contrib-htmlhint</a></p>
</blockquote>
</li>
</ul>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML-CSS-JS Prettify"></a><a href="https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify" target="_blank" rel="external">HTML-CSS-JS Prettify</a></h3><ul>
<li>格式化 HTML, CSS, JavaScript 及 JSON 代码。</li>
</ul>
<h3 id="Color-Highlighter"><a href="#Color-Highlighter" class="headerlink" title="Color Highlighter"></a><a href="https://packagecontrol.io/packages/Color%20Highlighter" target="_blank" rel="external">Color Highlighter</a></h3><ul>
<li>直接在代码中预览颜色。</li>
</ul>
<h3 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a><a href="https://packagecontrol.io/packages/Stylus" target="_blank" rel="external">Stylus</a></h3><ul>
<li>使代码高亮支持 Stylus。</li>
</ul>
<h3 id="Stylus-Clean-Completions"><a href="#Stylus-Clean-Completions" class="headerlink" title="Stylus Clean Completions"></a><a href="https://packagecontrol.io/packages/Stylus%20Clean%20Completions" target="_blank" rel="external">Stylus Clean Completions</a></h3><ul>
<li>Stylus 代码自动补全。</li>
</ul>
<h3 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a><a href="https://packagecontrol.io/packages/AutoFileName" target="_blank" rel="external">AutoFileName</a></h3><ul>
<li>文件名自动补全。<br><img src="http://moxfive.xyz/resources/autofilename.png" alt="AutoFileName"></li>
</ul>
<h3 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use"></a><a href="https://packagecontrol.io/packages/Can%20I%20Use" target="_blank" rel="external">Can I Use</a></h3><ul>
<li><a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a> 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性</li>
</ul>
<h3 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a><a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="external">BracketHighlighter</a></h3><ul>
<li>调整各类括号匹配的高亮样式</li>
</ul>
<h3 id="To-be-added"><a href="#To-be-added" class="headerlink" title="To be added"></a>To be added</h3><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li><strong>Package Control</strong>: <a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a></li>
<li><strong>SublimeLinter</strong>: <a href="http://sublimelinter.readthedocs.org/" target="_blank" rel="external">http://sublimelinter.readthedocs.org/</a></li>
<li><strong>JSHint</strong>: <a href="http://jshint.com/" target="_blank" rel="external">http://jshint.com/</a></li>
<li><strong>CSSLint</strong>: <a href="https://github.com/CSSLint/csslint" target="_blank" rel="external">https://github.com/CSSLint/csslint</a></li>
<li><strong>HTMLHint</strong>: <a href="http://htmlhint.com/" target="_blank" rel="external">http://htmlhint.com/</a></li>
<li><strong>Stylus</strong>: <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">http://learnboost.github.io/stylus/</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Anki 自用卡片模板分享]]></title>
      <url>http://blog.xiaomo.info/2015/11/23/anki_templates/</url>
      <content type="html"><![CDATA[<p></p><h2 id="intro">前言</h2><a href="http://ankisrs.net/" target="_blank" rel="external">Anki</a> 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。<p></p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><p>标题居中，用不同背景色区分答案类型，设置圆角等样式。<br><img src="http://moxfive.xyz//resources/Anki-a1.png" alt="Anki-a1"></p>
<h3 id="模板使用区域"><a href="#模板使用区域" class="headerlink" title="模板使用区域"></a>模板使用区域</h3><ul>
<li>主要需要填写如图所示4个区域。<br><img src="http://moxfive.xyz//resources/Anki-a2.png" alt="Anki-a2"></li>
</ul>
<h3 id="正面模板"><a href="#正面模板" class="headerlink" title="正面模板"></a>正面模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;logo&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"logo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size:2em"</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">9em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.English</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffe4f4</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Chinese</span> &#123;</span><br><span class="line">     <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">     <span class="attribute">text-align</span>: justify;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#edffc4</span>;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">1.2em</span> .<span class="number">3em</span>;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="背面模板"><a href="#背面模板" class="headerlink" title="背面模板"></a>背面模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;FrontSide&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">id</span>=<span class="string">answer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="带页脚模板"><a href="#带页脚模板" class="headerlink" title="带页脚模板"></a>带页脚模板</h2><p>加了页脚，左下显示标签分类信息，右下链接到设定的网址。</p>
<p><img src="http://moxfive.xyz//resources/Anki-b1.png" alt="Anki-b1"></p>
<h3 id="模板使用区域-1"><a href="#模板使用区域-1" class="headerlink" title="模板使用区域"></a>模板使用区域</h3><ul>
<li>主要需要填写如图所示5个区域。</li>
</ul>
<p><img src="http://moxfive.xyz//resources/Anki-b2.png" alt="Anki-b2"></p>
<h3 id="正面模板-1"><a href="#正面模板-1" class="headerlink" title="正面模板"></a>正面模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">title</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">author</span>&gt;</span>M.ZH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Chinese</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#edffc4</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1.2em</span> <span class="number">0.3em</span>;</span><br><span class="line">    <span class="attribute">padding </span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.English</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 方正中雅宋_GBK;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffe4f4</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.front</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item_eng</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top </span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-class">.tag</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.author</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="背面模板-1"><a href="#背面模板-1" class="headerlink" title="背面模板"></a>背面模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">id</span>= <span class="string">answer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;image&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;Link&#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">link</span>&gt;</span>Reference Site<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>= <span class="string">tag</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="字体下载"><a href="#字体下载" class="headerlink" title="字体下载"></a>字体下载</h2><p>测试了不少字体，感觉 <a href="http://www.daimg.com/download.php?open=2&amp;id=12741&amp;uhash=1eb7c629071a1341f83bc53b" target="_blank" rel="external">方正中雅宋_GBK</a> 和这个软件最匹配。当然，大家可以自行修改<code>font-family</code>，换用喜欢的字体。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[制作透明背景 PNG 图片和 GIF 动图的几种方法]]></title>
      <url>http://blog.xiaomo.info/2015/11/16/png_gif_transparency/</url>
      <content type="html"><![CDATA[<p>　　偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。</p>
<a id="more"></a>
<p><a href="https://github.com/qq83387856" target="_blank" rel="external"><img src="http://static.xiaomo.info/images/life.png" alt="点击访问小莫的github"></a></p>
<h2 id="PowerPoint-→-PNG"><a href="#PowerPoint-→-PNG" class="headerlink" title="PowerPoint → PNG"></a>PowerPoint → PNG</h2><blockquote>
<p>微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。</p>
</blockquote>
<ol>
<li><p>打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。</p>
</li>
<li><p>依次点击<code>格式</code>选项卡 - <code>颜色</code>菜单 - <code>设置透明色</code> - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。</p>
</li>
</ol>
<ul>
<li><code>删除背景</code>功能类似，不过感觉没上面的方式快捷。</li>
</ul>
<p><img src="http://moxfive.xyz/resources/PPT-PNG.jpg" alt="PPT-PNG"></p>
<h2 id="PhotoShop-→-PNG"><a href="#PhotoShop-→-PNG" class="headerlink" title="PhotoShop → PNG"></a>PhotoShop → PNG</h2><blockquote>
<p>如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。</p>
</blockquote>
<ol>
<li><p>用 PS 打开待处理的静态图片，双击图层框右侧<code>小锁</code>标志解锁图层;</p>
</li>
<li><p>选用<code>魔棒工具</code>，调整<code>容差</code>为10左右(容差越大，选取的相似颜色越多)，勾选<code>消除锯齿</code>;</p>
</li>
<li><p>点选背景，按键盘<code>del</code>键删除之(按住<code>shitf</code>键可以多选)，之后将图片另存为 PNG 格式即可。</p>
</li>
</ol>
<p><img src="http://moxfive.xyz/resources/PS-PNG.jpg" alt="PS-PNG"></p>
<h2 id="PhotoShop-→-GIF"><a href="#PhotoShop-→-GIF" class="headerlink" title="PhotoShop → GIF"></a>PhotoShop → GIF</h2><blockquote>
<p>PhotoShop 用来透明化 GIF 动图背景也是很方便的。</p>
</blockquote>
<ol>
<li><p>用 PS 打开待处理的 GIF 动图，并确保<code>时间轴</code>窗口已显示(<code>窗口</code>菜单 - 勾选<code>时间轴</code>)；</p>
</li>
<li><p>全选<code>时间轴</code>中的图片(可利用<code>shift</code>键全选)，右键图片，勾选<code>自动</code>(跳过此步生产的动图会有重影)；</p>
</li>
<li><p>点击<code>文件</code>菜单 - <code>存储为 Web 所用格式...</code>；</p>
</li>
<li><p>在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击<code>存储...</code>保存 GIF 到目标位置即可。</p>
</li>
</ol>
<p><img src="http://moxfive.xyz/resources/PS-GIF-1.jpg" alt="PS-GIF-1"><br><img src="http://moxfive.xyz/resources/PS-GIF-2.jpg" alt="PS-GIF-2"></p>
<h2 id="一些成品"><a href="#一些成品" class="headerlink" title="一些成品"></a>一些成品</h2><p>展示一些已经透明化背景的图片。</p>
<p><img src="http://moxfive.xyz/resources/Mihawk.gif" alt="Mihawk"><img src="http://moxfive.xyz/resources/food-boy.gif" alt="food-boy"><img src="http://moxfive.xyz/resources/bilibili.gif" alt="bilibili"></p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ol>
<li><strong><em>移动端图片格式调研</em></strong> by <strong>ibireme</strong> on <code>2015/11/2</code>: <a href="http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/" target="_blank" rel="external">http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/</a></li>
<li><strong><em>解决GIF动画图去背景后出现的重影</em></strong> by <strong>有烟飘过</strong> on <code>2010/5/10</code>: <a href="http://tieba.baidu.com/p/2106457600" target="_blank" rel="external">http://tieba.baidu.com/p/2106457600</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
